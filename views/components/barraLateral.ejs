<!-- LATERAL DIREITA (SEMPRE PRESENTE) -->
<aside class="sidebar-right">
  <!-- Tarefas: Lista de tarefas rápidas (DESIGN MELHORADO) -->
  <div class="tasks-section">
    <h3 class="section-title">
      <span>✅</span>
      Tarefas
    </h3>

    <!-- Caixa das tarefas com design melhorado -->
    <div style="background: white; border: 1px solid #e0e0e0; border-radius: 12px; padding: 20px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
      <div style="margin-bottom: 15px;">
        <span style="font-size: 14px; font-weight: 600; color: #333;">Organização de Tarefas</span>
      </div>

      <!-- SISTEMA DE TAREFAS SIMPLES -->

      <!-- A Fazer -->
      <div style="margin-bottom: 15px;">
        <h4 style="margin: 0 0 8px; font-size: 13px; color: #f59e0b;">📋 A Fazer (<span id="contA">0</span>)</h4>
        <div id="aFazer" style="min-height: 50px; padding: 5px; border: 1px dashed #f59e0b; border-radius: 6px; background: #fff8e1;"></div>
      </div>

      <!-- Fazendo -->
      <div style="margin-bottom: 15px;">
        <h4 style="margin: 0 0 8px; font-size: 13px; color: #3b82f6;">🔄 Fazendo (<span id="contF">0</span>)</h4>
        <div id="fazendo" style="min-height: 50px; padding: 5px; border: 1px dashed #3b82f6; border-radius: 6px; background: #e3f2fd;"></div>
      </div>

      <!-- Concluído -->
      <div style="margin-bottom: 15px;">
        <h4 style="margin: 0 0 8px; font-size: 13px; color: #16a34a;">✅ Concluído (<span id="contC">0</span>)</h4>
        <div id="concluido" style="min-height: 50px; padding: 5px; border: 1px dashed #16a34a; border-radius: 6px; background: #f1f8e9;"></div>
      </div>

      <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #e0e0e0;">
        <button onclick="adicionarTarefa()" style="width: 100%; padding: 12px; background: #16a34a; color: white; border: none; border-radius: 6px; font-size: 13px; cursor: pointer; transition: all 0.2s ease; font-weight: 600;" onmouseover="this.style.background='#15803d'" onmouseout="this.style.background='#16a34a'">
          + Adicionar Nova Tarefa
        </button>
      </div>
    </div>
  </div>

  <!-- Calendário: Pequeno calendário mensal -->
  <div class="calendar-section">
    <h3 class="section-title">
      <span>📅</span>
      Calendário
    </h3>

    <div class="mini-calendar">
      <div class="calendar-header" id="currentMonth">
        Janeiro 2024
      </div>

      <div class="calendar-grid" id="calendarGrid">
        <!-- Cabeçalho dos dias -->
        <div style="font-weight: bold; color: #666; text-align: center;">D</div>
        <div style="font-weight: bold; color: #666; text-align: center;">S</div>
        <div style="font-weight: bold; color: #666; text-align: center;">T</div>
        <div style="font-weight: bold; color: #666; text-align: center;">Q</div>
        <div style="font-weight: bold; color: #666; text-align: center;">Q</div>
        <div style="font-weight: bold; color: #666; text-align: center;">S</div>
        <div style="font-weight: bold; color: #666; text-align: center;">S</div>

        <!-- Dias do mês serão inseridos aqui via JavaScript -->
      </div>
    </div>
  </div>

  <!-- Botão "Pergunte para IA" -->
  <div class="ai-section">
    <h3 class="section-title">
      <span>🤖</span>
      Assistente IA
    </h3>

    <button class="ai-button" onclick="perguntarIA()">
      Pergunte para IA
    </button>

    <div style="margin-top: 15px; padding: 15px; background: #f8f9fa; border-radius: 8px; font-size: 14px; color: #666;">
      <strong>💡 Dica do dia:</strong><br>
      <span id="aiTip">Considere reabastecer o estoque de Kit PCR COVID-19. Vendas aumentaram 15% esta semana.</span>
    </div>
  </div>
</aside>

<script>
  // Gerar calendário (CORRIGIDO)
  function generateCalendar() {
    const now = new Date();
    const currentMonth = now.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });
    document.getElementById('currentMonth').textContent = currentMonth.charAt(0).toUpperCase() + currentMonth.slice(1);

    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
    const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);

    // Calcular o primeiro dia da semana a ser mostrado
    const startDate = new Date(firstDay);
    const dayOfWeek = firstDay.getDay(); // 0 = domingo, 1 = segunda, etc.
    startDate.setDate(firstDay.getDate() - dayOfWeek);

    const calendarGrid = document.getElementById('calendarGrid');
    if (!calendarGrid) return;

    // Remover apenas os dias, mantendo o cabeçalho
    const dayElements = calendarGrid.querySelectorAll('.calendar-day');
    dayElements.forEach(el => el.remove());

    // Gerar 42 dias (6 semanas x 7 dias)
    for (let i = 0; i < 42; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);

      const dayElement = document.createElement('div');
      dayElement.className = 'calendar-day';
      dayElement.textContent = currentDate.getDate();
      dayElement.style.textAlign = 'center';
      dayElement.style.cursor = 'pointer';

      // Verificar se é do mês atual
      if (currentDate.getMonth() === now.getMonth() && currentDate.getFullYear() === now.getFullYear()) {
        // Verificar se é hoje
        if (currentDate.getDate() === now.getDate()) {
          dayElement.classList.add('today');
        }
        dayElement.style.color = '#333';
      } else {
        // Dias de outros meses ficam mais claros
        dayElement.style.opacity = '0.4';
        dayElement.style.color = '#999';
      }

      calendarGrid.appendChild(dayElement);
    }
  }

  // Função para perguntar à IA
  function perguntarIA() {
    abrirChatIA();
  }

  // ===== CHAT IA FUNCIONAL =====
  function abrirChatIA() {
    // Criar modal de chat
    const modal = document.createElement('div');
    modal.id = 'modalChatIA';
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    `;

    modal.innerHTML = `
      <div style="background: white; border-radius: 12px; width: 90%; max-width: 500px; height: 600px; display: flex; flex-direction: column;">
        <!-- Header do Chat -->
        <div style="padding: 20px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center;">
          <div style="display: flex; align-items: center; gap: 12px;">
            <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #8b5cf6, #3b82f6); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 18px;">🤖</div>
            <div>
              <h3 style="margin: 0; color: #333;">IA PCR Labor</h3>
              <p style="margin: 0; color: #666; font-size: 12px;">Assistente Inteligente</p>
            </div>
          </div>
          <button onclick="fecharChatIA()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
        </div>

        <!-- Área de mensagens -->
        <div id="chatMessages" style="flex: 1; padding: 20px; overflow-y: auto; background: #f8f9fa;">
          <div style="display: flex; align-items: flex-start; gap: 12px; margin-bottom: 15px;">
            <div style="width: 32px; height: 32px; background: linear-gradient(135deg, #8b5cf6, #3b82f6); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 14px; flex-shrink: 0;">🤖</div>
            <div style="background: white; padding: 12px 16px; border-radius: 12px; border-top-left-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); max-width: 80%;">
              <p style="margin: 0; color: #333; font-size: 14px;">Olá! Sou a IA do PCR Labor. Como posso ajudar você hoje? Posso responder sobre vendas, estoque, relatórios e muito mais!</p>
            </div>
          </div>
        </div>

        <!-- Input de mensagem -->
        <div style="padding: 20px; border-top: 1px solid #e0e0e0;">
          <div style="display: flex; gap: 12px;">
            <input type="text" id="chatInput" placeholder="Digite sua pergunta..."
                   style="flex: 1; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 14px;"
                   onkeypress="if(event.key==='Enter') enviarMensagem()">
            <button onclick="enviarMensagem()"
                    style="padding: 12px 20px; background: #8b5cf6; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px;">
              Enviar
            </button>
          </div>

          <!-- Sugestões rápidas -->
          <div style="margin-top: 12px; display: flex; gap: 8px; flex-wrap: wrap;">
            <button onclick="perguntaRapida('Como estão as vendas hoje?')" style="padding: 6px 12px; background: #f3f4f6; border: 1px solid #d1d5db; border-radius: 16px; font-size: 12px; cursor: pointer;">📊 Vendas hoje</button>
            <button onclick="perguntaRapida('Quais produtos estão com estoque baixo?')" style="padding: 6px 12px; background: #f3f4f6; border: 1px solid #d1d5db; border-radius: 16px; font-size: 12px; cursor: pointer;">📦 Estoque baixo</button>
            <button onclick="perguntaRapida('Gerar relatório de vendas')" style="padding: 6px 12px; background: #f3f4f6; border: 1px solid #d1d5db; border-radius: 16px; font-size: 12px; cursor: pointer;">📄 Relatório</button>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);
    document.getElementById('chatInput').focus();
  }

  function fecharChatIA() {
    const modal = document.getElementById('modalChatIA');
    if (modal) {
      modal.remove();
    }
  }

  function perguntaRapida(pergunta) {
    document.getElementById('chatInput').value = pergunta;
    enviarMensagem();
  }

  function enviarMensagem() {
    const input = document.getElementById('chatInput');
    const mensagem = input.value.trim();

    if (!mensagem) return;

    // Adicionar mensagem do usuário
    adicionarMensagem(mensagem, 'usuario');
    input.value = '';

    // Simular "digitando..."
    setTimeout(() => {
      adicionarMensagem('digitando...', 'ia', true);

      // Resposta da IA após 2 segundos
      setTimeout(() => {
        removerDigitando();
        const resposta = gerarRespostaIA(mensagem);
        adicionarMensagem(resposta, 'ia');
      }, 2000);
    }, 500);
  }

  function adicionarMensagem(texto, tipo, digitando = false) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');

    if (tipo === 'usuario') {
      messageDiv.innerHTML = `
        <div style="display: flex; justify-content: flex-end; margin-bottom: 15px;">
          <div style="background: #8b5cf6; color: white; padding: 12px 16px; border-radius: 12px; border-top-right-radius: 4px; max-width: 80%;">
            <p style="margin: 0; font-size: 14px;">${texto}</p>
          </div>
        </div>
      `;
    } else {
      messageDiv.innerHTML = `
        <div style="display: flex; align-items: flex-start; gap: 12px; margin-bottom: 15px;" ${digitando ? 'id="digitandoMsg"' : ''}>
          <div style="width: 32px; height: 32px; background: linear-gradient(135deg, #8b5cf6, #3b82f6); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 14px; flex-shrink: 0;">🤖</div>
          <div style="background: white; padding: 12px 16px; border-radius: 12px; border-top-left-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); max-width: 80%;">
            <p style="margin: 0; color: #333; font-size: 14px; ${digitando ? 'font-style: italic; opacity: 0.7;' : ''}">${texto}</p>
          </div>
        </div>
      `;
    }

    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function removerDigitando() {
    const digitandoMsg = document.getElementById('digitandoMsg');
    if (digitandoMsg) {
      digitandoMsg.remove();
    }
  }

  async function gerarRespostaIA(pergunta) {
    const perguntaLower = pergunta.toLowerCase();

    try {
      // Buscar dados reais da empresa via API
      const response = await fetch('/api/dashboard-stats');
      const dadosEmpresa = await response.json();

      // Respostas baseadas em dados REAIS da empresa
      if (perguntaLower.includes('venda') || perguntaLower.includes('vendas')) {
        const vendas = dadosEmpresa.data || {};
        return `📊 **Análise de Vendas da Sua Empresa:**\n\n• Total de vendas: ${vendas.totalVendas || 0}\n• Valor total: R$ ${(vendas.valorTotalVendas || 0).toFixed(2)}\n• Vendas hoje: ${vendas.vendasHoje || 0}\n• Ticket médio: R$ ${(vendas.ticketMedio || 0).toFixed(2)}\n• Produto mais vendido: ${vendas.produtoMaisVendido || 'N/A'}\n\nCrescimento: ${vendas.crescimentoDiario || 0}% vs ontem`;
      }

      if (perguntaLower.includes('estoque')) {
        const produtos = dadosEmpresa.data || {};
        return `📦 **Status do Estoque da Sua Empresa:**\n\n• Total de produtos: ${produtos.totalProdutos || 0}\n• Produtos com estoque baixo: ${produtos.produtosEstoqueBaixo || 0}\n\n⚠️ **Atenção:** ${produtos.produtosEstoqueBaixo > 0 ? 'Alguns produtos precisam de reposição!' : 'Estoque adequado!'}\n\nSugestão: Monitore regularmente os níveis mínimos.`;
      }

      if (perguntaLower.includes('pedido') || perguntaLower.includes('pedidos')) {
        const pedidos = dadosEmpresa.data || {};
        return `� **Status dos Pedidos:**\n\n• Total de pedidos: ${pedidos.totalPedidos || 0}\n• Valor total: R$ ${(pedidos.valorTotalPedidos || 0).toFixed(2)}\n• Pedidos pendentes: ${pedidos.pedidosPendentes || 0}\n\n${pedidos.pedidosPendentes > 0 ? '⚠️ Há pedidos pendentes que precisam de atenção!' : '✅ Todos os pedidos estão em dia!'}`;
      }

      if (perguntaLower.includes('plataforma')) {
        const plataformas = dadosEmpresa.data?.plataformas || [];
        let resposta = `🛒 **Performance das Suas Plataformas:**\n\n`;

        plataformas.forEach((plat, index) => {
          resposta += `• **${plat.nome}**: R$ ${(plat.valor_total || 0).toFixed(2)} (${plat.total_vendas || 0} vendas)\n`;
        });

        if (plataformas.length === 0) {
          resposta += 'Nenhum dado de plataforma disponível no momento.';
        } else {
          resposta += `\n🏆 **Líder:** ${plataformas[0]?.nome || 'N/A'}`;
        }

        return resposta;
      }

      if (perguntaLower.includes('relatório') || perguntaLower.includes('relatorio')) {
        return `� **Relatórios Disponíveis para Sua Empresa:**\n\n1. **Dashboard Completo** - Visão geral atual\n2. **Análise de Vendas** - Histórico detalhado\n3. **Controle de Estoque** - Status e movimentações\n4. **Performance por Plataforma** - Comparativo\n5. **Gestão de Pedidos** - Workflow completo\n\nTodos os dados são específicos da sua empresa e atualizados em tempo real!`;
      }

      if (perguntaLower.includes('lucro') || perguntaLower.includes('margem')) {
        return `💰 **Análise de Lucratividade:**\n\nCom os novos campos de preço base implementados, você pode:\n\n• Calcular margem real por produto\n• Considerar custos de frete\n• Analisar lucro líquido por venda\n• Identificar produtos mais rentáveis\n\nAcesse a seção de produtos para ver os cálculos detalhados!`;
      }

      // Resposta genérica com dados reais
      return `🤖 Analisando "${pergunta}" com base nos dados da sua empresa:\n\n• ${dadosEmpresa.data?.totalProdutos || 0} produtos cadastrados\n• ${dadosEmpresa.data?.totalVendas || 0} vendas realizadas\n• R$ ${(dadosEmpresa.data?.valorTotalVendas || 0).toFixed(2)} em faturamento\n• ${dadosEmpresa.data?.produtosEstoqueBaixo || 0} produtos com estoque baixo\n\nPosso ajudar com análises mais específicas. O que você gostaria de saber?`;

    } catch (error) {
      console.error('Erro ao buscar dados da empresa:', error);

      // Fallback para quando não conseguir acessar os dados
      return `🤖 Desculpe, não consegui acessar os dados da sua empresa no momento.\n\nTente:\n• Verificar sua conexão\n• Recarregar a página\n• Tentar novamente em alguns segundos\n\nEnquanto isso, posso ajudar com informações gerais sobre o sistema!`;
    }

    return respostasGenericas[Math.floor(Math.random() * respostasGenericas.length)];
  }

  // Função para toggle de tarefas (NOVA)
  function toggleTask(checkbox) {
    const label = checkbox.nextElementSibling;
    const container = checkbox.parentElement;

    if (checkbox.checked) {
      label.style.textDecoration = 'line-through';
      container.style.background = '#dcfce7';
      container.style.opacity = '0.7';

      // Atualizar contador
      const counter = document.querySelector('[style*="background: #f59e0b"]');
      const currentCount = parseInt(counter.textContent);
      counter.textContent = Math.max(0, currentCount - 1);

      // Feedback visual
      setTimeout(() => {
        alert('✅ Tarefa concluída!\n\nParabéns por manter a produtividade!');
      }, 100);
    } else {
      label.style.textDecoration = 'none';
      container.style.background = '#f8f9fa';
      container.style.opacity = '1';

      // Atualizar contador
      const counter = document.querySelector('[style*="background: #f59e0b"]');
      const currentCount = parseInt(counter.textContent);
      counter.textContent = currentCount + 1;
    }
  }

  // ===== SISTEMA DE TAREFAS SIMPLES (LOCALSTORAGE) =====

  let tarefas = [
    { id: 1, texto: 'Verificar estoque de kits PCR', status: 'a_fazer' },
    { id: 2, texto: 'Atualizar preços no Mercado Livre', status: 'fazendo' },
    { id: 3, texto: 'Responder emails de clientes', status: 'concluido' }
  ];

  // Carregar tarefas do localStorage
  function carregarTarefas() {
    const tarefasSalvas = localStorage.getItem('tarefas');
    if (tarefasSalvas) {
      tarefas = JSON.parse(tarefasSalvas);
    }
  }

  // Salvar tarefas no localStorage
  function salvarTarefas() {
    localStorage.setItem('tarefas', JSON.stringify(tarefas));
  }



  function renderizar() {
    const aFazer = document.getElementById('aFazer');
    const fazendo = document.getElementById('fazendo');
    const concluido = document.getElementById('concluido');

    aFazer.innerHTML = '';
    fazendo.innerHTML = '';
    concluido.innerHTML = '';

    let contA = 0, contF = 0, contC = 0;

    tarefas.forEach(tarefa => {
      const div = document.createElement('div');
      div.style.cssText = `
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px;
        margin-bottom: 5px;
        background: white;
        border-radius: 6px;
        border-left: 3px solid ${getBorderColor(tarefa.status)};
        cursor: move;
        transition: all 0.2s ease;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      `;

      div.draggable = true;
      div.dataset.id = tarefa.id;
      div.dataset.status = tarefa.status;

      div.innerHTML = `
        <span style="font-size: 12px;">${getStatusIcon(tarefa.status)}</span>
        <span style="flex: 1; font-size: 12px; color: #333;">${tarefa.texto}</span>
        <button onclick="deletar(${tarefa.id})" style="background: #ef4444; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 10px; cursor: pointer;">×</button>
      `;

      // Adicionar eventos de drag
      div.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', tarefa.id);
        e.dataTransfer.setData('application/json', JSON.stringify(tarefa));
        div.style.opacity = '0.5';
      });

      div.addEventListener('dragend', () => {
        div.style.opacity = '1';
      });

      // Adicionar à coluna correta
      if (tarefa.status === 'a_fazer') {
        aFazer.appendChild(div);
        contA++;
      } else if (tarefa.status === 'fazendo') {
        fazendo.appendChild(div);
        contF++;
      } else if (tarefa.status === 'concluido') {
        concluido.appendChild(div);
        contC++;
      }
    });

    document.getElementById('contA').textContent = contA;
    document.getElementById('contF').textContent = contF;
    document.getElementById('contC').textContent = contC;
  }

  function getBorderColor(status) {
    const colors = {
      'a_fazer': '#f59e0b',
      'fazendo': '#3b82f6',
      'concluido': '#16a34a'
    };
    return colors[status] || '#6b7280';
  }

  function getStatusIcon(status) {
    const icons = {
      'a_fazer': '📋',
      'fazendo': '🔄',
      'concluido': '✅'
    };
    return icons[status] || '📋';
  }

  function adicionarTarefa() {
    const texto = prompt('Digite a nova tarefa:');
    if (texto && texto.trim()) {
      const nova = {
        id: Date.now(), // ID único baseado no timestamp
        texto: texto.trim(),
        status: 'a_fazer'
      };

      tarefas.push(nova);
      salvarTarefas();
      renderizar();
      mostrarToast('✅ Nova tarefa adicionada!', '#16a34a');
    }
  }

  // Função removida - usando prompt simples

  function deletar(id) {
    if (confirm('Deletar esta tarefa?')) {
      tarefas = tarefas.filter(t => t.id !== id);
      salvarTarefas();
      renderizar();
      mostrarToast('🗑️ Tarefa deletada!', '#ef4444');
    }
  }

  function mover(id, novoStatus) {
    const tarefa = tarefas.find(t => t.id === id);
    if (tarefa) {
      tarefa.status = novoStatus;
      salvarTarefas();
      renderizar();

      const mensagens = {
        'a_fazer': '📋 Movida para "A Fazer"',
        'fazendo': '🔄 Movida para "Fazendo"',
        'concluido': '✅ Movida para "Concluído"'
      };
      mostrarToast(mensagens[novoStatus], getBorderColor(novoStatus));
    }
  }

  function mostrarToast(mensagem, cor) {
    const toast = document.createElement('div');
    toast.style.cssText = `
      position: fixed;
      top: 100px;
      right: 20px;
      background: ${cor};
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      z-index: 1000;
      font-size: 14px;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
      animation: slideIn 0.3s ease;
    `;
    toast.textContent = mensagem;
    document.body.appendChild(toast);

    setTimeout(() => {
      toast.style.animation = 'slideOut 0.3s ease';
      setTimeout(() => toast.remove(), 300);
    }, 2000);
  }

  function configurarDrop() {
    ['aFazer', 'fazendo', 'concluido'].forEach(id => {
      const container = document.getElementById(id);

      container.addEventListener('dragover', e => {
        e.preventDefault();
        container.style.borderStyle = 'solid';
      });

      container.addEventListener('dragleave', e => {
        container.style.borderStyle = 'dashed';
      });

      container.addEventListener('drop', e => {
        e.preventDefault();
        container.style.borderStyle = 'dashed';

        const tarefaId = parseInt(e.dataTransfer.getData('text/plain'));
        let novoStatus;

        if (id === 'aFazer') novoStatus = 'a_fazer';
        else if (id === 'fazendo') novoStatus = 'fazendo';
        else novoStatus = 'concluido';

        mover(tarefaId, novoStatus);
      });
    });
  }

  // Adicionar animações CSS
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
  `;
  document.head.appendChild(style);

  // ===== FUNCIONALIDADES AVANÇADAS DE TAREFAS =====

  // Tornar funções globais
  window.adicionarTarefa = adicionarTarefa;
  window.deletar = deletar;

  // Sistema simples - sem funções complexas

  // Funções auxiliares básicas removidas - sistema simples

  // Todas as funções complexas removidas - sistema simples localStorage

  // Inicializar
  document.addEventListener('DOMContentLoaded', function() {
    generateCalendar();

    // Carregar tarefas salvas
    carregarTarefas();
    renderizar();
    configurarDrop();

    console.log('🚀 Sistema de tarefas inicializado');
  });

</script>
