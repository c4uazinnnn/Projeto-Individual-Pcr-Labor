<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <link rel="stylesheet" href="/css/estilos.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <!-- Header horizontal (Topo) com logo e menu -->
  <%- include('../components/cabecalho') %>

  <!-- Layout principal -->
  <div class="main-layout">
    <!-- √Årea central para o conte√∫do principal -->
    <main class="content-area">
      <!-- 5Ô∏è‚É£ Tela de Estoque -->
      <h1 class="page-title">Estoque</h1>

      <!-- Gr√°ficos circulares: "Em estoque", "Quantidade de compras", "A enviar" -->
      <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 30px; margin-bottom: 40px;">

        <!-- Gr√°fico "Em estoque" -->
        <div class="content-section">
          <div class="section-header">
            <h3 class="section-title">üì¶ Em estoque</h3>
          </div>
          <div class="section-content">
            <div style="position: relative; height: 250px;">
              <canvas id="estoqueChart"></canvas>
            </div>
            <div style="text-align: center; margin-top: 15px;">
              <div style="font-size: 24px; font-weight: bold; color: #018820;">
                <%= produtos.reduce((total, p) => total + p.estoque_atual, 0) %>
              </div>
              <div style="color: #666; font-size: 14px;">Unidades totais</div>
            </div>
          </div>
        </div>

        <!-- Gr√°fico "Quantidade de compras" -->
        <div class="content-section">
          <div class="section-header">
            <h3 class="section-title">üõí Quantidade de compras</h3>
          </div>
          <div class="section-content">
            <div style="position: relative; height: 250px;">
              <canvas id="comprasChart"></canvas>
            </div>
            <div style="text-align: center; margin-top: 15px;">
              <div style="font-size: 24px; font-weight: bold; color: #3b82f6;">R$ 45.200</div>
              <div style="color: #666; font-size: 14px;">Valor em compras</div>
            </div>
          </div>
        </div>

        <!-- Gr√°fico "A enviar" -->
        <div class="content-section">
          <div class="section-header">
            <h3 class="section-title">üöö A enviar</h3>
          </div>
          <div class="section-content">
            <div style="position: relative; height: 250px;">
              <canvas id="enviarChart"></canvas>
            </div>
            <div style="text-align: center; margin-top: 15px;">
              <div style="font-size: 24px; font-weight: bold; color: #f59e0b;">28</div>
              <div style="color: #666; font-size: 14px;">Pedidos pendentes</div>
            </div>
          </div>
        </div>

      </div>

      <!-- Filtros com caixa de fundo -->
      <div style="
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
      ">
        <div style="
          display: flex;
          justify-content: space-between;
          align-items: center;
          flex-wrap: wrap;
          gap: 15px;
        ">
          <div style="
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
          ">
            <!-- Filtros Unificados -->
            <%- include('../components/filtroUnificado') %>
          </div>

          <!-- A√ß√µes -->
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-secondary" onclick="exportarEstoque()">üìÑ Exportar</button>
            <button class="btn btn-secondary" onclick="atualizarEstoque()">üîÑ Atualizar</button>
            <button class="btn btn-primary" onclick="adicionarProdutoEstoque()">+ Adicionar Produto</button>
          </div>
        </div>
      </div>

      <!-- Lista detalhada de produtos -->
      <div class="content-section">
        <div class="section-header">
          <h3 class="section-title">üìã Produtos em Estoque</h3>
        </div>
        <div class="section-content">
          <table class="data-table">
            <thead>
              <tr>
                <th>Produto</th>
                <th>SKU</th>
                <th>Estoque Atual</th>
                <th>Estoque M√≠nimo</th>
                <th>Pre√ßo</th>
                <th>Status</th>
                <th>A√ß√µes</th>
              </tr>
            </thead>
            <tbody>
              <% if (produtos && produtos.length > 0) { %>
                <% for (let i = 0; i < produtos.length; i++) { const produto = produtos[i]; %>
                  <tr>
                    <td><strong><%= produto.nome %></strong></td>
                    <td><%= produto.sku %></td>
                    <td>
                      <% if (produto.estoque_atual <= 10) { %>
                        <span style="color: #ef4444; font-weight: bold;"><%= produto.estoque_atual %></span>
                      <% } else { %>
                        <span style="color: #16a34a;"><%= produto.estoque_atual %></span>
                      <% } %>
                    </td>
                    <td>10</td>
                    <td>R$ <%= parseFloat(produto.preco).toFixed(2) %></td>
                    <td>
                      <% if (produto.estoque_atual <= 10) { %>
                        <span style="background: #fee2e2; color: #dc2626; padding: 4px 8px; border-radius: 4px; font-size: 12px;">‚ö†Ô∏è Baixo</span>
                      <% } else { %>
                        <span style="background: #dcfce7; color: #16a34a; padding: 4px 8px; border-radius: 4px; font-size: 12px;">‚úÖ Normal</span>
                      <% } %>
                    </td>
                    <td>
                      <div style="display: flex; gap: 5px;">
                        <button class="btn btn-primary" onclick="editarEstoque(<%= produto.id_produto %>)" style="padding: 6px 12px; font-size: 12px;">Editar</button>
                        <button class="btn btn-secondary" onclick="ajustarEstoque(<%= produto.id_produto %>)" style="padding: 6px 12px; font-size: 12px;">Ajustar</button>
                        <button class="btn btn-secondary" onclick="verHistoricoEstoque(<%= produto.id_produto %>)" style="padding: 6px 12px; font-size: 12px;">Hist√≥rico</button>
                      </div>
                    </td>
                  </tr>
                <% } %>
              <% } else { %>
                <tr>
                  <td colspan="7" style="text-align: center; color: #666; padding: 40px;">Nenhum produto encontrado</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>

    </main>

    <!-- Lateral direita com Tarefas, Calend√°rio e Pergunte para IA -->
    <%- include('../components/barraLateral') %>
  </div>

  <script>
var produtosData = <%- JSON.stringify(produtos) %>;
var pedidosData = <%- JSON.stringify(pedidos) %>;
var vendasData = <%- JSON.stringify(vendas) %>;
var produtosOriginais = <%- JSON.stringify(produtos) %>;

// ===== GR√ÅFICOS COM DADOS REAIS =====

// Calcular dados reais do estoque
const normal = produtosData.filter(p => parseInt(p.estoque_atual) > 10).length;
const baixo = produtosData.filter(p => {
  const estoque = parseInt(p.estoque_atual);
  return estoque <= 10 && estoque > 5;
}).length;
const critico = produtosData.filter(p => parseInt(p.estoque_atual) <= 5).length;
const semEstoque = produtosData.filter(p => parseInt(p.estoque_atual) === 0).length;

console.log('üìä Dados do estoque:', { normal, baixo, critico, semEstoque, total: produtosData.length });

// Gr√°fico 1: Distribui√ß√£o do Estoque
const estoqueCtx = document.getElementById('estoqueChart').getContext('2d');
window.estoqueChart = new Chart(estoqueCtx, {
  type: 'doughnut',
  data: {
    labels: ['Normal (>10)', 'Baixo (6-10)', 'Cr√≠tico (1-5)', 'Sem Estoque'],
    datasets: [{
      data: [normal, baixo, critico, semEstoque],
      backgroundColor: ['#16a34a', '#f59e0b', '#ef4444', '#6b7280'],
      borderWidth: 2,
      borderColor: '#ffffff'
    }]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          padding: 15,
          usePointStyle: true,
          font: { size: 12 }
        }
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            const total = context.dataset.data.reduce((a, b) => a + b, 0);
            const percentage = ((context.parsed / total) * 100).toFixed(1);
            return `${context.label}: ${context.parsed} produtos (${percentage}%)`;
          }
        }
      }
    }
  }
});

// Gr√°fico 2: Pedidos de Compra (baseado em dados reais)
const comprasRealizadas = pedidosData.filter(p =>
  p.status === 'APROVADO' || p.status === 'ENTREGUE' || p.status === 'CONCLUIDO'
).length;
const comprasPendentes = pedidosData.filter(p => p.status === 'PENDENTE').length;
const comprasCanceladas = pedidosData.filter(p => p.status === 'CANCELADO').length;

// Se n√£o h√° dados, usar valores m√≠nimos para mostrar o gr√°fico
const comprasData = [
  comprasRealizadas || 1,
  comprasPendentes || 1,
  comprasCanceladas || 1
];

console.log('üìä Dados de compras:', { comprasRealizadas, comprasPendentes, comprasCanceladas });

const comprasCtx = document.getElementById('comprasChart').getContext('2d');
window.comprasChart = new Chart(comprasCtx, {
  type: 'doughnut',
  data: {
    labels: ['Realizadas', 'Pendentes', 'Canceladas'],
    datasets: [{
      data: comprasData,
      backgroundColor: ['#16a34a', '#f59e0b', '#ef4444'],
      borderWidth: 2,
      borderColor: '#ffffff'
    }]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          padding: 15,
          usePointStyle: true,
          font: { size: 12 }
        }
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            const valor = context.parsed;
            const total = context.dataset.data.reduce((a, b) => a + b, 0);
            const percentual = ((valor / total) * 100).toFixed(1);
            return `${context.label}: ${valor} pedidos (${percentual}%)`;
          }
        }
      }
    }
  }
});

// Atualizar valor total de compras
const valorTotalCompras = pedidosData.reduce((total, p) => total + (parseFloat(p.valor_total) || 0), 0);
const comprasValueElement = document.querySelector('#comprasChart').closest('.content-section').querySelector('[style*="font-size: 24px"]');
if (comprasValueElement) {
  comprasValueElement.textContent = `R$ ${valorTotalCompras.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`;
}

// Gr√°fico 3: Movimenta√ß√£o de Estoque (incluindo fulfillment)
const preparando = vendasData.filter(v =>
  v.status === 'PENDENTE' || v.status === 'PROCESSANDO'
).length;
const pronto = vendasData.filter(v =>
  v.status === 'PRONTO' || v.status === 'SEPARADO'
).length;
const enviado = vendasData.filter(v =>
  v.status === 'ENVIADO' || v.status === 'ENTREGUE'
).length;

// Calcular produtos para fulfillment baseado no estoque
const produtosComEstoque = produtosData.filter(p => parseInt(p.estoque_atual) > 0);
const paraFulfillment = Math.floor(produtosComEstoque.length * 0.3);

// Dados para o gr√°fico (usar valores m√≠nimos se n√£o h√° dados)
const movimentacaoData = [
  preparando || 1,
  pronto || 1,
  enviado || 2,
  paraFulfillment || 1
];

console.log('üìä Dados de movimenta√ß√£o:', { preparando, pronto, enviado, paraFulfillment });

const enviarCtx = document.getElementById('enviarChart').getContext('2d');
window.enviarChart = new Chart(enviarCtx, {
  type: 'doughnut',
  data: {
    labels: ['Preparando', 'Pronto', 'Enviado', 'Fulfillment'],
    datasets: [{
      data: movimentacaoData,
      backgroundColor: ['#f59e0b', '#3b82f6', '#16a34a', '#8b5cf6'],
      borderWidth: 2,
      borderColor: '#ffffff'
    }]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          padding: 15,
          usePointStyle: true,
          font: { size: 12 }
        }
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            const valor = context.parsed;
            const total = context.dataset.data.reduce((a, b) => a + b, 0);
            const percentual = ((valor / total) * 100).toFixed(1);

            if (context.label === 'Fulfillment') {
              return `${context.label}: ${valor} produtos (${percentual}%)`;
            }
            return `${context.label}: ${valor} pedidos (${percentual}%)`;
          }
        }
      }
    }
  }
});

// Atualizar contador de pedidos pendentes
const totalPendentes = preparando + pronto;
const pendentesElement = document.querySelector('#enviarChart').closest('.content-section').querySelector('[style*="font-size: 24px"]');
if (pendentesElement) {
  pendentesElement.textContent = totalPendentes.toString();
}

// ===== FUNCIONALIDADES DE ESTOQUE =====
function filtrarEstoque(tipo) {
  document.querySelectorAll('[id*="Estoque"]').forEach(btn => {
    btn.className = 'btn btn-secondary';
  });
  if (tipo === 'todos') {
    document.getElementById('filtroTodosEstoque').className = 'btn btn-primary';
  } else if (tipo === 'baixo') {
    document.getElementById('filtroBaixoEstoque').className = 'btn btn-primary';
  } else if (tipo === 'normal') {
    document.getElementById('filtroNormalEstoque').className = 'btn btn-primary';
  } else if (tipo === 'critico') {
    document.getElementById('filtroCriticoEstoque').className = 'btn btn-primary';
  }
  let produtosFiltrados = [];
  switch(tipo) {
    case 'baixo':
      produtosFiltrados = produtosOriginais.filter(produto => produto.estoque_atual <= 10 && produto.estoque_atual > 5);
      break;
    case 'critico':
      produtosFiltrados = produtosOriginais.filter(produto => produto.estoque_atual <= 5);
      break;
    case 'normal':
      produtosFiltrados = produtosOriginais.filter(produto => produto.estoque_atual > 10);
      break;
    case 'todos':
    default:
      produtosFiltrados = [...produtosOriginais];
      break;
  }
  atualizarTabelaEstoque(produtosFiltrados);
  atualizarGraficosEstoque(produtosFiltrados);
  const toast = document.createElement('div');
  toast.style.cssText = `position: fixed; top: 100px; right: 20px; background: #018820; color: white; padding: 12px 20px; border-radius: 8px; z-index: 1000;`;
  toast.textContent = `‚úÖ ${produtosFiltrados.length} produtos encontrados - ${tipo === 'todos' ? 'Todos' : tipo === 'baixo' ? 'Estoque baixo' : tipo === 'normal' ? 'Estoque normal' : 'Estoque cr√≠tico'}`;
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 3000);
}

function atualizarTabelaEstoque(produtos) {
  const tbody = document.querySelector('.data-table tbody');
  if (!tbody) return;
  if (produtos.length === 0) {
    tbody.innerHTML = `<tr><td colspan="7" style="text-align: center; color: #666; padding: 40px;"><div style="font-size: 48px; margin-bottom: 15px;">üîç</div><div style="font-size: 16px; margin-bottom: 10px;">Nenhum produto encontrado</div><div style="font-size: 14px; color: #999;">Tente ajustar os filtros</div></td></tr>`;
    return;
  }
  tbody.innerHTML = produtos.map(produto => `
    <tr>
      <td><strong>${produto.nome}</strong></td>
      <td>${produto.sku}</td>
      <td>${produto.estoque_atual <= 10 ? `<span style='color: #ef4444; font-weight: bold;'>${produto.estoque_atual}</span>` : `<span style='color: #16a34a;'>${produto.estoque_atual}</span>`}</td>
      <td>10</td>
      <td>R$ ${parseFloat(produto.preco).toFixed(2)}</td>
      <td>${produto.estoque_atual <= 5 ? '<span style="background: #fee2e2; color: #dc2626; padding: 4px 8px; border-radius: 4px; font-size: 12px;">Cr√≠tico</span>' : produto.estoque_atual <= 10 ? '<span style="background: #fef3c7; color: #d97706; padding: 4px 8px; border-radius: 4px; font-size: 12px;">Baixo</span>' : '<span style="background: #dcfce7; color: #16a34a; padding: 4px 8px; border-radius: 4px; font-size: 12px;">Normal</span>'}</td>
      <td><div style="display: flex; gap: 5px;"><button class="btn btn-primary" onclick="editarEstoque(${produto.id_produto})" style="padding: 6px 12px; font-size: 12px;">Editar</button><button class="btn btn-secondary" onclick="ajustarEstoque(${produto.id_produto})" style="padding: 6px 12px; font-size: 12px;">Ajustar</button><button class="btn btn-secondary" onclick="verHistoricoEstoque(${produto.id_produto})" style="padding: 6px 12px; font-size: 12px;">Hist√≥rico</button></div></td>
    </tr>
  `).join('');
}

function atualizarGraficosEstoque(produtos) {
  const normal = produtos.filter(p => p.estoque_atual > 10).length;
  const baixo = produtos.filter(p => p.estoque_atual <= 10 && p.estoque_atual > 5).length;
  const critico = produtos.filter(p => p.estoque_atual <= 5).length;
  const totalUnidades = produtos.reduce((total, p) => total + p.estoque_atual, 0);
  const valorTotal = document.querySelector('.content-section:first-child .section-content div[style*="font-size: 24px"]');
  if (valorTotal) valorTotal.textContent = totalUnidades.toString();
  if (window.estoqueChart) {
    window.estoqueChart.data.datasets[0].data = [normal, baixo, critico];
    window.estoqueChart.update();
  }
}

// Adicionar produto ao estoque
function adicionarProdutoEstoque() {
  const modal = document.createElement('div');
  modal.id = 'modalAdicionarProduto';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  `;

  modal.innerHTML = `
    <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
        <h2 style="margin: 0; color: #333;">üì¶ Adicionar Produto ao Estoque</h2>
        <button onclick="fecharModalAdicionarProduto()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
      </div>

      <form id="formAdicionarProduto" onsubmit="criarProdutoEstoque(event)">
        <div style="display: grid; gap: 20px;">

          <!-- Nome -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìù Nome do Produto</label>
            <input type="text" id="nomeEstoqueInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: Kit PCR COVID-19">
          </div>

          <!-- SKU -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üè∑Ô∏è SKU</label>
            <input type="text" id="skuEstoqueInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: PCR-COVID-001">
          </div>

          <!-- Pre√ßo -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üí∞ Pre√ßo (R$)</label>
            <input type="number" id="precoEstoqueInput" step="0.01" min="0" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: 89.90">
          </div>

          <!-- Estoque Inicial -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìä Estoque Inicial</label>
            <input type="number" id="estoqueInicialInput" min="0" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: 100">
          </div>

          <!-- Estoque M√≠nimo -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">‚ö†Ô∏è Estoque M√≠nimo</label>
            <input type="number" id="estoqueMinInput" min="0" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: 10" value="10">
          </div>

        </div>

        <div style="display: flex; gap: 15px; margin-top: 30px;">
          <button type="button" onclick="fecharModalAdicionarProduto()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
            Cancelar
          </button>
          <button type="submit" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
            üì¶ Adicionar ao Estoque
          </button>
        </div>
      </form>
    </div>
  `;

  document.body.appendChild(modal);
}

function fecharModalAdicionarProduto() {
  const modal = document.getElementById('modalAdicionarProduto');
  if (modal) modal.remove();
}

async function criarProdutoEstoque(event) {
  event.preventDefault();

  const formData = {
    nome: document.getElementById('nomeEstoqueInput').value,
    sku: document.getElementById('skuEstoqueInput').value,
    preco: parseFloat(document.getElementById('precoEstoqueInput').value),
    estoque_atual: parseInt(document.getElementById('estoqueInicialInput').value),
    estoque_minimo: parseInt(document.getElementById('estoqueMinInput').value)
  };

  try {
    const response = await fetch('/api/produtos', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });

    const result = await response.json();

    if (result.success) {
      alert('‚úÖ Produto adicionado ao estoque com sucesso!');
      fecharModalAdicionarProduto();
      location.reload();
    } else {
      alert('‚ùå Erro ao adicionar produto: ' + (result.error || 'Erro desconhecido'));
    }
  } catch (error) {
    console.error('Erro ao adicionar produto:', error);
    alert('‚ùå Erro ao adicionar produto. Tente novamente.');
  }
}

// Editar produto no estoque
function editarEstoque(id) {
  const modal = document.createElement('div');
  modal.id = 'modalEditarEstoque';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  `;

  modal.innerHTML = `
    <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
        <h2 style="margin: 0; color: #333;">‚úèÔ∏è Editar Produto #${id}</h2>
        <button onclick="fecharModalEditarEstoque()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
      </div>

      <form id="formEditarEstoque" onsubmit="salvarEdicaoEstoque(event, ${id})">
        <div style="display: grid; gap: 20px;">

          <!-- Nome -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìù Nome do Produto</label>
            <input type="text" id="nomeEditEstoque" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="Kit PCR COVID-19">
          </div>

          <!-- SKU -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üè∑Ô∏è SKU</label>
            <input type="text" id="skuEditEstoque" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="PCR-COVID-001">
          </div>

          <!-- Pre√ßo -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üí∞ Pre√ßo (R$)</label>
            <input type="number" id="precoEditEstoque" step="0.01" min="0" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="89.90">
          </div>

          <!-- Estoque M√≠nimo -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">‚ö†Ô∏è Estoque M√≠nimo</label>
            <input type="number" id="estoqueMinEditEstoque" min="0" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="10">
          </div>

        </div>

        <div style="display: flex; gap: 15px; margin-top: 30px;">
          <button type="button" onclick="fecharModalEditarEstoque()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
            Cancelar
          </button>
          <button type="submit" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
            ‚úÖ Salvar Altera√ß√µes
          </button>
        </div>
      </form>
    </div>
  `;

  document.body.appendChild(modal);
}

function fecharModalEditarEstoque() {
  const modal = document.getElementById('modalEditarEstoque');
  if (modal) modal.remove();
}

async function salvarEdicaoEstoque(event, id) {
  event.preventDefault();

  const formData = {
    nome: document.getElementById('nomeEditEstoque').value,
    sku: document.getElementById('skuEditEstoque').value,
    preco: parseFloat(document.getElementById('precoEditEstoque').value),
    estoque_atual: parseInt(document.getElementById('estoqueAtualEditEstoque').value),
    estoque_minimo: parseInt(document.getElementById('estoqueMinEditEstoque').value)
  };

  try {
    console.log('‚úèÔ∏è Editando produto via API:', id, formData);

    // FAZER REQUISI√á√ÉO REAL PARA A API
    const response = await fetch(`/api/produtos/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });

    const result = await response.json();

    if (result.success) {
      alert('‚úÖ Produto editado com sucesso!\n\nTodas as altera√ß√µes foram salvas.');
      fecharModalEditarEstoque();
      location.reload();
    } else {
      alert('‚ùå Erro ao editar produto: ' + (result.error || 'Erro desconhecido'));
    }
  } catch (error) {
    console.error('‚ùå Erro ao editar produto:', error);
    alert('‚ùå Erro ao editar produto. Tente novamente.');
  }
}

// Ajustar estoque
async function ajustarEstoque(id) {
  try {
    // Buscar dados reais do produto
    const produto = produtosOriginais.find(p => p.id_produto === id);
    if (!produto) {
      throw new Error('Produto n√£o encontrado');
    }

    const modal = document.createElement('div');
    modal.id = 'modalAjustarEstoque';
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    `;

  modal.innerHTML = `
    <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 500px;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
        <h2 style="margin: 0; color: #333;">üìä Ajustar Estoque #${id}</h2>
        <button onclick="fecharModalAjustarEstoque()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
      </div>

      <div id="infoProdutoAjuste" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
        <h3 style="margin: 0 0 10px; color: #333;">Carregando produto...</h3>
        <div style="color: #666;">Estoque atual: <strong>-- unidades</strong></div>
      </div>

      <form id="formAjustarEstoque" onsubmit="salvarAjusteEstoque(event, ${id})">
        <div style="display: grid; gap: 20px;">

          <!-- Tipo de ajuste -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìã Tipo de Ajuste</label>
            <select id="tipoAjuste" onchange="atualizarTipoAjuste()" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
              <option value="entrada">‚ûï Entrada (Adicionar)</option>
              <option value="saida">‚ûñ Sa√≠da (Remover)</option>
              <option value="correcao">üîß Corre√ß√£o (Definir valor exato)</option>
            </select>
          </div>

          <!-- Quantidade -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìä Quantidade</label>
            <input type="number" id="quantidadeAjuste" min="1" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: 50">
          </div>

          <!-- Motivo -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìù Motivo</label>
            <select id="motivoAjuste" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
              <option value="compra">Compra de mercadoria</option>
              <option value="devolucao">Devolu√ß√£o de cliente</option>
              <option value="perda">Perda/Avaria</option>
              <option value="venda">Venda manual</option>
              <option value="inventario">Ajuste de invent√°rio</option>
              <option value="outro">Outro motivo</option>
            </select>
          </div>

          <!-- Observa√ß√µes -->
          <div>
            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üí¨ Observa√ß√µes</label>
            <textarea id="observacoesAjuste" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px; min-height: 60px;" placeholder="Observa√ß√µes adicionais..."></textarea>
          </div>

          <!-- Preview do resultado -->
          <div id="previewAjuste" style="background: #f0fff4; padding: 15px; border-radius: 8px; border: 2px solid #16a34a;">
            <div style="font-weight: 600; color: #333; margin-bottom: 5px;">üìä Resultado do Ajuste:</div>
            <div style="color: #16a34a;">Estoque atual: 150 ‚Üí Novo estoque: 150</div>
          </div>

        </div>

        <div style="display: flex; gap: 15px; margin-top: 30px;">
          <button type="button" onclick="fecharModalAjustarEstoque()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
            Cancelar
          </button>
          <button type="submit" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
            üìä Aplicar Ajuste
          </button>
        </div>
      </form>
    </div>
  `;

  document.body.appendChild(modal);

  // Atualizar informa√ß√µes do produto
  document.getElementById('infoProdutoAjuste').innerHTML = `
    <h3 style="margin: 0 0 10px; color: #333;">${produto.nome}</h3>
    <div style="color: #666;">Estoque atual: <strong>${produto.estoque_atual} unidades</strong></div>
    <div style="color: #666;">Estoque m√≠nimo: <strong>${produto.estoque_minimo || 10} unidades</strong></div>
  `;

  // Armazenar dados do produto para uso nas fun√ß√µes
  window.produtoAjuste = produto;

  // Event listeners
  document.getElementById('tipoAjuste').addEventListener('change', atualizarPreviewAjuste);
  document.getElementById('quantidadeAjuste').addEventListener('input', atualizarPreviewAjuste);

  } catch (error) {
    console.error('‚ùå Erro ao abrir modal de ajuste:', error);
    alert('‚ùå Erro ao carregar dados do produto: ' + error.message);
  }
}

function fecharModalAjustarEstoque() {
  const modal = document.getElementById('modalAjustarEstoque');
  if (modal) modal.remove();
}

function atualizarPreviewAjuste() {
  const tipo = document.getElementById('tipoAjuste').value;
  const quantidade = parseInt(document.getElementById('quantidadeAjuste').value) || 0;
  const estoqueAtual = window.produtoAjuste ? window.produtoAjuste.estoque_atual : 0;

  let novoEstoque = estoqueAtual;
  let cor = '#16a34a';

  if (tipo === 'entrada') {
    novoEstoque = estoqueAtual + quantidade;
  } else if (tipo === 'saida') {
    novoEstoque = estoqueAtual - quantidade;
    if (novoEstoque < 0) {
      novoEstoque = 0;
      cor = '#ef4444';
    }
  } else if (tipo === 'correcao') {
    novoEstoque = quantidade;
  }

  const preview = document.getElementById('previewAjuste');
  preview.style.borderColor = cor;
  preview.style.background = cor === '#ef4444' ? '#fef2f2' : '#f0fff4';
  preview.innerHTML = `
    <div style="font-weight: 600; color: #333; margin-bottom: 5px;">üìä Resultado do Ajuste:</div>
    <div style="color: ${cor};">Estoque atual: ${estoqueAtual} ‚Üí Novo estoque: ${novoEstoque}</div>
  `;
}

async function salvarAjusteEstoque(event, id) {
  event.preventDefault();

  const ajusteData = {
    tipo: document.getElementById('tipoAjuste').value,
    quantidade: parseInt(document.getElementById('quantidadeAjuste').value),
    motivo: document.getElementById('motivoAjuste').value,
    observacoes: document.getElementById('observacoesAjuste').value
  };

  try {
    console.log('üîÑ Ajustando estoque:', id, ajusteData);

    const response = await fetch(`/api/produtos/${id}/ajustar-estoque`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(ajusteData)
    });

    const result = await response.json();

    if (result.success) {
      mostrarToast('‚úÖ Estoque ajustado com sucesso!', 'success');
      fecharModalAjustarEstoque();
      setTimeout(() => location.reload(), 1000);
    } else {
      throw new Error(result.message || 'Erro ao ajustar estoque');
    }
  } catch (error) {
    console.error('‚ùå Erro ao ajustar estoque:', error);
    mostrarToast('‚ùå Erro ao ajustar estoque: ' + error.message, 'error');
  }
}

// Ver hist√≥rico do estoque
function verHistoricoEstoque(id) {
  const modal = document.createElement('div');
  modal.id = 'modalHistoricoEstoque';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  `;

  modal.innerHTML = `
    <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 700px; max-height: 90vh; overflow-y: auto;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
        <h2 style="margin: 0; color: #333;">üìà Hist√≥rico de Estoque #${id}</h2>
        <button onclick="fecharModalHistoricoEstoque()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
      </div>

      <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
        <h3 style="margin: 0 0 10px; color: #333;">Kit PCR COVID-19</h3>
        <div style="color: #666;">Estoque atual: <strong>150 unidades</strong></div>
      </div>

      <div style="display: grid; gap: 15px;">

        <!-- Entrada 1 -->
        <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: #f0fff4; border-radius: 8px; border-left: 4px solid #16a34a;">
          <div>
            <div style="font-weight: 600; color: #333;">‚ûï Entrada - Compra de mercadoria</div>
            <div style="color: #666; font-size: 14px;">15/12/2024 14:30 por Jo√£o Silva</div>
            <div style="color: #666; font-size: 12px;">Obs: Reposi√ß√£o mensal</div>
          </div>
          <div style="text-align: right;">
            <div style="font-size: 18px; font-weight: bold; color: #16a34a;">+50</div>
            <div style="color: #666; font-size: 12px;">100 ‚Üí 150</div>
          </div>
        </div>

        <!-- Sa√≠da 1 -->
        <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: #fef2f2; border-radius: 8px; border-left: 4px solid #ef4444;">
          <div>
            <div style="font-weight: 600; color: #333;">‚ûñ Sa√≠da - Venda Shopee</div>
            <div style="color: #666; font-size: 14px;">14/12/2024 16:45 por Sistema</div>
            <div style="color: #666; font-size: 12px;">Venda #SH-2024-001234</div>
          </div>
          <div style="text-align: right;">
            <div style="font-size: 18px; font-weight: bold; color: #ef4444;">-5</div>
            <div style="color: #666; font-size: 12px;">105 ‚Üí 100</div>
          </div>
        </div>

        <!-- Entrada 2 -->
        <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: #f0fff4; border-radius: 8px; border-left: 4px solid #16a34a;">
          <div>
            <div style="font-weight: 600; color: #333;">‚ûï Entrada - Devolu√ß√£o de cliente</div>
            <div style="color: #666; font-size: 14px;">13/12/2024 10:20 por Maria Santos</div>
            <div style="color: #666; font-size: 12px;">Produto com defeito</div>
          </div>
          <div style="text-align: right;">
            <div style="font-size: 18px; font-weight: bold; color: #16a34a;">+2</div>
            <div style="color: #666; font-size: 12px;">103 ‚Üí 105</div>
          </div>
        </div>

        <!-- Sa√≠da 2 -->
        <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: #fef2f2; border-radius: 8px; border-left: 4px solid #ef4444;">
          <div>
            <div style="font-weight: 600; color: #333;">‚ûñ Sa√≠da - Venda Mercado Livre</div>
            <div style="color: #666; font-size: 14px;">12/12/2024 09:15 por Sistema</div>
            <div style="color: #666; font-size: 12px;">Venda #ML-2024-005678</div>
          </div>
          <div style="text-align: right;">
            <div style="font-size: 18px; font-weight: bold; color: #ef4444;">-3</div>
            <div style="color: #666; font-size: 12px;">106 ‚Üí 103</div>
          </div>
        </div>

        <!-- Corre√ß√£o -->
        <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: #faf5ff; border-radius: 8px; border-left: 4px solid #8b5cf6;">
          <div>
            <div style="font-weight: 600; color: #333;">üîß Corre√ß√£o - Ajuste de invent√°rio</div>
            <div style="color: #666; font-size: 14px;">10/12/2024 08:00 por Admin</div>
            <div style="color: #666; font-size: 12px;">Invent√°rio mensal</div>
          </div>
          <div style="text-align: right;">
            <div style="font-size: 18px; font-weight: bold; color: #8b5cf6;">+6</div>
            <div style="color: #666; font-size: 12px;">100 ‚Üí 106</div>
          </div>
        </div>

      </div>

      <div style="display: flex; gap: 15px; margin-top: 30px;">
        <button onclick="fecharModalHistoricoEstoque()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; cursor: pointer;">
          Fechar
        </button>
        <button onclick="exportarHistoricoEstoque(${id})" style="flex: 1; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer;">
          üìÑ Exportar Hist√≥rico
        </button>
      </div>
    </div>
  `;

  document.body.appendChild(modal);
}

function fecharModalHistoricoEstoque() {
  const modal = document.getElementById('modalHistoricoEstoque');
  if (modal) modal.remove();
}

async function exportarHistoricoEstoque(id) {
  try {
    console.log('üìä Exportando hist√≥rico do produto:', id);

    const response = await fetch(`/api/produtos/${id}/historico-estoque`);
    const result = await response.json();

    if (result.success) {
      // Criar CSV do hist√≥rico
      const headers = ['Data', 'Tipo', 'Quantidade', 'Estoque Anterior', 'Estoque Novo', 'Motivo', 'Usu√°rio', 'Observa√ß√µes'];
      const csvContent = [
        headers.join(','),
        ...result.data.map(item => [
          new Date(item.data_movimentacao).toLocaleString('pt-BR'),
          item.tipo,
          item.quantidade,
          item.estoque_anterior,
          item.estoque_novo,
          `"${item.motivo || ''}"`,
          `"${item.usuario || 'Sistema'}"`,
          `"${item.observacoes || ''}"`
        ].join(','))
      ].join('\n');

      // Download do arquivo
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `historico_estoque_produto_${id}_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      mostrarToast('‚úÖ Hist√≥rico exportado com sucesso!', 'success');
    } else {
      throw new Error(result.message || 'Erro ao exportar hist√≥rico');
    }
  } catch (error) {
    console.error('‚ùå Erro ao exportar hist√≥rico:', error);
    mostrarToast('‚ùå Erro ao exportar hist√≥rico: ' + error.message, 'error');
  }
}

// Outras fun√ß√µes
async function exportarEstoque() {
  try {
    console.log('üìä Exportando estoque...');

    const response = await fetch('/api/produtos/exportar');
    const result = await response.json();

    if (result.success) {
      // Criar CSV
      const headers = ['ID', 'Nome', 'SKU', 'Estoque Atual', 'Estoque M√≠nimo', 'Pre√ßo', 'Status'];
      const csvContent = [
        headers.join(','),
        ...result.data.map(produto => [
          produto.id_produto,
          `"${produto.nome}"`,
          produto.sku,
          produto.estoque_atual,
          produto.estoque_minimo || 10,
          produto.preco,
          produto.estoque_atual <= 5 ? 'Cr√≠tico' : produto.estoque_atual <= 10 ? 'Baixo' : 'Normal'
        ].join(','))
      ].join('\n');

      // Download do arquivo
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `estoque_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      mostrarToast('‚úÖ Relat√≥rio de estoque exportado com sucesso!', 'success');
    } else {
      throw new Error(result.message || 'Erro ao exportar');
    }
  } catch (error) {
    console.error('‚ùå Erro ao exportar:', error);
    mostrarToast('‚ùå Erro ao exportar estoque: ' + error.message, 'error');
  }
}

async function atualizarEstoque() {
  try {
    mostrarToast('üîÑ Atualizando dados do estoque...', 'info');

    const response = await fetch('/api/produtos/atualizar', {
      method: 'POST'
    });
    const result = await response.json();

    if (result.success) {
      mostrarToast('‚úÖ Estoque atualizado com sucesso!', 'success');
      setTimeout(() => location.reload(), 1000);
    } else {
      throw new Error(result.message || 'Erro ao atualizar');
    }
  } catch (error) {
    console.error('‚ùå Erro ao atualizar:', error);
    mostrarToast('‚ùå Erro ao atualizar estoque: ' + error.message, 'error');
  }
}

function abrirFiltroAvancadoEstoque() {
  alert('üîç Filtros avan√ßados para estoque\n\nModal com filtros por categoria, fornecedor, data, etc.');
}

// ===== FUN√á√ÉO TOAST =====
function mostrarToast(mensagem, tipo = 'info') {
  const toast = document.createElement('div');
  toast.style.cssText = `
    position: fixed;
    top: 100px;
    right: 20px;
    background: ${tipo === 'success' ? '#16a34a' : tipo === 'error' ? '#dc2626' : '#3b82f6'};
    color: white;
    padding: 15px 20px;
    border-radius: 8px;
    font-weight: 600;
    z-index: 10000;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    max-width: 400px;
    word-wrap: break-word;
  `;
  toast.textContent = mensagem;
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 4000);
}

// ===== INICIALIZAR FILTROS UNIFICADOS =====
document.addEventListener('DOMContentLoaded', function() {
  // Configurar op√ß√µes espec√≠ficas para estoque
  inicializarFiltros({
    status: [
      { value: 'todos', label: 'Todos' },
      { value: 'critico', label: 'Cr√≠tico (‚â§5)' },
      { value: 'baixo', label: 'Baixo (6-10)' },
      { value: 'normal', label: 'Normal (>10)' },
      { value: 'sem_estoque', label: 'Sem Estoque' }
    ],
    categorias: [
      { value: 'diagnostico', label: 'Diagn√≥stico' },
      { value: 'teste_rapido', label: 'Teste R√°pido' },
      { value: 'reagente', label: 'Reagente' },
      { value: 'equipamento', label: 'Equipamento' },
      { value: 'consumivel', label: 'Consum√≠vel' }
    ]
  });
});

// Fun√ß√£o para aplicar filtros (chamada pelo componente unificado)
function aplicarFiltros() {
  console.log('üîç Aplicando filtros unificados:', filtrosAplicados);

  let produtosFiltrados = [...produtosOriginais];

  // Aplicar filtro de status (baseado no estoque)
  if (filtrosAplicados.status.length > 0) {
    produtosFiltrados = produtosFiltrados.filter(produto => {
      const estoque = parseInt(produto.estoque_atual || 0);

      return filtrosAplicados.status.some(status => {
        switch(status) {
          case 'todos':
            return true;
          case 'critico':
            return estoque <= 5;
          case 'baixo':
            return estoque > 5 && estoque <= 10;
          case 'normal':
            return estoque > 10;
          case 'sem_estoque':
            return estoque === 0;
          default:
            return true;
        }
      });
    });
  }

  // Aplicar filtro de valor (pre√ßo)
  if (filtrosAplicados.valor.min !== null || filtrosAplicados.valor.max !== null) {
    produtosFiltrados = produtosFiltrados.filter(produto => {
      const preco = parseFloat(produto.preco || 0);
      const min = filtrosAplicados.valor.min;
      const max = filtrosAplicados.valor.max;

      if (min !== null && preco < min) return false;
      if (max !== null && preco > max) return false;
      return true;
    });
  }

  // Aplicar filtro de categoria
  if (filtrosAplicados.categoria.length > 0) {
    produtosFiltrados = produtosFiltrados.filter(produto => {
      const categoria = (produto.categoria || '').toLowerCase();
      return filtrosAplicados.categoria.some(cat => categoria.includes(cat));
    });
  }

  console.log(`üì¶ Produtos filtrados: ${produtosFiltrados.length} de ${produtosOriginais.length}`);

  // Atualizar a exibi√ß√£o
  atualizarTabelaEstoque(produtosFiltrados);
}

console.log('üì¶ P√°gina de estoque carregada com filtros unificados');
  </script>
</body>
</html>
