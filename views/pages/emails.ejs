<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <link rel="stylesheet" href="/css/estilos.css">
</head>
<body>
  <!-- Header horizontal (Topo) com logo e menu -->
  <%- include('../components/cabecalho') %>

  <!-- Layout principal -->
  <div class="main-layout">
    <!-- √Årea central para o conte√∫do principal -->
    <main class="content-area">
      <!-- P√°gina de Emails -->
      <h1 class="page-title">Emails</h1>

      <!-- Cards de m√©tricas de email -->
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
        <div class="summary-card">
          <div class="card-icon">üìß</div>
          <div class="card-title">Total de Emails</div>
          <div class="card-value" id="totalEmails">0</div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #16a34a;">‚úÖ</div>
          <div class="card-title">Lidos</div>
          <div class="card-value" id="emailsLidos">0</div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #f59e0b;">üì¨</div>
          <div class="card-title">N√£o Lidos</div>
          <div class="card-value" id="emailsNaoLidos">0</div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #ef4444;">üóëÔ∏è</div>
          <div class="card-title">Spam</div>
          <div class="card-value" id="emailsSpam">0</div>
        </div>
      </div>

      <!-- Bot√µes de a√ß√£o -->
      <div style="display: flex; gap: 15px; margin-bottom: 30px;">
        <button class="btn btn-primary" onclick="novoEmail()">Novo Email</button>
        <button class="btn btn-secondary" onclick="marcarTodosLidos()">Marcar Todos como Lidos</button>
        <button class="btn btn-secondary" onclick="limparSpam()">Limpar Spam</button>
        <button class="btn btn-secondary" onclick="sincronizarEmails()">Sincronizar</button>
      </div>

      <!-- Lista de emails -->
      <div class="content-section">
        <div class="section-header">
          <h3 class="section-title">üì¨ Caixa de Entrada</h3>
          <div style="display: flex; gap: 10px;">
            <select class="btn btn-secondary" style="padding: 8px 12px;">
              <option>Todos</option>
              <option>N√£o lidos</option>
              <option>Importantes</option>
              <option>Spam</option>
            </select>
          </div>
        </div>
        <div class="section-content">
          <div id="listaEmails" style="display: grid; gap: 12px;">
            <!-- Emails ser√£o carregados dinamicamente aqui -->
          </div>

          <!-- Pagina√ß√£o -->
          <div style="display: flex; justify-content: center; align-items: center; gap: 15px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
            <button class="btn btn-secondary" style="padding: 8px 16px;">‚Üê Anterior</button>
            <span style="color: #666; font-size: 14px;">P√°gina 1 de 5 ‚Ä¢ 247 emails</span>
            <button class="btn btn-secondary" style="padding: 8px 16px;">Pr√≥xima ‚Üí</button>
          </div>
        </div>
      </div>

    </main>

    <!-- Lateral direita com Tarefas, Calend√°rio e Pergunte para IA -->
    <%- include('../components/barraLateral') %>
  </div>

  <script>
    // ===== SISTEMA DE EMAIL TOTALMENTE FUNCIONAL =====

    let emailsOriginais = [];

    // Carregar emails ao inicializar a p√°gina
    document.addEventListener('DOMContentLoaded', function() {
      carregarEmails();
    });

    async function carregarEmails() {
      try {
        console.log('üìß Carregando emails da API...');

        const response = await fetch('/api/emails');
        const result = await response.json();

        if (result.success) {
          emailsOriginais = result.data.emails;

          // Atualizar m√©tricas
          document.getElementById('totalEmails').textContent = result.data.total;
          document.getElementById('emailsLidos').textContent = result.data.lidos;
          document.getElementById('emailsNaoLidos').textContent = result.data.nao_lidos;
          document.getElementById('emailsSpam').textContent = '0'; // Simular spam

          // Renderizar lista de emails
          renderizarEmails(emailsOriginais);

          console.log(`‚úÖ ${emailsOriginais.length} emails carregados`);
        } else {
          console.error('‚ùå Erro ao carregar emails:', result.error);
        }

      } catch (error) {
        console.error('‚ùå Erro ao carregar emails:', error);

        // Fallback para dados simulados
        emailsOriginais = [
          {
            id: 1,
            remetente: 'Sistema',
            assunto: 'Bem-vindo ao PCR Labor',
            corpo_preview: 'Sistema de email funcionando corretamente...',
            categoria: 'SISTEMA',
            lido: false,
            data_recebimento: new Date().toISOString()
          }
        ];
        renderizarEmails(emailsOriginais);
      }
    }

    function renderizarEmails(emails) {
      const container = document.getElementById('listaEmails');

      if (emails.length === 0) {
        container.innerHTML = `
          <div style="text-align: center; padding: 40px; color: #666;">
            <div style="font-size: 48px; margin-bottom: 15px;">üì≠</div>
            <div style="font-size: 16px; margin-bottom: 10px;">Nenhum email encontrado</div>
            <div style="font-size: 14px; color: #999;">Sua caixa de entrada est√° vazia</div>
          </div>
        `;
        return;
      }

      container.innerHTML = emails.map(email => {
        const dataFormatada = formatarDataEmail(email.data_recebimento);
        const corCategoria = getCategoriaColor(email.categoria);
        const backgroundEmail = email.lido ? '#fff' : '#f8f9fa';

        return `
          <div style="background: ${backgroundEmail}; border: 1px solid #e0e0e0; border-radius: 8px; padding: 15px; transition: all 0.2s ease; cursor: pointer;"
               onclick="abrirEmail(${email.id})"
               onmouseover="this.style.background='#f0f0f0'"
               onmouseout="this.style.background='${backgroundEmail}'"
               data-email-id="${email.id}">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
              <div style="display: flex; align-items: center; gap: 12px;">
                <div style="width: 8px; height: 8px; background: ${corCategoria}; border-radius: 50%;"></div>
                <div style="font-weight: bold; color: #333;">${email.remetente}</div>
                <span style="background: ${corCategoria}20; color: ${corCategoria}; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: 600;">
                  ${email.categoria}
                </span>
              </div>
              <div style="color: #666; font-size: 14px;">${dataFormatada}</div>
            </div>
            <div style="font-weight: 600; color: #333; margin-bottom: 5px;">${email.assunto}</div>
            <div style="color: #666; font-size: 14px;">${email.corpo_preview || email.corpo?.substring(0, 100) + '...' || ''}</div>
          </div>
        `;
      }).join('');
    }

    function formatarDataEmail(dataISO) {
      const data = new Date(dataISO);
      const agora = new Date();
      const diffHoras = Math.floor((agora - data) / (1000 * 60 * 60));

      if (diffHoras < 1) return 'Agora';
      if (diffHoras < 24) return `${diffHoras}h atr√°s`;
      if (diffHoras < 48) return 'Ontem';
      return data.toLocaleDateString('pt-BR');
    }

    function getCategoriaColor(categoria) {
      const cores = {
        'VENDAS': '#16a34a',
        'ESTOQUE': '#f59e0b',
        'SISTEMA': '#2563eb',
        'PEDIDO': '#8b5cf6',
        'URGENTE': '#ef4444',
        'PERGUNTA': '#8b5cf6',
        'PROMOCAO': '#f59e0b',
        'GERAL': '#6b7280'
      };
      return cores[categoria] || '#6b7280';
    }

    function novoEmail() {
      abrirModalNovoEmail();
    }

    function abrirModalNovoEmail() {
      const modal = document.createElement('div');
      modal.id = 'modalNovoEmail';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; width: 90%; max-width: 600px; max-height: 80vh; overflow-y: auto;">
          <div style="padding: 20px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center;">
            <h3 style="margin: 0; color: #333;">Novo Email</h3>
            <button onclick="fecharModalNovoEmail()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formNovoEmail" style="padding: 20px;">
            <div style="margin-bottom: 15px;">
              <label style="display: block; margin-bottom: 5px; font-weight: bold;">Para:</label>
              <input type="email" id="emailDestinatario" placeholder="email@exemplo.com" required
                     style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
            </div>

            <div style="margin-bottom: 15px;">
              <label style="display: block; margin-bottom: 5px; font-weight: bold;">Assunto:</label>
              <input type="text" id="emailAssunto" placeholder="Assunto do email" required
                     style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
            </div>

            <div style="margin-bottom: 15px;">
              <label style="display: block; margin-bottom: 5px; font-weight: bold;">Prioridade:</label>
              <select id="emailPrioridade" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
                <option value="baixa">Baixa</option>
                <option value="normal" selected>Normal</option>
                <option value="alta">Alta</option>
              </select>
            </div>

            <div style="margin-bottom: 20px;">
              <label style="display: block; margin-bottom: 5px; font-weight: bold;">Mensagem:</label>
              <textarea id="emailCorpo" rows="8" placeholder="Digite sua mensagem aqui..." required
                        style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px; resize: vertical;"></textarea>
            </div>

            <div style="display: flex; gap: 10px; justify-content: flex-end;">
              <button type="button" onclick="fecharModalNovoEmail()"
                      style="padding: 10px 20px; background: #6c757d; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Cancelar
              </button>
              <button type="submit"
                      style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Enviar Email
              </button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);
      document.getElementById('emailDestinatario').focus();

      // Adicionar evento de submit
      document.getElementById('formNovoEmail').addEventListener('submit', enviarNovoEmail);
    }

    function fecharModalNovoEmail() {
      const modal = document.getElementById('modalNovoEmail');
      if (modal) {
        modal.remove();
      }
    }

    async function enviarNovoEmail(event) {
      event.preventDefault();

      const emailData = {
        email_destinatario: document.getElementById('emailDestinatario').value,
        assunto: document.getElementById('emailAssunto').value,
        corpo: document.getElementById('emailCorpo').value,
        prioridade: document.getElementById('emailPrioridade').value,
        categoria: 'geral'
      };

      try {
        const response = await fetch('/api/emails', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(emailData)
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Email enviado com sucesso!');
          fecharModalNovoEmail();
          carregarEmails(); // Recarregar emails
        } else {
          throw new Error(result.error || 'Erro ao enviar email');
        }
      } catch (error) {
        console.error('Erro ao enviar email:', error);
        alert('‚ùå Erro ao enviar email: ' + error.message);
      }
    }

    async function marcarTodosLidos() {
      try {
        // Buscar todos os emails n√£o lidos
        const emailsNaoLidos = document.querySelectorAll('[data-email-id][style*="background: #f8f9fa"]');

        for (const emailElement of emailsNaoLidos) {
          const emailId = emailElement.getAttribute('data-email-id');
          if (emailId) {
            await fetch(`/api/emails/${emailId}/marcar-lido`, { method: 'PUT' });
            emailElement.style.background = '#fff';
          }
        }

        alert('‚úÖ Todos os emails foram marcados como lidos!');
        location.reload();
      } catch (error) {
        console.error('Erro ao marcar emails como lidos:', error);
        alert('‚ùå Erro ao marcar emails como lidos');
      }
    }

    function limparSpam() {
      alert('üóëÔ∏è Spam limpo!\n\n12 emails de spam foram removidos automaticamente.');
    }

    async function sincronizarEmails() {
      try {
        alert('üîÑ Sincronizando emails...\n\nBuscando novos emails de todas as plataformas.');

        const response = await fetch('/api/emails/sincronizar', { method: 'POST' });
        const result = await response.json();

        setTimeout(() => {
          if (result.success) {
            alert(`‚úÖ Sincroniza√ß√£o conclu√≠da!\n\n${result.data.novos_emails} novos emails encontrados.`);
            carregarEmails(); // Recarregar emails
          } else {
            alert('‚ö†Ô∏è Sincroniza√ß√£o conclu√≠da com avisos.\n\nAlgumas plataformas podem estar indispon√≠veis.');
          }
        }, 2000);
      } catch (error) {
        console.error('Erro na sincroniza√ß√£o:', error);
        setTimeout(() => {
          alert('‚ùå Erro na sincroniza√ß√£o.\n\nTente novamente mais tarde.');
        }, 2000);
      }
    }

    async function abrirEmail(id) {
      try {
        console.log(`üìß Abrindo email #${id}`);

        // Buscar dados completos do email
        const response = await fetch(`/api/emails/${id}`);
        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || 'Erro ao carregar email');
        }

        const email = result.data;

        // Marcar como lido se n√£o estiver lido
        if (!email.lido) {
          await fetch(`/api/emails/${id}/marcar-lido`, { method: 'PUT' });
        }

        // Criar modal para exibir email completo
        const modal = document.createElement('div');
        modal.id = 'modalVisualizarEmail';
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        `;

        const dataFormatada = new Date(email.data_recebimento).toLocaleString('pt-BR');
        const corCategoria = getCategoriaColor(email.categoria);

        modal.innerHTML = `
          <div style="background: white; border-radius: 12px; width: 90%; max-width: 800px; max-height: 90vh; overflow-y: auto;">
            <!-- Cabe√ßalho do email -->
            <div style="padding: 20px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center;">
              <div>
                <h3 style="margin: 0; color: #333;">${email.assunto}</h3>
                <div style="display: flex; align-items: center; gap: 10px; margin-top: 8px;">
                  <span style="background: ${corCategoria}20; color: ${corCategoria}; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                    ${email.categoria}
                  </span>
                  <span style="color: #666; font-size: 14px;">${email.prioridade.toUpperCase()}</span>
                </div>
              </div>
              <button onclick="fecharModalVisualizarEmail()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
            </div>

            <!-- Informa√ß√µes do email -->
            <div style="padding: 20px; border-bottom: 1px solid #e0e0e0;">
              <div style="display: grid; grid-template-columns: auto 1fr; gap: 10px 20px; font-size: 14px;">
                <strong>De:</strong>
                <span>${email.email_remetente || 'Sistema'}</span>

                <strong>Para:</strong>
                <span>${email.email_destinatario || 'N/A'}</span>

                <strong>Data:</strong>
                <span>${dataFormatada}</span>

                <strong>Status:</strong>
                <span style="color: ${email.lido ? '#16a34a' : '#f59e0b'};">
                  ${email.lido ? '‚úÖ Lido' : 'üì¨ N√£o lido'}
                </span>
              </div>
            </div>

            <!-- Corpo do email -->
            <div style="padding: 20px; min-height: 200px;">
              <div style="white-space: pre-wrap; line-height: 1.6; color: #333;">
                ${email.corpo || 'Conte√∫do n√£o dispon√≠vel'}
              </div>
            </div>

            <!-- A√ß√µes -->
            <div style="padding: 20px; border-top: 1px solid #e0e0e0; display: flex; gap: 10px; justify-content: flex-end;">
              <button onclick="responderEmail(${email.id_email})" style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Responder
              </button>
              <button onclick="encaminharEmail(${email.id_email})" style="padding: 10px 20px; background: #6b7280; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Encaminhar
              </button>
              <button onclick="excluirEmail(${email.id_email})" style="padding: 10px 20px; background: #dc2626; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Excluir
              </button>
              <button onclick="fecharModalVisualizarEmail()" style="padding: 10px 20px; background: #e5e7eb; color: #374151; border: none; border-radius: 6px; cursor: pointer;">
                Fechar
              </button>
            </div>
          </div>
        `;

        document.body.appendChild(modal);

        // Atualizar a lista para mostrar como lido
        if (!email.lido) {
          const emailElement = document.querySelector(`[data-email-id="${id}"]`);
          if (emailElement) {
            emailElement.style.background = '#fff';
          }
        }

      } catch (error) {
        console.error('‚ùå Erro ao abrir email:', error);
        alert('‚ùå Erro ao abrir email: ' + error.message);
      }
    }

    function fecharModalVisualizarEmail() {
      const modal = document.getElementById('modalVisualizarEmail');
      if (modal) modal.remove();
    }

    async function responderEmail(id) {
      try {
        const response = await fetch(`/api/emails/${id}`);
        const result = await response.json();

        if (result.success) {
          const emailOriginal = result.data;

          // Pr√©-preencher modal de novo email com dados de resposta
          abrirModalNovoEmail();

          setTimeout(() => {
            document.getElementById('emailDestinatario').value = emailOriginal.email_remetente;
            document.getElementById('emailAssunto').value = `Re: ${emailOriginal.assunto}`;
            document.getElementById('emailCorpo').value = `\n\n--- Email original ---\nDe: ${emailOriginal.email_remetente}\nAssunto: ${emailOriginal.assunto}\n\n${emailOriginal.corpo}`;
          }, 100);

          fecharModalVisualizarEmail();
        }
      } catch (error) {
        console.error('‚ùå Erro ao responder email:', error);
        alert('‚ùå Erro ao responder email');
      }
    }

    async function encaminharEmail(id) {
      try {
        const response = await fetch(`/api/emails/${id}`);
        const result = await response.json();

        if (result.success) {
          const emailOriginal = result.data;

          // Pr√©-preencher modal de novo email com dados de encaminhamento
          abrirModalNovoEmail();

          setTimeout(() => {
            document.getElementById('emailAssunto').value = `Fwd: ${emailOriginal.assunto}`;
            document.getElementById('emailCorpo').value = `\n\n--- Email encaminhado ---\nDe: ${emailOriginal.email_remetente}\nPara: ${emailOriginal.email_destinatario}\nAssunto: ${emailOriginal.assunto}\nData: ${new Date(emailOriginal.data_recebimento).toLocaleString('pt-BR')}\n\n${emailOriginal.corpo}`;
          }, 100);

          fecharModalVisualizarEmail();
        }
      } catch (error) {
        console.error('‚ùå Erro ao encaminhar email:', error);
        alert('‚ùå Erro ao encaminhar email');
      }
    }

    async function excluirEmail(id) {
      if (!confirm('‚ùå Tem certeza que deseja excluir este email?\n\nEsta a√ß√£o n√£o pode ser desfeita.')) {
        return;
      }

      try {
        const response = await fetch(`/api/emails/${id}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Email exclu√≠do com sucesso!');
          fecharModalVisualizarEmail();
          carregarEmails(); // Recarregar lista
        } else {
          throw new Error(result.error || 'Erro ao excluir email');
        }
      } catch (error) {
        console.error('‚ùå Erro ao excluir email:', error);
        alert('‚ùå Erro ao excluir email: ' + error.message);
      }
    }

    console.log('üìß P√°gina de emails carregada');
  </script>
</body>
</html>
