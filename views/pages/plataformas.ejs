<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <title><%= pageTitle %></title>
  <link rel="stylesheet" href="/css/estilos.css?v=<%= Date.now() %>">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <!-- Header horizontal (Topo) com logo e menu -->
  <%- include('../components/cabecalho') %>

  <!-- Layout principal -->
  <div class="main-layout">
    <!-- Área central para o conteúdo principal -->
    <main class="content-area">
      <h1 class="page-title">Plataformas</h1>

      <!-- Cards de métricas das plataformas - DADOS REAIS -->
      <%
        const totalGeral = vendasPorPlataforma.reduce((total, p) => total + parseFloat(p.valor_total || 0), 0);
        const plataformasAtivas = vendasPorPlataforma.filter(p => parseFloat(p.valor_total || 0) > 0).length;
        const totalVendas = vendasPorPlataforma.reduce((total, p) => total + parseInt(p.total_vendas || 0), 0);
      %>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
        <div class="summary-card">
          <div class="card-icon">💰</div>
          <div class="card-title">Total Geral</div>
          <div class="card-value">R$ <%= totalGeral.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".") %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #3b82f6;">🌐</div>
          <div class="card-title">Plataformas Ativas</div>
          <div class="card-value"><%= plataformasAtivas %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #16a34a;">📊</div>
          <div class="card-title">Total de Vendas</div>
          <div class="card-value"><%= totalVendas %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #f59e0b;">📈</div>
          <div class="card-title">Ticket Médio</div>
          <div class="card-value">R$ <%= totalGeral > 0 && totalVendas > 0 ? (totalGeral / totalVendas).toFixed(0) : '0' %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #16a34a;">🎯</div>
          <div class="card-title">Produtos Vendidos</div>
          <div class="card-value"><%= vendasPorPlataforma.reduce((total, p) => total + parseInt(p.quantidade_total || 0), 0) %></div>
        </div>
      </div>

      <!-- Ações com caixa de fundo -->
      <div style="
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
      ">
        <div style="
          display: flex;
          justify-content: center;
          align-items: center;
          flex-wrap: wrap;
          gap: 15px;
        ">
          <button class="btn btn-primary" onclick="sincronizarTodasPlataformas()">Sincronizar Todas</button>
          <button class="btn btn-secondary" onclick="exportarRelatorio()">Exportar Relatório</button>
          <button class="btn btn-secondary" onclick="gerenciarPlataformas()">Gerenciar Plataformas</button>
          <button class="btn btn-secondary" onclick="analisarPerformance()">Análise Detalhada</button>
        </div>
      </div>

      <!-- Seção individual de cada plataforma -->
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 30px; margin-bottom: 40px;">

        <!-- SHOPEE - DADOS REAIS -->
        <%
          const shopeeData = vendasPorPlataforma.find(p => p.nome.toLowerCase().includes('shopee')) || { valor_total: 0, total_vendas: 0, quantidade_total: 0 };
          const shopeeTicket = shopeeData.total_vendas > 0 ? (shopeeData.valor_total / shopeeData.total_vendas) : 0;
        %>
        <div class="content-section">
          <div class="section-header">
            <h3 class="section-title" style="color: #ff6600;">🛍️ Shopee</h3>
            <button class="btn btn-secondary" onclick="sincronizarShopee()">Sync</button>
          </div>
          <div class="section-content">
            <div style="display: grid; gap: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: #fff5f0; border-left: 4px solid #ff6600; border-radius: 8px;">
                <div>
                  <div style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Vendas do Mês</div>
                  <div style="font-size: 24px; font-weight: bold; color: #ff6600;">R$ <%= parseFloat(shopeeData.valor_total || 0).toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".") %></div>
                </div>
                <div style="text-align: right;">
                  <div style="font-size: 12px; color: #666;">Status</div>
                  <div style="font-size: 16px; font-weight: bold; color: <%= shopeeData.total_vendas > 0 ? '#16a34a' : '#ef4444' %>;">
                    <%= shopeeData.total_vendas > 0 ? 'Ativo' : 'Inativo' %>
                  </div>
                </div>
              </div>

              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                <div style="text-align: center; padding: 12px; background: #f8f9fa; border-radius: 8px;">
                  <div style="font-size: 18px; font-weight: bold; color: #333;"><%= shopeeData.total_vendas || 0 %></div>
                  <div style="font-size: 12px; color: #666;">Vendas</div>
                </div>
                <div style="text-align: center; padding: 12px; background: #f8f9fa; border-radius: 8px;">
                  <div style="font-size: 18px; font-weight: bold; color: #333;">R$ <%= shopeeTicket.toFixed(0) %></div>
                  <div style="font-size: 12px; color: #666;">Ticket Médio</div>
                </div>
              </div>

              <div style="height: 120px;">
                <canvas id="shopeeChart"></canvas>
              </div>
            </div>
          </div>
        </div>

        <!-- MERCADO LIVRE - DADOS REAIS -->
        <%
          const mercadoLivreData = vendasPorPlataforma.find(p => p.nome.toLowerCase().includes('mercado')) || { valor_total: 0, total_vendas: 0, quantidade_total: 0 };
          const mercadoLivreTicket = mercadoLivreData.total_vendas > 0 ? (mercadoLivreData.valor_total / mercadoLivreData.total_vendas) : 0;
        %>
        <div class="content-section">
          <div class="section-header">
            <h3 class="section-title" style="color: #3483fa;">🛒 Mercado Livre</h3>
            <button class="btn btn-secondary" onclick="sincronizarMercadoLivre()">Sync</button>
          </div>
          <div class="section-content">
            <div style="display: grid; gap: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: #f0f8ff; border-left: 4px solid #3483fa; border-radius: 8px;">
                <div>
                  <div style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Vendas do Mês</div>
                  <div style="font-size: 24px; font-weight: bold; color: #3483fa;">R$ <%= parseFloat(mercadoLivreData.valor_total || 0).toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".") %></div>
                </div>
                <div style="text-align: right;">
                  <div style="font-size: 12px; color: #666;">Status</div>
                  <div style="font-size: 16px; font-weight: bold; color: <%= mercadoLivreData.total_vendas > 0 ? '#16a34a' : '#ef4444' %>;">
                    <%= mercadoLivreData.total_vendas > 0 ? 'Ativo' : 'Inativo' %>
                  </div>
                </div>
              </div>

              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                <div style="text-align: center; padding: 12px; background: #f8f9fa; border-radius: 8px;">
                  <div style="font-size: 18px; font-weight: bold; color: #333;"><%= mercadoLivreData.total_vendas || 0 %></div>
                  <div style="font-size: 12px; color: #666;">Vendas</div>
                </div>
                <div style="text-align: center; padding: 12px; background: #f8f9fa; border-radius: 8px;">
                  <div style="font-size: 18px; font-weight: bold; color: #333;">R$ <%= mercadoLivreTicket.toFixed(0) %></div>
                  <div style="font-size: 12px; color: #666;">Ticket Médio</div>
                </div>
              </div>

              <div style="height: 120px;">
                <canvas id="mercadoLivreChart"></canvas>
              </div>
            </div>
          </div>
        </div>

        <!-- PCR LABOR - DADOS REAIS -->
        <%
          const pcrLaborData = vendasPorPlataforma.find(p => p.nome.toLowerCase().includes('pcr') || p.nome.toLowerCase().includes('site') || p.nome.toLowerCase().includes('próprio')) || { valor_total: 0, total_vendas: 0, quantidade_total: 0 };
          const pcrLaborTicket = pcrLaborData.total_vendas > 0 ? (pcrLaborData.valor_total / pcrLaborData.total_vendas) : 0;
        %>
        <div class="content-section">
          <div class="section-header">
            <h3 class="section-title" style="color: #018820;">🌐 PCR Labor</h3>
            <button class="btn btn-secondary" onclick="sincronizarPCRLabor()">Sync</button>
          </div>
          <div class="section-content">
            <div style="display: grid; gap: 15px;">
              <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: #f0fff4; border-left: 4px solid #018820; border-radius: 8px;">
                <div>
                  <div style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Vendas do Mês</div>
                  <div style="font-size: 24px; font-weight: bold; color: #018820;">R$ <%= parseFloat(pcrLaborData.valor_total || 0).toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".") %></div>
                </div>
                <div style="text-align: right;">
                  <div style="font-size: 12px; color: #666;">Status</div>
                  <div style="font-size: 16px; font-weight: bold; color: <%= pcrLaborData.total_vendas > 0 ? '#16a34a' : '#ef4444' %>;">
                    <%= pcrLaborData.total_vendas > 0 ? 'Ativo' : 'Inativo' %>
                  </div>
                </div>
              </div>

              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                <div style="text-align: center; padding: 12px; background: #f8f9fa; border-radius: 8px;">
                  <div style="font-size: 18px; font-weight: bold; color: #333;"><%= pcrLaborData.total_vendas || 0 %></div>
                  <div style="font-size: 12px; color: #666;">Vendas</div>
                </div>
                <div style="text-align: center; padding: 12px; background: #f8f9fa; border-radius: 8px;">
                  <div style="font-size: 18px; font-weight: bold; color: #333;">R$ <%= pcrLaborTicket.toFixed(0) %></div>
                  <div style="font-size: 12px; color: #666;">Ticket Médio</div>
                </div>
              </div>

              <div style="height: 120px;">
                <canvas id="pcrLaborChart"></canvas>
              </div>
            </div>
          </div>
        </div>

      </div>

      <!-- Bloco consolidado: Vendas totais + Estimativa de compras -->
      <div class="content-section">
        <div class="section-header">
          <h3 class="section-title">📊 Consolidado Geral + Estimativa de Compras</h3>
          <button class="btn btn-primary" onclick="calcularEstimativas()">Recalcular</button>
        </div>
        <div class="section-content">
          <!-- Resumo consolidado das vendas - DADOS REAIS -->
          <%
            const totalConsolidado = vendasPorPlataforma.reduce((total, p) => total + parseFloat(p.valor_total || 0), 0);
            const totalVendasConsolidado = vendasPorPlataforma.reduce((total, p) => total + parseInt(p.total_vendas || 0), 0);
            const totalQuantidadeConsolidado = vendasPorPlataforma.reduce((total, p) => total + parseInt(p.quantidade_total || 0), 0);
            const ticketMedioConsolidado = totalVendasConsolidado > 0 ? (totalConsolidado / totalVendasConsolidado) : 0;
          %>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
            <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #018820, #02a025); color: white; border-radius: 12px;">
              <div style="font-size: 12px; opacity: 0.9; text-transform: uppercase; font-weight: 600;">Total Consolidado</div>
              <div style="font-size: 32px; font-weight: bold; margin: 10px 0;">R$ <%= totalConsolidado.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".") %></div>
              <div style="font-size: 14px; opacity: 0.9;">Todas as plataformas</div>
            </div>

            <div style="text-align: center; padding: 20px; background: #f8f9fa; border: 2px solid #e0e0e0; border-radius: 12px;">
              <div style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Total de Vendas</div>
              <div style="font-size: 32px; font-weight: bold; color: #333; margin: 10px 0;"><%= totalVendasConsolidado %></div>
              <div style="font-size: 14px; color: #666;">Vendas realizadas</div>
            </div>

            <div style="text-align: center; padding: 20px; background: #f8f9fa; border: 2px solid #e0e0e0; border-radius: 12px;">
              <div style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Ticket Médio Geral</div>
              <div style="font-size: 32px; font-weight: bold; color: #333; margin: 10px 0;">R$ <%= ticketMedioConsolidado.toFixed(0) %></div>
              <div style="font-size: 14px; color: #666;">Por venda</div>
            </div>

            <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; border-radius: 12px;">
              <div style="font-size: 12px; opacity: 0.9; text-transform: uppercase; font-weight: 600;">Produtos Vendidos</div>
              <div style="font-size: 32px; font-weight: bold; margin: 10px 0;"><%= totalQuantidadeConsolidado %></div>
              <div style="font-size: 14px; opacity: 0.9;">Unidades</div>
            </div>
          </div>

          <!-- Estimativa de compras necessárias -->
          <div style="background: #fff8e1; border: 2px solid #f59e0b; border-radius: 12px; padding: 25px; margin-bottom: 20px;">
            <h4 style="margin: 0 0 20px; color: #f59e0b; font-size: 18px; display: flex; align-items: center; gap: 10px;">
              🛒 Estimativa de Compras Necessárias
            </h4>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
              <div style="background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #f59e0b;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                  <div>
                    <div style="font-size: 14px; color: #666; font-weight: 600;">Kit PCR COVID-19</div>
                    <div style="font-size: 12px; color: #999;">Estoque atual: 0 unidades</div>
                  </div>
                  <div style="text-align: right;">
                    <div style="font-size: 20px; font-weight: bold; color: #f59e0b;">150</div>
                    <div style="font-size: 12px; color: #666;">unidades</div>
                  </div>
                </div>
                <div style="font-size: 12px; color: #666;">
                  💰 Investimento: <strong>R$ 7.500</strong> • 📈 Demanda alta
                </div>
              </div>

              <div style="background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #3b82f6;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                  <div>
                    <div style="font-size: 14px; color: #666; font-weight: 600;">Kit PCR Influenza</div>
                    <div style="font-size: 12px; color: #999;">Estoque atual: 2 unidades</div>
                  </div>
                  <div style="text-align: right;">
                    <div style="font-size: 20px; font-weight: bold; color: #3b82f6;">100</div>
                    <div style="font-size: 12px; color: #666;">unidades</div>
                  </div>
                </div>
                <div style="font-size: 12px; color: #666;">
                  💰 Investimento: <strong>R$ 4.800</strong> • 📊 Demanda média
                </div>
              </div>

              <div style="background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #16a34a;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                  <div>
                    <div style="font-size: 14px; color: #666; font-weight: 600;">Kit PCR Hepatite B</div>
                    <div style="font-size: 12px; color: #999;">Estoque atual: 0 unidades</div>
                  </div>
                  <div style="text-align: right;">
                    <div style="font-size: 20px; font-weight: bold; color: #16a34a;">80</div>
                    <div style="font-size: 12px; color: #666;">unidades</div>
                  </div>
                </div>
                <div style="font-size: 12px; color: #666;">
                  💰 Investimento: <strong>R$ 4.400</strong> • 📉 Demanda baixa
                </div>
              </div>
            </div>

            <!-- Resumo do investimento total -->
            <div style="background: #f59e0b; color: white; padding: 20px; border-radius: 8px; margin-top: 20px; text-align: center;">
              <div style="font-size: 14px; opacity: 0.9; margin-bottom: 5px;">💰 INVESTIMENTO TOTAL ESTIMADO</div>
              <div style="font-size: 28px; font-weight: bold;">R$ 16.700</div>
              <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">Para 330 unidades • Cobertura para 2-3 meses</div>
            </div>
          </div>

          <!-- Gráfico de performance comparativa -->
          <div style="height: 300px; margin-top: 20px;">
            <canvas id="performanceChart"></canvas>
          </div>
        </div>
      </div>

    </main>

    <!-- Lateral direita com Tarefas, Calendário e Pergunte para IA -->
    <%- include('../components/barraLateral') %>
  </div>

  <script>
    // ===== DADOS REAIS DAS PLATAFORMAS =====
    const plataformasData = <%- JSON.stringify(vendasPorPlataforma) %>;
    console.log('🌐 Dados reais das plataformas:', plataformasData);

    // Encontrar dados específicos de cada plataforma
    const shopeeData = plataformasData.find(p => p.nome.toLowerCase().includes('shopee')) || { valor_total: 0, total_vendas: 0 };
    const mercadoLivreData = plataformasData.find(p => p.nome.toLowerCase().includes('mercado')) || { valor_total: 0, total_vendas: 0 };
    const pcrLaborData = plataformasData.find(p => p.nome.toLowerCase().includes('pcr') || p.nome.toLowerCase().includes('site')) || { valor_total: 0, total_vendas: 0 };

    /**
     * Gráfico 1: Performance Shopee - DADOS REAIS
     */
    const shopeeCtx = document.getElementById('shopeeChart').getContext('2d');
    new Chart(shopeeCtx, {
      type: 'line',
      data: {
        labels: ['Atual', 'Meta', 'Projeção'],
        datasets: [{
          data: [parseFloat(shopeeData.valor_total || 0), parseFloat(shopeeData.valor_total || 0) * 1.2, parseFloat(shopeeData.valor_total || 0) * 1.5],
          borderColor: '#ff6600',
          backgroundColor: 'rgba(255, 102, 0, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: { legend: { display: false } },
        scales: {
          y: { beginAtZero: true, display: false },
          x: { display: false }
        }
      }
    });

    // GRÁFICO 2: Mercado Livre - DADOS REAIS
    const mercadoLivreCtx = document.getElementById('mercadoLivreChart').getContext('2d');
    new Chart(mercadoLivreCtx, {
      type: 'bar',
      data: {
        labels: ['Vendas', 'Meta'],
        datasets: [{
          data: [parseInt(mercadoLivreData.total_vendas || 0), parseInt(mercadoLivreData.total_vendas || 0) * 1.3],
          backgroundColor: '#3483fa',
          borderRadius: 4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: { legend: { display: false } },
        scales: {
          y: { beginAtZero: true, display: false },
          x: { display: false }
        }
      }
    });

    // GRÁFICO 3: PCR Labor (área)
    const pcrLaborCtx = document.getElementById('pcrLaborChart').getContext('2d');
    new Chart(pcrLaborCtx, {
      type: 'line',
      data: {
        labels: ['Sem 1', 'Sem 2', 'Sem 3', 'Sem 4'],
        datasets: [{
          data: [2800, 3200, 3400, 3400],
          borderColor: '#018820',
          backgroundColor: 'rgba(1, 136, 32, 0.2)',
          borderWidth: 2,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: { legend: { display: false } },
        scales: {
          y: { beginAtZero: true, display: false },
          x: { display: false }
        }
      }
    });

    // GRÁFICO 4: Performance comparativa (barras agrupadas)
    const performanceCtx = document.getElementById('performanceChart').getContext('2d');
    new Chart(performanceCtx, {
      type: 'bar',
      data: {
        labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio'],
        datasets: [
          {
            label: 'Shopee',
            data: [15000, 16500, 17200, 18000, 18500],
            backgroundColor: '#ff6600',
            borderRadius: 4
          },
          {
            label: 'Mercado Livre',
            data: [18000, 19500, 20800, 21500, 22300],
            backgroundColor: '#3483fa',
            borderRadius: 4
          },
          {
            label: 'PCR Labor',
            data: [8000, 9200, 10500, 11800, 12800],
            backgroundColor: '#018820',
            borderRadius: 4
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
            labels: {
              usePointStyle: true,
              padding: 20
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: '#f0f0f0'
            },
            ticks: {
              callback: function(value) {
                return 'R$ ' + value.toLocaleString();
              }
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });

    // FUNÇÕES INTERATIVAS
    async function sincronizarTodasPlataformas() {
      try {
        mostrarToast('🔄 Sincronizando todas as plataformas...', 'info');

        const response = await fetch('/api/plataformas/sincronizar-todas', {
          method: 'POST'
        });
        const result = await response.json();

        if (result.success) {
          mostrarToast(`✅ Sincronização concluída! ${result.message || ''}`, 'success');
          setTimeout(() => location.reload(), 2000);
        } else {
          throw new Error(result.message || 'Erro na sincronização');
        }
      } catch (error) {
        console.error('❌ Erro na sincronização:', error);
        mostrarToast('❌ Erro na sincronização: ' + error.message, 'error');
      }
    }

    async function sincronizarShopee() {
      try {
        mostrarToast('🛍️ Sincronizando Shopee...', 'info');

        const response = await fetch('/api/plataformas/shopee/sincronizar', {
          method: 'POST'
        });
        const result = await response.json();

        if (result.success) {
          mostrarToast(`✅ Shopee sincronizada! ${result.message || ''}`, 'success');
          setTimeout(() => location.reload(), 1500);
        } else {
          throw new Error(result.message || 'Erro na sincronização');
        }
      } catch (error) {
        console.error('❌ Erro na sincronização Shopee:', error);
        mostrarToast('❌ Erro na sincronização Shopee: ' + error.message, 'error');
      }
    }

    async function sincronizarMercadoLivre() {
      try {
        mostrarToast('🛒 Sincronizando Mercado Livre...', 'info');

        const response = await fetch('/api/plataformas/mercado-livre/sincronizar', {
          method: 'POST'
        });
        const result = await response.json();

        if (result.success) {
          mostrarToast(`✅ Mercado Livre sincronizado! ${result.message || ''}`, 'success');
          setTimeout(() => location.reload(), 1500);
        } else {
          throw new Error(result.message || 'Erro na sincronização');
        }
      } catch (error) {
        console.error('❌ Erro na sincronização Mercado Livre:', error);
        mostrarToast('❌ Erro na sincronização Mercado Livre: ' + error.message, 'error');
      }
    }

    async function sincronizarPCRLabor() {
      try {
        mostrarToast('🌐 Sincronizando PCR Labor...', 'info');

        const response = await fetch('/api/plataformas/pcr-labor/sincronizar', {
          method: 'POST'
        });
        const result = await response.json();

        if (result.success) {
          mostrarToast(`✅ PCR Labor sincronizada! ${result.message || ''}`, 'success');
          setTimeout(() => location.reload(), 1500);
        } else {
          throw new Error(result.message || 'Erro na sincronização');
        }
      } catch (error) {
        console.error('❌ Erro na sincronização PCR Labor:', error);
        mostrarToast('❌ Erro na sincronização PCR Labor: ' + error.message, 'error');
      }
    }

    async function exportarRelatorio() {
      try {
        console.log('📊 Exportando relatório de plataformas...');

        const response = await fetch('/api/plataformas/relatorio');
        const result = await response.json();

        if (result.success) {
          // Criar CSV
          const headers = ['Plataforma', 'Total Vendas', 'Valor Total', 'Ticket Médio', 'Produtos Ativos', 'Performance'];
          const csvContent = [
            headers.join(','),
            ...result.data.map(plat => [
              plat.nome,
              plat.total_vendas,
              plat.valor_total,
              plat.ticket_medio,
              plat.produtos_ativos,
              plat.performance
            ].join(','))
          ].join('\n');

          // Download do arquivo
          const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
          const link = document.createElement('a');
          const url = URL.createObjectURL(blob);
          link.setAttribute('href', url);
          link.setAttribute('download', `relatorio_plataformas_${new Date().toISOString().split('T')[0]}.csv`);
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          mostrarToast('✅ Relatório exportado com sucesso!', 'success');
        } else {
          throw new Error(result.message || 'Erro ao exportar');
        }
      } catch (error) {
        console.error('❌ Erro ao exportar:', error);
        mostrarToast('❌ Erro ao exportar relatório: ' + error.message, 'error');
      }
    }

    function gerenciarPlataformas() {
      abrirModalGerenciarPlataformas();
    }

    // ===== MODAL GERENCIAR PLATAFORMAS =====
    async function abrirModalGerenciarPlataformas() {
      try {
        // Buscar plataformas existentes
        const response = await fetch('/api/plataformas');
        const result = await response.json();

        const plataformas = result.success ? result.data : [];

        const modal = document.createElement('div');
        modal.id = 'modalGerenciarPlataformas';
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        `;

        modal.innerHTML = `
          <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 800px; max-height: 90vh; overflow-y: auto;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
              <h2 style="margin: 0; color: #333;">🌐 Gerenciar Plataformas</h2>
              <button onclick="fecharModalGerenciarPlataformas()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
            </div>

            <!-- Adicionar nova plataforma -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
              <h3 style="margin: 0 0 15px 0; color: #333;">➕ Adicionar Nova Plataforma</h3>
              <div style="display: flex; gap: 15px; align-items: end;">
                <div style="flex: 1;">
                  <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #333;">Nome da Plataforma</label>
                  <input type="text" id="nomePlataforma" placeholder="Ex: Amazon, Magazine Luiza" style="width: 100%; padding: 10px; border: 2px solid #e0e0e0; border-radius: 6px;">
                </div>
                <button onclick="adicionarPlataforma()" style="padding: 10px 20px; background: #16a34a; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">
                  Adicionar
                </button>
              </div>
            </div>

            <!-- Lista de plataformas existentes -->
            <div>
              <h3 style="margin: 0 0 15px 0; color: #333;">📋 Plataformas Existentes</h3>
              <div id="listaPlataformas">
                ${plataformas.map(p => `
                  <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: white; border: 1px solid #e0e0e0; border-radius: 8px; margin-bottom: 10px;">
                    <div>
                      <div style="font-weight: 600; color: #333;">${p.nome}</div>
                      <div style="font-size: 12px; color: #666;">ID: ${p.id_plataforma}</div>
                    </div>
                    <div style="display: flex; gap: 10px;">
                      <button onclick="editarPlataforma(${p.id_plataforma}, '${p.nome}')" style="padding: 6px 12px; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
                        Editar
                      </button>
                      <button onclick="sincronizarPlataformaEspecifica(${p.id_plataforma})" style="padding: 6px 12px; background: #f59e0b; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
                        Sync
                      </button>
                      <button onclick="excluirPlataforma(${p.id_plataforma})" style="padding: 6px 12px; background: #dc2626; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
                        Excluir
                      </button>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>

            <div style="display: flex; justify-content: center; margin-top: 30px;">
              <button onclick="fecharModalGerenciarPlataformas()" style="padding: 12px 30px; background: #6b7280; color: white; border: none; border-radius: 8px; cursor: pointer;">
                Fechar
              </button>
            </div>
          </div>
        `;

        document.body.appendChild(modal);
      } catch (error) {
        console.error('❌ Erro ao abrir modal:', error);
        alert('❌ Erro ao carregar plataformas');
      }
    }

    async function analisarPerformance() {
      try {
        mostrarToast('📊 Gerando análise de performance...', 'info');

        const response = await fetch('/api/plataformas/analise-performance');
        const result = await response.json();

        if (result.success) {
          // Criar relatório detalhado
          const headers = ['Período', 'Plataforma', 'Vendas', 'Crescimento %', 'Ticket Médio', 'Conversão %', 'ROI'];
          const csvContent = [
            headers.join(','),
            ...result.data.map(item => [
              item.periodo,
              item.plataforma,
              item.vendas,
              item.crescimento,
              item.ticket_medio,
              item.conversao,
              item.roi
            ].join(','))
          ].join('\n');

          // Download do arquivo
          const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
          const link = document.createElement('a');
          const url = URL.createObjectURL(blob);
          link.setAttribute('href', url);
          link.setAttribute('download', `analise_performance_${new Date().toISOString().split('T')[0]}.csv`);
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          mostrarToast('✅ Análise de performance exportada!', 'success');
        } else {
          throw new Error(result.message || 'Erro na análise');
        }
      } catch (error) {
        console.error('❌ Erro na análise:', error);
        mostrarToast('❌ Erro na análise de performance: ' + error.message, 'error');
      }
    }

    async function calcularEstimativas() {
      try {
        mostrarToast('🔄 Recalculando estimativas...', 'info');

        const response = await fetch('/api/plataformas/calcular-estimativas', {
          method: 'POST'
        });
        const result = await response.json();

        if (result.success) {
          mostrarToast(`✅ Estimativas atualizadas! ${result.message || ''}`, 'success');
          setTimeout(() => location.reload(), 2000);
        } else {
          throw new Error(result.message || 'Erro no cálculo');
        }
      } catch (error) {
        console.error('❌ Erro no cálculo:', error);
        mostrarToast('❌ Erro no cálculo de estimativas: ' + error.message, 'error');
      }
    }

    function fecharModalGerenciarPlataformas() {
      const modal = document.getElementById('modalGerenciarPlataformas');
      if (modal) modal.remove();
    }

    async function adicionarPlataforma() {
      const nome = document.getElementById('nomePlataforma').value.trim();

      if (!nome) {
        alert('❌ Digite o nome da plataforma');
        return;
      }

      try {
        const response = await fetch('/api/plataformas', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ nome })
        });

        const result = await response.json();

        if (result.success) {
          alert(`✅ Plataforma "${nome}" adicionada com sucesso!`);
          fecharModalGerenciarPlataformas();
          location.reload(); // Recarregar página para mostrar nova plataforma
        } else {
          alert('❌ Erro ao adicionar plataforma: ' + result.error);
        }
      } catch (error) {
        console.error('❌ Erro:', error);
        alert('❌ Erro ao adicionar plataforma');
      }
    }

    async function editarPlataforma(id, nomeAtual) {
      const novoNome = prompt('✏️ Editar nome da plataforma:', nomeAtual);

      if (!novoNome || novoNome === nomeAtual) return;

      try {
        const response = await fetch(`/api/plataformas/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ nome: novoNome })
        });

        const result = await response.json();

        if (result.success) {
          alert(`✅ Plataforma atualizada para "${novoNome}"!`);
          fecharModalGerenciarPlataformas();
          location.reload();
        } else {
          alert('❌ Erro ao editar plataforma: ' + result.error);
        }
      } catch (error) {
        console.error('❌ Erro:', error);
        alert('❌ Erro ao editar plataforma');
      }
    }

    async function excluirPlataforma(id) {
      if (!confirm('❌ Tem certeza que deseja excluir esta plataforma?\n\nEsta ação não pode ser desfeita.')) {
        return;
      }

      try {
        const response = await fetch(`/api/plataformas/${id}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
          alert('✅ Plataforma excluída com sucesso!');
          fecharModalGerenciarPlataformas();
          location.reload();
        } else {
          alert('❌ Erro ao excluir plataforma: ' + result.error);
        }
      } catch (error) {
        console.error('❌ Erro:', error);
        alert('❌ Erro ao excluir plataforma');
      }
    }

    async function sincronizarPlataformaEspecifica(id) {
      try {
        const response = await fetch(`/api/plataformas/${id}/sincronizar`, {
          method: 'POST'
        });

        const result = await response.json();

        if (result.success) {
          const { novas_vendas, produtos_atualizados } = result.data;
          alert(`✅ Sincronização concluída!\n\n• ${novas_vendas} novas vendas\n• ${produtos_atualizados} produtos atualizados`);
        } else {
          alert('❌ Erro na sincronização: ' + result.error);
        }
      } catch (error) {
        console.error('❌ Erro:', error);
        alert('❌ Erro ao sincronizar plataforma');
      }
    }

    // ===== FUNÇÃO TOAST =====
    function mostrarToast(mensagem, tipo = 'info') {
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: ${tipo === 'success' ? '#16a34a' : tipo === 'error' ? '#dc2626' : '#3b82f6'};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        font-weight: 600;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        max-width: 400px;
        word-wrap: break-word;
      `;
      toast.textContent = mensagem;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 4000);
    }

    console.log('🌐 Página de plataformas carregada com design padronizado');
  </script>
</body>
</html>
