<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <link rel="stylesheet" href="/css/estilos.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
    .btn-danger {
      background: #dc2626 !important;
      color: white !important;
    }
    .btn-danger:hover {
      background: #b91c1c !important;
    }
  </style>
</head>
<body>
  <!-- Header horizontal (Topo) com logo e menu -->
  <%- include('../components/cabecalho') %>

  <!-- Layout principal -->
  <div class="main-layout">
    <!-- Área central para o conteúdo principal -->
    <main class="content-area">
      <!-- 6️⃣ Tela de Pedidos -->
      <h1 class="page-title">Pedidos</h1>

      <!-- Cards de métricas rápidas - DINÂMICOS -->
      <div id="cardsMetricasPedidos" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
        <div class="summary-card">
          <div class="card-icon" style="background: #3b82f6;">📋</div>
          <div class="card-title">Total de Pedidos</div>
          <div class="card-value" id="totalPedidosCard"><%= pedidos ? pedidos.length : 0 %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #f59e0b;">⏳</div>
          <div class="card-title">Pendentes</div>
          <div class="card-value" id="pedidosPendentesCard"><%= pedidos ? pedidos.filter(p => p.status === 'PENDENTE').length : 0 %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #2563eb;">✅</div>
          <div class="card-title">Aprovados</div>
          <div class="card-value" id="pedidosAprovadosCard"><%= pedidos ? pedidos.filter(p => p.status === 'APROVADO').length : 0 %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #16a34a;">📦</div>
          <div class="card-title">Recebidos</div>
          <div class="card-value" id="pedidosEntreguesCard"><%= pedidos ? pedidos.filter(p => p.status === 'ENTREGUE').length : 0 %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #8b5cf6;">💰</div>
          <div class="card-title">Valor Total</div>
          <div class="card-value" id="valorTotalCard">R$ <%= pedidos ? pedidos.reduce((total, p) => total + parseFloat(p.valor_total || 0), 0).toLocaleString('pt-BR', { minimumFractionDigits: 0, maximumFractionDigits: 0 }) : '0' %></div>
        </div>
      </div>



      <!-- Projeção de compra: Gráfico de linha -->
      <div class="content-section">
        <div class="section-header">
          <h3 class="section-title">📈 Projeção de Compra</h3>
        </div>
        <div class="section-content">
          <div class="chart-container">
            <canvas id="projecaoChart"></canvas>
          </div>
        </div>
      </div>

      <!-- Filtros entre gráfico e lista -->
      <div style="
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
      ">
        <div style="
          display: flex;
          justify-content: space-between;
          align-items: center;
          flex-wrap: wrap;
          gap: 15px;
        ">
          <!-- Filtros Unificados -->
          <%- include('../components/filtroUnificado') %>

          <!-- Ações -->
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-secondary" onclick="baixarTemplatePedidos()">📄 Template Excel</button>
            <button class="btn btn-secondary" onclick="importarPedidosExcel()">📥 Importar Excel</button>
            <button class="btn btn-secondary" onclick="abrirFiltroAvancadoPedidos()">🔍 Filtros</button>
            <button class="btn btn-secondary" onclick="atualizarPedidos()">🔄 Atualizar</button>
          </div>
        </div>
      </div>

      <!-- Lista de Pedidos com Design Melhorado -->
      <div class="content-section">
        <div class="section-header">
          <h3 class="section-title">📋 Lista de Pedidos</h3>
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-secondary" onclick="exportarPedidos()">📄 Exportar</button>
            <button class="btn btn-primary" onclick="novoPedido()">+ Novo Pedido</button>
          </div>
        </div>
        <div class="section-content">
          <% if (pedidos && pedidos.length > 0) { %>
            <div style="display: grid; gap: 15px;">
              <% pedidos.forEach((pedido, index) => { %>
                <div style="background: #f8f9fa; border: 1px solid #e0e0e0; border-radius: 12px; padding: 20px; transition: all 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.1)'">
                  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <div style="display: flex; align-items: center; gap: 15px;">
                      <div style="width: 50px; height: 50px; border-radius: 12px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); display: flex; align-items: center; justify-content: center; color: white; font-size: 16px; font-weight: bold;">
                        #<%= index + 1 %>
                      </div>
                      <div>
                        <h4 style="margin: 0; color: #333; font-size: 16px;"><%= pedido.produto_nome || 'Produto N/A' %></h4>
                        <p style="margin: 0; color: #666; font-size: 14px;">
                          <%= new Date(pedido.data_pedido).toLocaleDateString('pt-BR') %> •
                          <%= pedido.fornecedor || 'PCR Labor' %>
                        </p>
                      </div>
                    </div>
                    <div style="text-align: right;">
                      <div style="font-size: 20px; font-weight: bold; color: #3b82f6; margin-bottom: 5px;">
                        R$ <%= parseFloat(pedido.valor_total || 0).toFixed(2) %>
                      </div>
                      <div style="display: flex; align-items: center; gap: 10px;">
                        <% if (pedido.status === 'PENDENTE') { %>
                          <span style="background: #fef3c7; color: #d97706; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                            ⏳ Pendente
                          </span>
                        <% } else if (pedido.status === 'APROVADO') { %>
                          <span style="background: #dbeafe; color: #2563eb; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                            ✅ Aprovado
                          </span>
                        <% } else if (pedido.status === 'ENTREGUE') { %>
                          <span style="background: #dcfce7; color: #16a34a; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                            📦 Recebido
                          </span>
                        <% } else { %>
                          <span style="background: #fee2e2; color: #dc2626; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                            ❌ Cancelado
                          </span>
                        <% } %>
                        <button class="btn btn-secondary" onclick="verDetalhesPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 6px 12px; font-size: 12px;">
                          Ver
                        </button>
                      </div>
                    </div>
                  </div>

                  <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; padding-top: 15px; border-top: 1px solid #e0e0e0;">
                    <div>
                      <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Quantidade</label>
                      <div style="font-size: 16px; font-weight: bold; color: #333;"><%= pedido.quantidade %> unidades</div>
                    </div>
                    <div>
                      <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Valor Unitário</label>
                      <div style="font-size: 16px; font-weight: bold; color: #333;">R$ <%= (parseFloat(pedido.valor_total || 0) / pedido.quantidade).toFixed(2) %></div>
                    </div>
                    <div>
                      <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Prioridade</label>
                      <div style="font-size: 16px; font-weight: bold; color: <%= pedido.prioridade === 'alta' || pedido.prioridade === 'urgente' ? '#ef4444' : pedido.prioridade === 'media' ? '#f59e0b' : '#16a34a' %>;">
                        <%= pedido.prioridade ? pedido.prioridade.toUpperCase() : 'MÉDIA' %>
                      </div>
                    </div>
                    <div>
                      <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Ações</label>
                      <div style="display: flex; gap: 5px;">
                        <% if (pedido.status === 'PENDENTE') { %>
                          <button class="btn btn-primary" onclick="aprovarPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px;">✅ Aprovar</button>
                          <button class="btn btn-secondary" onclick="cancelarPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px;">❌ Cancelar</button>
                        <% } else if (pedido.status === 'APROVADO') { %>
                          <button class="btn btn-success" onclick="marcarComoEntregue(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px; background: #16a34a; color: white; font-weight: bold;">
                            📦 RECEBIDO
                          </button>
                          <button class="btn btn-secondary" onclick="editarPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px;">✏️ Editar</button>
                        <% } else if (pedido.status === 'ENTREGUE') { %>
                          <span style="background: #dcfce7; color: #16a34a; padding: 4px 8px; border-radius: 4px; font-size: 11px; font-weight: bold;">
                            ✅ RECEBIDO
                          </span>
                          <button class="btn btn-secondary" onclick="editarPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px;">✏️ Editar</button>
                        <% } else { %>
                          <button class="btn btn-secondary" onclick="editarPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px;">✏️ Editar</button>
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>

            <!-- Paginação -->
            <div style="display: flex; justify-content: center; align-items: center; gap: 15px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
              <button class="btn btn-secondary" onclick="paginaAnteriorPedidos()" style="padding: 8px 16px;">
                ← Anterior
              </button>
              <span style="color: #666; font-size: 14px;">
                Página 1 de 1 • <%= pedidos.length %> pedidos
              </span>
              <button class="btn btn-secondary" onclick="proximaPaginaPedidos()" style="padding: 8px 16px;">
                Próxima →
              </button>
            </div>
          <% } else { %>
            <div style="text-align: center; color: #666; padding: 60px 20px;">
              <div style="font-size: 64px; margin-bottom: 20px;">📋</div>
              <h3 style="margin: 0 0 10px; color: #333;">Nenhum pedido encontrado</h3>
              <p style="margin: 0 0 30px;">Seus pedidos aparecerão aqui quando criados</p>
              <button class="btn btn-primary" onclick="novoPedido()">
                + Criar Primeiro Pedido
              </button>
            </div>
          <% } %>
        </div>
      </div>

    </main>

    <!-- Lateral direita com Tarefas, Calendário e Pergunte para IA -->
    <%- include('../components/barraLateral') %>
  </div>

  <script>
    // ===== CONFIGURAÇÃO DO GRÁFICO DE PROJEÇÃO =====

    /**
     * Gráfico de projeção de compras - Linha temporal
     * Mostra estimativas de compras futuras baseadas em dados históricos
     */
    const projecaoCtx = document.getElementById('projecaoChart').getContext('2d');

    // Armazenar referência global do gráfico para atualizações dinâmicas
    window.projecaoChart = new Chart(projecaoCtx, {
      type: 'line',
      data: {
        labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul'],
        datasets: [{
          label: 'Projeção de Compras (R$)',
          data: [8000, 12000, 6000, 15000, 18000, 14000, 20000],
          borderColor: '#3b82f6',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          borderWidth: 3,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: '#f0f0f0'
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });

    // ===== FUNCIONALIDADES DE PEDIDOS =====

    // ===== FILTROS FUNCIONAIS COMPLETOS =====
    let filtroAtualPedidos = 'todos'; // Iniciar com 'todos' para mostrar todos os pedidos
    let statusAtualPedidos = 'todos';
    let fornecedorAtualPedidos = 'todos';
    let pedidosOriginais = <%- JSON.stringify(pedidos) %>;
    let fornecedoresDisponiveis = [];

    function filtrarPeriodo(periodo) {
      filtroAtualPedidos = periodo;

      // Atualizar botões visuais
      document.querySelectorAll('[id^="filtro"][id*="Pedidos"]').forEach(btn => {
        btn.className = 'btn btn-secondary';
      });

      const botaoMap = {
        'mes': 'filtroMesPedidos',
        'semana': 'filtroSemanaPedidos',
        'hoje': 'filtroHojePedidos',
        'todos': 'filtroTodosPedidos',
        'ano': 'filtroAnoPedidos',
        '6meses': 'filtro6MesesPedidos'
      };

      if (botaoMap[periodo]) {
        document.getElementById(botaoMap[periodo]).className = 'btn btn-primary';
      }

      // Aplicar filtros combinados
      aplicarFiltrosCombinados();

      // Feedback visual
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #3b82f6;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
      `;
      toast.textContent = `✅ ${pedidosFiltrados.length} pedidos encontrados - ${periodo === 'mes' ? 'Este mês' : periodo === 'semana' ? 'Últimos 7 dias' : periodo === 'hoje' ? 'Hoje' : 'Todos'}`;
      document.body.appendChild(toast);

      setTimeout(() => toast.remove(), 3000);
    }

    function filtrarStatus(status) {
      statusAtualPedidos = status;

      // Atualizar botões visuais de status
      document.querySelectorAll('[id^="filtro"][id*="Status"], [id^="filtroPendentes"], [id^="filtroAprovados"], [id^="filtroCancelados"]').forEach(btn => {
        btn.className = 'btn btn-secondary';
      });

      const botaoMapStatus = {
        'todos': 'filtroTodosStatus',
        'pendente': 'filtroPendentes',
        'aprovado': 'filtroAprovados',
        'cancelado': 'filtroCancelados'
      };

      if (botaoMapStatus[status]) {
        document.getElementById(botaoMapStatus[status]).className = 'btn btn-primary';
      }

      // Aplicar filtros combinados (período + status)
      aplicarFiltrosCombinados();

      // Feedback visual após aplicar filtros
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #3b82f6;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
      `;

      const statusTexto = {
        'todos': 'Todos os status',
        'pendente': 'Pendentes',
        'aprovado': 'Aprovados',
        'entregue': 'Recebidos',
        'cancelado': 'Cancelados'
      };

      // Usar a contagem dos pedidos filtrados
      const quantidade = window.pedidosFiltrados ? window.pedidosFiltrados.length : 0;
      toast.textContent = `📋 ${quantidade} pedidos encontrados - ${statusTexto[status]}`;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    // ===== FILTRO DE FORNECEDORES =====
    async function carregarFornecedores() {
      try {
        const response = await fetch('/api/fornecedores');
        const result = await response.json();

        if (result.success) {
          fornecedoresDisponiveis = result.data;
          atualizarDropdownFornecedores();
        }
      } catch (error) {
        console.error('❌ Erro ao carregar fornecedores:', error);
      }
    }

    function atualizarDropdownFornecedores() {
      const lista = document.getElementById('listaFornecedoresFiltro');
      if (!lista) return;

      let html = `
        <div style="padding: 8px 12px; cursor: pointer; border-bottom: 1px solid #f0f0f0;" onclick="filtrarFornecedor('todos')">
          <div style="display: flex; align-items: center; gap: 8px;">
            <span style="color: #3b82f6;">📋</span>
            <span style="font-weight: 600;">Todos os Fornecedores</span>
          </div>
        </div>
      `;

      fornecedoresDisponiveis.forEach(fornecedor => {
        html += `
          <div style="padding: 8px 12px; cursor: pointer; border-bottom: 1px solid #f0f0f0;" onclick="filtrarFornecedor('${fornecedor.id_fornecedor}', '${fornecedor.nome}')" onmouseover="this.style.background='#f8f9fa'" onmouseout="this.style.background='white'">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span style="color: #16a34a;">🏭</span>
              <div>
                <div style="font-weight: 600; color: #333;">${fornecedor.nome}</div>
                <div style="font-size: 12px; color: #666;">${fornecedor.total_pedidos || 0} pedidos</div>
              </div>
            </div>
          </div>
        `;
      });

      lista.innerHTML = html;
    }

    function toggleFiltroFornecedores() {
      const dropdown = document.getElementById('dropdownFornecedores');
      const isVisible = dropdown.style.display === 'block';

      // Fechar outros dropdowns se houver
      document.querySelectorAll('[id*="dropdown"]').forEach(d => {
        if (d !== dropdown) d.style.display = 'none';
      });

      dropdown.style.display = isVisible ? 'none' : 'block';

      if (!isVisible && fornecedoresDisponiveis.length === 0) {
        carregarFornecedores();
      }
    }

    function filtrarFornecedor(id, nome = 'Todos') {
      fornecedorAtualPedidos = id;

      // Atualizar texto do botão
      const botao = document.getElementById('filtroFornecedores');
      if (id === 'todos') {
        botao.innerHTML = `🏭 Fornecedores <span style="font-size: 12px;">▼</span>`;
        botao.className = 'btn btn-secondary';
      } else {
        botao.innerHTML = `🏭 ${nome} <span style="font-size: 12px;">▼</span>`;
        botao.className = 'btn btn-primary';
      }

      // Fechar dropdown
      document.getElementById('dropdownFornecedores').style.display = 'none';

      // Aplicar filtros combinados
      aplicarFiltrosCombinados();

      // Feedback visual
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #3b82f6;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
      `;

      const quantidade = window.pedidosFiltrados ? window.pedidosFiltrados.length : 0;
      toast.textContent = `🏭 ${quantidade} pedidos encontrados - ${nome}`;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    // Fechar dropdown ao clicar fora
    document.addEventListener('click', function(event) {
      const dropdown = document.getElementById('dropdownFornecedores');
      const botao = document.getElementById('filtroFornecedores');

      if (dropdown && botao && !dropdown.contains(event.target) && !botao.contains(event.target)) {
        dropdown.style.display = 'none';
      }
    });

    function aplicarFiltrosCombinados() {
      if (!pedidosOriginais || !Array.isArray(pedidosOriginais)) {
        console.error('❌ Dados originais não disponíveis ou inválidos:', pedidosOriginais);
        return;
      }

      let pedidosFiltrados = [...pedidosOriginais];

      // Aplicar filtro de período
      const agora = new Date();
      switch(filtroAtualPedidos) {
        case 'hoje':
          const hoje = agora.toISOString().split('T')[0];
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido).toISOString().split('T')[0];
            return dataPedido === hoje;
          });
          break;

        case 'semana':
          const semanaAtras = new Date(agora.getTime() - 7 * 24 * 60 * 60 * 1000);
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido);
            return dataPedido >= semanaAtras;
          });
          break;

        case 'mes':
          const inicioMes = new Date(agora.getFullYear(), agora.getMonth(), 1);
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido);
            return dataPedido >= inicioMes;
          });
          break;

        case '6meses':
          const seiseMesesAtras = new Date(agora.getTime() - 6 * 30 * 24 * 60 * 60 * 1000);
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido);
            return dataPedido >= seiseMesesAtras;
          });
          break;

        case 'ano':
          const inicioAno = new Date(agora.getFullYear(), 0, 1);
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido);
            return dataPedido >= inicioAno;
          });
          break;

        case 'todos':
        default:
          // Manter todos os pedidos
          break;
      }

      // Aplicar filtro de status
      if (statusAtualPedidos !== 'todos') {
        console.log(`🔍 Aplicando filtro de status: ${statusAtualPedidos}`);
        console.log(`📋 Pedidos antes do filtro de status: ${pedidosFiltrados.length}`);

        // Log dos status dos pedidos antes do filtro
        pedidosFiltrados.forEach((pedido, index) => {
          console.log(`  Pedido ${index + 1}: status = "${pedido.status}" (tipo: ${typeof pedido.status})`);
        });

        const statusMap = {
          'pendente': 'PENDENTE',
          'aprovado': 'APROVADO',
          'entregue': 'ENTREGUE',
          'cancelado': 'CANCELADO'
        };

        const statusFiltro = statusMap[statusAtualPedidos];
        console.log(`🎯 Status procurado: "${statusFiltro}"`);

        if (statusFiltro) {
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const status = pedido.status ? pedido.status.toUpperCase().trim() : 'PENDENTE';
            const match = status === statusFiltro;
            console.log(`  Comparando "${status}" === "${statusFiltro}" = ${match}`);
            return match;
          });
        }

        console.log(`📊 Pedidos após filtro de status: ${pedidosFiltrados.length}`);
      }

      // Aplicar filtro de fornecedor
      if (fornecedorAtualPedidos !== 'todos') {
        console.log(`🏭 Aplicando filtro de fornecedor: ${fornecedorAtualPedidos}`);
        console.log(`📋 Pedidos antes do filtro de fornecedor: ${pedidosFiltrados.length}`);

        pedidosFiltrados = pedidosFiltrados.filter(pedido => {
          // Verificar se o pedido tem o fornecedor especificado
          const fornecedorPedido = pedido.id_fornecedor || pedido.fornecedor;
          const match = fornecedorPedido == fornecedorAtualPedidos;
          console.log(`  Comparando fornecedor "${fornecedorPedido}" === "${fornecedorAtualPedidos}" = ${match}`);
          return match;
        });

        console.log(`📊 Pedidos após filtro de fornecedor: ${pedidosFiltrados.length}`);
      }

      console.log(`🔍 Filtros aplicados - Período: ${filtroAtualPedidos}, Status: ${statusAtualPedidos}, Fornecedor: ${fornecedorAtualPedidos}`);
      console.log(`📋 Pedidos encontrados: ${pedidosFiltrados.length}`);

      // Atualizar a exibição
      atualizarListaPedidos(pedidosFiltrados);
      atualizarGraficoPedidos(pedidosFiltrados);
      atualizarCards(pedidosFiltrados);

      // Armazenar resultado para uso em toasts
      window.pedidosFiltrados = pedidosFiltrados;
    }

    function atualizarListaPedidos(pedidosFiltrados) {
      // Selecionar especificamente o container da seção de pedidos
      const containers = document.querySelectorAll('.section-content');
      const container = containers[1]; // Segunda seção é a de pedidos (primeira é projeção)
      if (!container) return;

      if (pedidosFiltrados.length === 0) {
        container.innerHTML = `
          <div style="text-align: center; color: #666; padding: 60px 20px;">
            <div style="font-size: 64px; margin-bottom: 20px;">📋</div>
            <h3 style="margin: 0 0 10px; color: #333;">Nenhum pedido encontrado</h3>
            <p style="margin: 0 0 30px;">Nenhum pedido corresponde aos filtros aplicados</p>
            <button class="btn btn-primary" onclick="novoPedido()">
              + Criar Novo Pedido
            </button>
          </div>
        `;
        return;
      }

      let html = '<div style="display: grid; gap: 15px;">';

      pedidosFiltrados.forEach((pedido, index) => {
        const statusClass = pedido.status === 'PENDENTE' ? 'background: #fef3c7; color: #d97706;' :
                           pedido.status === 'APROVADO' ? 'background: #dbeafe; color: #2563eb;' :
                           pedido.status === 'ENTREGUE' ? 'background: #dcfce7; color: #16a34a;' :
                           'background: #fee2e2; color: #dc2626;';

        const statusText = pedido.status === 'PENDENTE' ? '⏳ Pendente' :
                          pedido.status === 'APROVADO' ? '✅ Aprovado' :
                          pedido.status === 'ENTREGUE' ? '📦 Recebido' :
                          '❌ Cancelado';

        html += `
          <div style="background: #f8f9fa; border: 1px solid #e0e0e0; border-radius: 12px; padding: 20px; transition: all 0.2s ease;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
              <div style="display: flex; align-items: center; gap: 15px;">
                <div style="width: 50px; height: 50px; border-radius: 12px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); display: flex; align-items: center; justify-content: center; color: white; font-size: 16px; font-weight: bold;">
                  #${index + 1}
                </div>
                <div>
                  <h4 style="margin: 0; color: #333; font-size: 16px;">${pedido.produto_nome || 'Produto N/A'}</h4>
                  <p style="margin: 0; color: #666; font-size: 14px;">
                    ${new Date(pedido.data_pedido).toLocaleDateString('pt-BR')} •
                    Qtd: ${pedido.quantidade}
                  </p>
                </div>
              </div>
              <div style="text-align: right;">
                <div style="font-size: 18px; font-weight: bold; color: #3b82f6; margin-bottom: 5px;">
                  R$ ${parseFloat(pedido.valor_total || 0).toFixed(2)}
                </div>
                <div style="display: flex; align-items: center; gap: 10px;">
                  <span style="${statusClass} padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                    ${statusText}
                  </span>
                  <button class="btn btn-secondary" onclick="verDetalhesPedido(${index + 1})" style="padding: 6px 12px; font-size: 12px;">
                    👁️ Ver
                  </button>
                </div>
              </div>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; padding-top: 15px; border-top: 1px solid #e0e0e0;">
              <div>
                <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Fornecedor</label>
                <div style="font-size: 14px; font-weight: bold; color: #333;">${pedido.fornecedor || 'PCR Labor'}</div>
              </div>
              <div>
                <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Prazo</label>
                <div style="font-size: 14px; font-weight: bold; color: #333;">5-7 dias úteis</div>
              </div>
              <div>
                <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Prioridade</label>
                <div style="font-size: 14px; font-weight: bold; color: #f59e0b;">MÉDIA</div>
              </div>
              <div>
                <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Ações</label>
                <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                  ${pedido.status === 'PENDENTE' ? `
                    <button class="btn btn-primary" onclick="aprovarPedido(${pedido.id_pedido})" style="padding: 4px 8px; font-size: 11px;">✅ Aprovar</button>
                    <button class="btn btn-secondary" onclick="cancelarPedido(${pedido.id_pedido})" style="padding: 4px 8px; font-size: 11px;">❌ Cancelar</button>
                  ` : pedido.status === 'APROVADO' ? `
                    <button class="btn btn-success" onclick="marcarComoEntregue(${pedido.id_pedido})" style="padding: 6px 12px; font-size: 12px; background: #16a34a; color: white; font-weight: bold; border: 2px solid #15803d;">
                      📦 MARCAR COMO RECEBIDO
                    </button>
                    <button class="btn btn-secondary" onclick="editarPedido(${pedido.id_pedido})" style="padding: 4px 8px; font-size: 11px;">✏️ Editar</button>
                  ` : pedido.status === 'ENTREGUE' ? `
                    <span style="background: #dcfce7; color: #16a34a; padding: 6px 12px; border-radius: 6px; font-size: 12px; font-weight: bold; border: 2px solid #16a34a;">
                      ✅ PEDIDO RECEBIDO
                    </span>
                    <button class="btn btn-secondary" onclick="editarPedido(${pedido.id_pedido})" style="padding: 4px 8px; font-size: 11px;">✏️ Editar</button>
                  ` : `
                    <button class="btn btn-secondary" onclick="editarPedido(${pedido.id_pedido})" style="padding: 4px 8px; font-size: 11px;">✏️ Editar</button>
                  `}
                  <button class="btn btn-danger" onclick="excluirPedido(${pedido.id_pedido})" style="padding: 4px 8px; font-size: 11px; background: #dc2626;">🗑️ Excluir</button>
                </div>
              </div>
            </div>
          </div>
        `;
      });

      html += '</div>';
      container.innerHTML = html;

      console.log(`✅ Lista de pedidos atualizada: ${pedidosFiltrados.length} pedidos`);
    }

    function atualizarCards(pedidosFiltrados) {
      // Atualizar cards de métricas
      const totalPedidos = pedidosFiltrados.length;
      const pendentes = pedidosFiltrados.filter(p => p.status === 'PENDENTE').length;
      const aprovados = pedidosFiltrados.filter(p => p.status === 'APROVADO').length;
      const entregues = pedidosFiltrados.filter(p => p.status === 'ENTREGUE').length;
      const valorTotal = pedidosFiltrados.reduce((total, p) => total + parseFloat(p.valor_total || 0), 0);

      // Atualizar valores nos cards
      const totalCard = document.getElementById('totalPedidosCard');
      const pendentesCard = document.getElementById('pedidosPendentesCard');
      const aprovadosCard = document.getElementById('pedidosAprovadosCard');
      const entreguesCard = document.getElementById('pedidosEntreguesCard');
      const valorCard = document.getElementById('valorTotalCard');

      if (totalCard) totalCard.textContent = totalPedidos;
      if (pendentesCard) pendentesCard.textContent = pendentes;
      if (aprovadosCard) aprovadosCard.textContent = aprovados;
      if (entreguesCard) entreguesCard.textContent = entregues;
      if (valorCard) valorCard.textContent = `R$ ${valorTotal.toLocaleString('pt-BR', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`;

      console.log(`📊 Cards atualizados: ${totalPedidos} total, ${pendentes} pendentes, ${aprovados} aprovados, ${entregues} recebidos`);
    }

    function atualizarGraficoPedidos(pedidosFiltrados) {
      // Calcular dados para o gráfico baseado nos pedidos filtrados
      const dadosGrafico = calcularDadosProjecao(pedidosFiltrados);

      // Atualizar o gráfico existente
      if (window.projecaoChart) {
        window.projecaoChart.data.datasets[0].data = dadosGrafico;
        window.projecaoChart.update();
      }
    }

    function calcularDadosProjecao(pedidos) {
      // Simular cálculo de projeção baseado nos pedidos filtrados
      const baseValues = [8000, 12000, 6000, 15000, 18000, 14000, 20000];
      const fatorAjuste = pedidos.length / Math.max(pedidosOriginais.length, 1);

      return baseValues.map(valor => Math.round(valor * fatorAjuste));
    }

    // Novo pedido
    function novoPedido() {
      console.log('🔄 Abrindo modal de novo pedido...');

      // Remover modal existente se houver
      const modalExistente = document.getElementById('modalNovoPedido');
      if (modalExistente) {
        modalExistente.remove();
      }

      const modal = document.createElement('div');
      modal.id = 'modalNovoPedido';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">📋 Novo Pedido</h2>
            <button onclick="fecharModalNovoPedido()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formNovoPedido" onsubmit="criarNovoPedido(event)">
            <div style="display: grid; gap: 20px;">

              <!-- Produto -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">📦 Produto</label>
                <select id="produtoPedidoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
                  <option value="">Carregando produtos...</option>
                </select>
              </div>

              <!-- Quantidade -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">📊 Quantidade</label>
                <input type="number" id="quantidadePedidoInput" min="1" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: 50">
              </div>

              <!-- Fornecedor -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">🏭 Fornecedor</label>
                <select id="fornecedorPedidoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
                  <option value="">Carregando fornecedores...</option>
                </select>
                <div style="margin-top: 8px;">
                  <button type="button" onclick="abrirModalNovoFornecedor()" style="background: #3b82f6; color: white; border: none; padding: 6px 12px; border-radius: 6px; font-size: 12px; cursor: pointer;">
                    + Novo Fornecedor
                  </button>
                </div>
              </div>

              <!-- Prioridade -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">⚡ Prioridade</label>
                <select id="prioridadePedidoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
                  <option value="baixa">🟢 Baixa</option>
                  <option value="media" selected>🟡 Média</option>
                  <option value="alta">🔴 Alta</option>
                  <option value="urgente">🚨 Urgente</option>
                </select>
              </div>

              <!-- Data de entrega -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">📅 Data de Entrega Desejada</label>
                <input type="date" id="dataEntregaPedidoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
              </div>

              <!-- Observações -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">💬 Observações</label>
                <textarea id="observacoesPedidoInput" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px; min-height: 80px;" placeholder="Observações adicionais sobre o pedido..."></textarea>
              </div>

              <!-- Preview do valor -->
              <div id="previewValorPedido" style="background: #f0fff4; padding: 15px; border-radius: 8px; border: 2px solid #16a34a; display: none;">
                <div style="font-weight: 600; color: #333; margin-bottom: 5px;">💰 Valor Total Estimado:</div>
                <div style="color: #16a34a; font-size: 18px; font-weight: bold;">R$ 0,00</div>
              </div>

            </div>

            <div style="display: flex; gap: 15px; margin-top: 30px;">
              <button type="button" onclick="fecharModalNovoPedido()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                Cancelar
              </button>
              <button type="submit" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                📋 Criar Pedido
              </button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);
      console.log('✅ Modal adicionado ao DOM');

      // Carregar produtos e fornecedores reais da empresa
      carregarProdutosPedido();
      carregarFornecedoresPedido();

      // Event listeners para calcular valor
      const produtoSelect = document.getElementById('produtoPedidoInput');
      const quantidadeInput = document.getElementById('quantidadePedidoInput');
      const dataInput = document.getElementById('dataEntregaPedidoInput');

      if (produtoSelect) {
        produtoSelect.addEventListener('change', calcularValorPedido);
        console.log('✅ Event listener do produto adicionado');
      }

      if (quantidadeInput) {
        quantidadeInput.addEventListener('input', calcularValorPedido);
        console.log('✅ Event listener da quantidade adicionado');
      }

      // Definir data mínima como hoje
      if (dataInput) {
        const hoje = new Date().toISOString().split('T')[0];
        dataInput.min = hoje;
        console.log('✅ Data mínima definida:', hoje);
      }

      // Adicionar event listener para fechar modal clicando fora
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          fecharModalNovoPedido();
        }
      });

      console.log('✅ Modal de novo pedido configurado completamente');
    }

    async function carregarProdutosPedido() {
      try {
        console.log('🔄 Carregando produtos da empresa...');

        const response = await fetch('/api/produtos');
        const result = await response.json();

        if (result.success && result.data) {
          const produtoSelect = document.getElementById('produtoPedidoInput');
          if (produtoSelect) {
            produtoSelect.innerHTML = '<option value="">Selecione um produto</option>';

            result.data.forEach(produto => {
              const option = document.createElement('option');
              option.value = produto.id_produto;
              option.textContent = `${produto.nome} - R$ ${parseFloat(produto.preco).toFixed(2)} (Estoque: ${produto.estoque_atual})`;
              option.dataset.preco = produto.preco;
              produtoSelect.appendChild(option);
            });

            console.log(`✅ ${result.data.length} produtos carregados no select`);
          }
        } else {
          console.error('❌ Erro ao carregar produtos:', result.error);
          const produtoSelect = document.getElementById('produtoPedidoInput');
          if (produtoSelect) {
            produtoSelect.innerHTML = '<option value="">Erro ao carregar produtos</option>';
          }
        }
      } catch (error) {
        console.error('❌ Erro ao carregar produtos:', error);
        const produtoSelect = document.getElementById('produtoPedidoInput');
        if (produtoSelect) {
          produtoSelect.innerHTML = '<option value="">Erro ao carregar produtos</option>';
        }
      }
    }

    async function carregarFornecedoresPedido() {
      try {
        console.log('🔄 Carregando fornecedores da empresa...');

        const response = await fetch('/api/fornecedores');
        const result = await response.json();

        if (result.success && result.data) {
          const fornecedorSelect = document.getElementById('fornecedorPedidoInput');
          if (fornecedorSelect) {
            fornecedorSelect.innerHTML = '<option value="">Selecione um fornecedor</option>';

            result.data.forEach(fornecedor => {
              const option = document.createElement('option');
              option.value = fornecedor.id_fornecedor;
              option.textContent = `${fornecedor.nome} ${fornecedor.cnpj ? '(' + fornecedor.cnpj + ')' : ''}`;
              fornecedorSelect.appendChild(option);
            });

            console.log(`✅ ${result.data.length} fornecedores carregados no select`);
          }
        } else {
          console.error('❌ Erro ao carregar fornecedores:', result.error);
          const fornecedorSelect = document.getElementById('fornecedorPedidoInput');
          if (fornecedorSelect) {
            fornecedorSelect.innerHTML = '<option value="">Erro ao carregar fornecedores</option>';
          }
        }
      } catch (error) {
        console.error('❌ Erro ao carregar fornecedores:', error);
        const fornecedorSelect = document.getElementById('fornecedorPedidoInput');
        if (fornecedorSelect) {
          fornecedorSelect.innerHTML = '<option value="">Erro ao carregar fornecedores</option>';
        }
      }
    }

    function fecharModalNovoPedido() {
      const modal = document.getElementById('modalNovoPedido');
      if (modal) modal.remove();
    }

    function calcularValorPedido() {
      const produtoSelect = document.getElementById('produtoPedidoInput');
      const quantidade = parseInt(document.getElementById('quantidadePedidoInput').value) || 0;

      if (produtoSelect && produtoSelect.value && quantidade > 0) {
        const selectedOption = produtoSelect.options[produtoSelect.selectedIndex];
        const preco = parseFloat(selectedOption.dataset.preco || 0);

        if (preco > 0) {
          const valorTotal = preco * quantidade;
          const preview = document.getElementById('previewValorPedido');
          preview.style.display = 'block';
          preview.querySelector('div:last-child').textContent = `R$ ${valorTotal.toFixed(2).replace('.', ',')}`;
        } else {
          document.getElementById('previewValorPedido').style.display = 'none';
        }
      } else {
        document.getElementById('previewValorPedido').style.display = 'none';
      }
    }

    async function criarNovoPedido(event) {
      event.preventDefault();
      console.log('🚀 Iniciando criação de pedido...');

      // Capturar elementos do formulário
      const produtoInput = document.getElementById('produtoPedidoInput');
      const quantidadeInput = document.getElementById('quantidadePedidoInput');
      const fornecedorInput = document.getElementById('fornecedorPedidoInput');
      const prioridadeInput = document.getElementById('prioridadePedidoInput');
      const dataEntregaInput = document.getElementById('dataEntregaPedidoInput');
      const observacoesInput = document.getElementById('observacoesPedidoInput');

      // Validar se os elementos existem
      if (!produtoInput || !quantidadeInput || !fornecedorInput) {
        console.error('❌ Elementos do formulário não encontrados');
        mostrarToast('❌ Erro no formulário. Tente novamente.', '#ef4444');
        return;
      }

      // Capturar valores
      const produto = produtoInput.value;
      const quantidade = quantidadeInput.value;
      const fornecedor = fornecedorInput.value;
      const prioridade = prioridadeInput ? prioridadeInput.value : 'media';
      const dataEntrega = dataEntregaInput ? dataEntregaInput.value : '';
      const observacoes = observacoesInput ? observacoesInput.value : '';

      console.log('📋 Dados capturados:', { produto, quantidade, fornecedor, prioridade, dataEntrega });

      // Validar campos obrigatórios
      if (!produto || !quantidade || !fornecedor) {
        mostrarToast('❌ Por favor, preencha todos os campos obrigatórios.', '#ef4444');
        return;
      }

      // Preparar dados para envio
      const formData = {
        id_produto: parseInt(produto),
        quantidade: parseInt(quantidade),
        fornecedor: fornecedor,
        prioridade: prioridade,
        data_entrega: dataEntrega,
        observacoes: observacoes,
        id_plataforma: 1,
        status: 'PENDENTE',
        data_pedido: new Date().toISOString().split('T')[0]
      };

      // Calcular valor total usando preço real do produto
      const produtoSelect = document.getElementById('produtoPedidoInput');
      const selectedOption = produtoSelect.options[produtoSelect.selectedIndex];
      const preco = parseFloat(selectedOption.dataset.preco || 0);
      formData.valor_total = preco * formData.quantidade;

      console.log('📤 Dados para envio:', formData);

      // Mostrar loading no botão
      const submitBtn = document.querySelector('#formNovoPedido button[type="submit"]');
      let originalText = '📋 Criar Pedido';
      if (submitBtn) {
        originalText = submitBtn.textContent;
        submitBtn.textContent = '⏳ Criando...';
        submitBtn.disabled = true;
      }

      try {
        console.log('🌐 Enviando requisição para API...');

        const response = await fetch('/api/pedidos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        console.log('📡 Status da resposta:', response.status);

        if (!response.ok) {
          throw new Error(`Erro HTTP: ${response.status}`);
        }

        const result = await response.json();
        console.log('📥 Resposta da API:', result);

        if (result.success) {
          console.log('✅ Pedido criado com sucesso!');

          // Fechar modal
          fecharModalNovoPedido();

          // Mostrar toast de sucesso
          mostrarToast('✅ Pedido criado com sucesso!', '#16a34a');

          // Obter nome do produto
          const produtoOption = document.querySelector(`#produtoPedidoInput option[value="${formData.id_produto}"]`);
          const produtoNome = produtoOption ? produtoOption.textContent.split(' - ')[0] : 'Produto';

          // Criar objeto do novo pedido
          const novoPedido = {
            id_pedido: result.data?.id_pedido || Date.now(),
            produto_nome: produtoNome,
            quantidade: formData.quantidade,
            status: formData.status,
            data_pedido: formData.data_pedido,
            valor_total: formData.valor_total,
            fornecedor: formData.fornecedor,
            prioridade: formData.prioridade,
            data_entrega: formData.data_entrega,
            observacoes: formData.observacoes
          };

          console.log('📋 Novo pedido criado:', novoPedido);

          // Adicionar aos dados originais
          pedidosOriginais.unshift(novoPedido);
          console.log('📊 Total de pedidos após adição:', pedidosOriginais.length);

          // Atualizar a lista sem recarregar a página
          console.log('🔄 Atualizando lista de pedidos...');

          // Recarregar dados via AJAX
          try {
            const response = await fetch('/api/pedidos');
            const data = await response.json();

            if (data.success) {
              console.log('📋 Novos dados recebidos:', data.data);

              // Atualizar variáveis globais
              window.pedidosOriginais = data.data;

              // Aplicar filtros atuais
              aplicarFiltrosCombinados();

              console.log('✅ Lista atualizada com sucesso!');
            } else {
              console.error('❌ Erro ao buscar pedidos:', data.error);
              // Fallback: recarregar página
              setTimeout(() => window.location.reload(), 1000);
            }
          } catch (error) {
            console.error('❌ Erro na requisição:', error);
            // Fallback: recarregar página
            setTimeout(() => window.location.reload(), 1000);
          }

        } else {
          throw new Error(result.error || 'Erro desconhecido na API');
        }

      } catch (error) {
        console.error('❌ Erro ao criar pedido:', error);
        mostrarToast(`❌ Erro ao criar pedido: ${error.message}`, '#ef4444');

        // Restaurar botão
        if (submitBtn) {
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
        }
      }
    }

    function mostrarToast(mensagem, cor) {
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: ${cor};
        color: white;
        padding: 15px 25px;
        border-radius: 8px;
        z-index: 1001;
        font-size: 14px;
        font-weight: 500;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
      `;
      toast.textContent = mensagem;
      document.body.appendChild(toast);

      setTimeout(() => {
        toast.remove();
      }, 3000);
    }

    // Ver detalhes do pedido
    function verDetalhesPedido(id) {
      const modal = document.createElement('div');
      modal.id = 'modalDetalhesPedido';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 700px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">👁️ Detalhes do Pedido #${id}</h2>
            <button onclick="fecharModalDetalhesPedido()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <div style="display: grid; gap: 20px;">

            <!-- Status atual -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <div style="display: flex; justify-content: space-between; align-items: center;">
                <h3 style="margin: 0; color: #333;">📋 Status do Pedido</h3>
                <span style="background: #fef3c7; color: #d97706; padding: 8px 16px; border-radius: 12px; font-size: 14px; font-weight: 600;">
                  ⏳ Pendente
                </span>
              </div>
            </div>

            <!-- Informações do produto -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px; color: #333;">📦 Produto Solicitado</h3>
              <div style="display: grid; gap: 10px;">
                <div><strong>Nome:</strong> Kit PCR COVID-19</div>
                <div><strong>Quantidade:</strong> 50 unidades</div>
                <div><strong>Valor Unitário:</strong> R$ 89,90</div>
                <div><strong>Valor Total:</strong> R$ 4.495,00</div>
              </div>
            </div>

            <!-- Informações do fornecedor -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px; color: #333;">🏭 Fornecedor</h3>
              <div style="display: grid; gap: 10px;">
                <div><strong>Nome:</strong> Biotech LTDA</div>
                <div><strong>Prazo de Entrega:</strong> 5-7 dias úteis</div>
                <div><strong>Prioridade:</strong> 🟡 Média</div>
                <div><strong>Data Solicitada:</strong> 25/12/2024</div>
              </div>
            </div>

            <!-- Timeline do pedido -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px; color: #333;">📅 Timeline</h3>
              <div style="display: grid; gap: 15px;">

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: white; border-radius: 8px;">
                  <div style="width: 12px; height: 12px; background: #3b82f6; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #333;">Pedido Criado</div>
                    <div style="color: #666; font-size: 14px;">15/12/2024 14:30 por João Silva</div>
                  </div>
                </div>

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: white; border-radius: 8px;">
                  <div style="width: 12px; height: 12px; background: #f59e0b; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #333;">Aguardando Aprovação</div>
                    <div style="color: #666; font-size: 14px;">15/12/2024 14:35 - Status atual</div>
                  </div>
                </div>

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; opacity: 0.5;">
                  <div style="width: 12px; height: 12px; background: #e5e7eb; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #666;">Aprovação</div>
                    <div style="color: #666; font-size: 14px;">Pendente</div>
                  </div>
                </div>

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; opacity: 0.5;">
                  <div style="width: 12px; height: 12px; background: #e5e7eb; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #666;">Enviado ao Fornecedor</div>
                    <div style="color: #666; font-size: 14px;">Pendente</div>
                  </div>
                </div>

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; opacity: 0.5;">
                  <div style="width: 12px; height: 12px; background: #e5e7eb; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #666;">Entregue</div>
                    <div style="color: #666; font-size: 14px;">Pendente</div>
                  </div>
                </div>

              </div>
            </div>

            <!-- Observações -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px; color: #333;">💬 Observações</h3>
              <div style="color: #666; font-style: italic;">Pedido urgente para reposição de estoque. Produto com alta rotatividade.</div>
            </div>

          </div>

          <div style="display: flex; gap: 15px; margin-top: 30px;">
            <button onclick="fecharModalDetalhesPedido()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; cursor: pointer;">
              Fechar
            </button>
            <button onclick="editarPedido(${id})" style="flex: 1; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer;">
              ✏️ Editar
            </button>
            <button onclick="aprovarPedido(${id})" style="flex: 1; padding: 12px; background: #16a34a; color: white; border: none; border-radius: 8px; cursor: pointer;">
              ✅ Aprovar
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    function fecharModalDetalhesPedido() {
      const modal = document.getElementById('modalDetalhesPedido');
      if (modal) modal.remove();
    }

    // Aprovar pedido
    async function aprovarPedido(id) {
      if (confirm(`✅ Confirma a aprovação do Pedido #${id}?\n\nO pedido será enviado ao fornecedor.`)) {
        try {
          console.log(`✅ Aprovando pedido #${id}`);

          // Primeiro, buscar os dados atuais do pedido
          const getPedidoResponse = await fetch(`/api/pedidos/${id}`);
          const getPedidoResult = await getPedidoResponse.json();

          if (!getPedidoResult.success) {
            throw new Error('Erro ao buscar dados do pedido');
          }

          const pedidoAtual = getPedidoResult.data;
          console.log('📋 Dados do pedido atual:', pedidoAtual);

          // Atualizar apenas o status, mantendo todos os outros dados
          const dadosAtualizacao = {
            id_produto: pedidoAtual.id_produto,
            id_plataforma: pedidoAtual.id_plataforma,
            quantidade: pedidoAtual.quantidade,
            status: 'APROVADO',
            data_pedido: pedidoAtual.data_pedido,
            valor_total: pedidoAtual.valor_total,
            fornecedor: pedidoAtual.fornecedor
          };

          console.log('📤 Dados para atualização:', dadosAtualizacao);

          const response = await fetch(`/api/pedidos/${id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(dadosAtualizacao)
          });

          const result = await response.json();

          if (result.success) {
            // Mostrar toast de sucesso
            mostrarToast('✅ Pedido aprovado! Agora você pode marcar como entregue.', 'success');

            // Atualizar o pedido na lista local
            const pedidoIndex = pedidosOriginais.findIndex(p => p.id_pedido == id);
            if (pedidoIndex !== -1) {
              pedidosOriginais[pedidoIndex].status = 'APROVADO';
            }

            // Atualizar lista imediatamente
            aplicarFiltrosCombinados();
          } else {
            throw new Error(result.error || 'Erro ao aprovar pedido');
          }
        } catch (error) {
          console.error('❌ Erro ao aprovar pedido:', error);
          mostrarToast('❌ Erro ao aprovar pedido: ' + error.message, 'error');
        }
      }
    }

    // Cancelar pedido
    async function cancelarPedido(id) {
      if (confirm(`❌ Confirma o cancelamento do Pedido #${id}?\n\nEsta ação não pode ser desfeita.`)) {
        try {
          console.log(`❌ Cancelando pedido #${id}`);

          // Primeiro, buscar os dados atuais do pedido
          const getPedidoResponse = await fetch(`/api/pedidos/${id}`);
          const getPedidoResult = await getPedidoResponse.json();

          if (!getPedidoResult.success) {
            throw new Error('Erro ao buscar dados do pedido');
          }

          const pedidoAtual = getPedidoResult.data;

          // Atualizar apenas o status, mantendo todos os outros dados
          const dadosAtualizacao = {
            id_produto: pedidoAtual.id_produto,
            id_plataforma: pedidoAtual.id_plataforma,
            quantidade: pedidoAtual.quantidade,
            status: 'CANCELADO',
            data_pedido: pedidoAtual.data_pedido,
            valor_total: pedidoAtual.valor_total,
            fornecedor: pedidoAtual.fornecedor
          };

          const response = await fetch(`/api/pedidos/${id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(dadosAtualizacao)
          });

          const result = await response.json();

          if (result.success) {
            // Mostrar toast de sucesso
            mostrarToast('❌ Pedido cancelado com sucesso!', 'warning');

            // Atualizar o pedido na lista local
            const pedidoIndex = pedidosOriginais.findIndex(p => p.id_pedido == id);
            if (pedidoIndex !== -1) {
              pedidosOriginais[pedidoIndex].status = 'CANCELADO';
            }

            // Atualizar lista imediatamente
            aplicarFiltrosCombinados();
          } else {
            throw new Error(result.error || 'Erro ao cancelar pedido');
          }
        } catch (error) {
          console.error('❌ Erro ao cancelar pedido:', error);
          mostrarToast('❌ Erro ao cancelar pedido: ' + error.message, 'error');
        }
      }
    }

    // Marcar pedido como entregue (atualiza estoque)
    async function marcarComoEntregue(id) {
      // Buscar dados do pedido para mostrar informações na confirmação
      try {
        const response = await fetch(`/api/pedidos/${id}`);
        const result = await response.json();

        if (!result.success) {
          throw new Error('Erro ao buscar dados do pedido');
        }

        const pedido = result.data;
        const confirmacao = confirm(
          `📦 CONFIRMAR RECEBIMENTO DO PEDIDO #${id}\n\n` +
          `📦 Produto: ${pedido.produto_nome || 'N/A'}\n` +
          `📊 Quantidade: ${pedido.quantidade} unidades\n` +
          `💰 Valor: R$ ${parseFloat(pedido.valor_total || 0).toFixed(2)}\n\n` +
          `✅ ATENÇÃO: Ao confirmar o recebimento:\n` +
          `• O pedido será marcado como RECEBIDO\n` +
          `• ${pedido.quantidade} unidades serão ADICIONADAS ao estoque\n` +
          `• Esta ação não pode ser desfeita\n\n` +
          `Confirma o recebimento do pedido?`
        );

        if (confirmacao) {
          console.log(`🚚 Marcando pedido #${id} como entregue...`);

          // Preparar dados completos para atualização
          const dadosAtualizacao = {
            id_produto: pedido.id_produto,
            id_plataforma: pedido.id_plataforma,
            quantidade: pedido.quantidade,
            status: 'ENTREGUE',
            data_pedido: pedido.data_pedido,
            valor_total: pedido.valor_total,
            fornecedor: pedido.fornecedor
          };

          console.log('📤 Dados para marcar como entregue:', dadosAtualizacao);

          const updateResponse = await fetch(`/api/pedidos/${id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(dadosAtualizacao)
          });

          const updateResult = await updateResponse.json();

          if (updateResult.success) {
            // Mostrar toast de sucesso detalhado
            mostrarToast(
              `📦 PEDIDO RECEBIDO COM SUCESSO!\n` +
              `📦 ${pedido.quantidade} unidades adicionadas ao estoque`,
              'success'
            );

            // Atualizar o pedido na lista local
            const pedidoIndex = pedidosOriginais.findIndex(p => p.id_pedido == id);
            if (pedidoIndex !== -1) {
              pedidosOriginais[pedidoIndex].status = 'ENTREGUE';
            }

            // Atualizar lista imediatamente
            aplicarFiltrosCombinados();
          } else {
            throw new Error(updateResult.error || 'Erro ao marcar como entregue');
          }
        }
      } catch (error) {
        console.error('❌ Erro ao entregar pedido:', error);
        mostrarToast('❌ Erro ao entregar pedido: ' + error.message, 'error');
      }
    }

    // Editar pedido
    async function editarPedido(id) {
      try {
        console.log(`✏️ Carregando dados do pedido #${id} para edição...`);

        // Buscar dados do pedido
        const response = await fetch(`/api/pedidos/${id}`);
        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || 'Erro ao carregar pedido');
        }

        const pedido = result.data;
        console.log('📋 Dados do pedido:', pedido);

        // Abrir modal de edição
        abrirModalEdicaoPedido(pedido);

      } catch (error) {
        console.error('❌ Erro ao carregar pedido para edição:', error);
        mostrarToast('❌ Erro ao carregar pedido: ' + error.message, 'error');
      }
    }

    // Função para mostrar toast
    function mostrarToast(mensagem, tipo = 'info') {
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
        font-weight: 600;
        max-width: 400px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
      `;

      const cores = {
        success: 'background: #16a34a; color: white;',
        error: 'background: #dc2626; color: white;',
        warning: 'background: #f59e0b; color: white;',
        info: 'background: #3b82f6; color: white;'
      };

      toast.style.cssText += cores[tipo] || cores.info;

      // Permitir quebras de linha na mensagem
      if (mensagem.includes('\n')) {
        toast.innerHTML = mensagem.replace(/\n/g, '<br>');
      } else {
        toast.textContent = mensagem;
      }

      document.body.appendChild(toast);

      setTimeout(() => {
        toast.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => toast.remove(), 300);
      }, 4000);
    }

    // Outras funções
    async function exportarPedidos() {
      try {
        console.log('📊 Exportando pedidos...');

        const response = await fetch('/api/pedidos/exportar');
        const result = await response.json();

        if (result.success) {
          // Criar CSV
          const headers = ['ID', 'Produto', 'Quantidade', 'Valor Total', 'Status', 'Data Criação', 'Fornecedor', 'Observações'];
          const csvContent = [
            headers.join(','),
            ...result.data.map(pedido => [
              pedido.id_pedido,
              `"${pedido.produto_nome || ''}"`,
              pedido.quantidade,
              pedido.valor_total,
              pedido.status,
              new Date(pedido.data_criacao).toLocaleDateString('pt-BR'),
              `"${pedido.fornecedor_nome || ''}"`,
              `"${pedido.observacoes || ''}"`
            ].join(','))
          ].join('\n');

          // Download do arquivo
          const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
          const link = document.createElement('a');
          const url = URL.createObjectURL(blob);
          link.setAttribute('href', url);
          link.setAttribute('download', `pedidos_${new Date().toISOString().split('T')[0]}.csv`);
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          mostrarToast('✅ Relatório de pedidos exportado com sucesso!', 'success');
        } else {
          throw new Error(result.message || 'Erro ao exportar');
        }
      } catch (error) {
        console.error('❌ Erro ao exportar:', error);
        mostrarToast('❌ Erro ao exportar pedidos: ' + error.message, 'error');
      }
    }

    async function atualizarPedidos() {
      try {
        mostrarToast('🔄 Atualizando dados dos pedidos...', 'info');

        const response = await fetch('/api/pedidos/atualizar', {
          method: 'POST'
        });
        const result = await response.json();

        if (result.success) {
          mostrarToast('✅ Pedidos atualizados com sucesso!', 'success');
          setTimeout(() => location.reload(), 1000);
        } else {
          throw new Error(result.message || 'Erro ao atualizar');
        }
      } catch (error) {
        console.error('❌ Erro ao atualizar:', error);
        mostrarToast('❌ Erro ao atualizar pedidos: ' + error.message, 'error');
      }
    }

    // Modal de edição de pedido
    async function abrirModalEdicaoPedido(pedido) {
      console.log('🔄 Abrindo modal de edição para pedido:', pedido);

      // Remover modal existente
      const modalExistente = document.getElementById('modalEdicaoPedido');
      if (modalExistente) modalExistente.remove();

      const modal = document.createElement('div');
      modal.id = 'modalEdicaoPedido';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">✏️ Editar Pedido #${pedido.id_pedido}</h2>
            <button onclick="fecharModalEdicaoPedido()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formEdicaoPedido" onsubmit="salvarEdicaoPedido(event, ${pedido.id_pedido})">
            <div style="display: grid; gap: 20px;">

              <!-- Produto -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">📦 Produto</label>
                <select id="produtoEdicaoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
                  <option value="">Carregando produtos...</option>
                </select>
              </div>

              <!-- Quantidade -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">📊 Quantidade</label>
                <input type="number" id="quantidadeEdicaoInput" value="${pedido.quantidade}" required min="1" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
              </div>

              <!-- Valor Total -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">💰 Valor Total (R$)</label>
                <input type="number" id="valorEdicaoInput" value="${pedido.valor_total}" required min="0" step="0.01" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
              </div>

              <!-- Status -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">📋 Status</label>
                <select id="statusEdicaoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
                  <option value="PENDENTE" ${pedido.status === 'PENDENTE' ? 'selected' : ''}>⏳ Pendente</option>
                  <option value="APROVADO" ${pedido.status === 'APROVADO' ? 'selected' : ''}>✅ Aprovado</option>
                  <option value="ENTREGUE" ${pedido.status === 'ENTREGUE' ? 'selected' : ''}>📦 Recebido</option>
                  <option value="CANCELADO" ${pedido.status === 'CANCELADO' ? 'selected' : ''}>❌ Cancelado</option>
                </select>
              </div>

              <!-- Fornecedor -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">🏭 Fornecedor</label>
                <input type="text" id="fornecedorEdicaoInput" value="${pedido.fornecedor || ''}" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
              </div>

              <!-- Botões -->
              <div style="display: flex; gap: 15px; margin-top: 20px;">
                <button type="button" onclick="fecharModalEdicaoPedido()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 16px;">
                  Cancelar
                </button>
                <button type="submit" style="flex: 1; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 16px;">
                  💾 Salvar Alterações
                </button>
              </div>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);

      // Carregar produtos
      await carregarProdutosParaEdicao(pedido.id_produto);
    }

    function fecharModalEdicaoPedido() {
      const modal = document.getElementById('modalEdicaoPedido');
      if (modal) modal.remove();
    }

    // Carregar produtos para edição
    async function carregarProdutosParaEdicao(produtoSelecionado) {
      try {
        const response = await fetch('/api/produtos');
        const result = await response.json();

        if (result.success) {
          const select = document.getElementById('produtoEdicaoInput');
          select.innerHTML = '<option value="">Selecione um produto</option>';

          result.data.forEach(produto => {
            const option = document.createElement('option');
            option.value = produto.id_produto;
            option.textContent = `${produto.nome} (${produto.sku}) - R$ ${parseFloat(produto.preco || 0).toFixed(2)}`;
            if (produto.id_produto == produtoSelecionado) {
              option.selected = true;
            }
            select.appendChild(option);
          });
        }
      } catch (error) {
        console.error('❌ Erro ao carregar produtos:', error);
      }
    }

    // Salvar edição do pedido
    async function salvarEdicaoPedido(event, idPedido) {
      event.preventDefault();

      try {
        console.log(`💾 Salvando alterações do pedido #${idPedido}...`);

        const dadosEdicao = {
          id_produto: parseInt(document.getElementById('produtoEdicaoInput').value),
          quantidade: parseInt(document.getElementById('quantidadeEdicaoInput').value),
          valor_total: parseFloat(document.getElementById('valorEdicaoInput').value),
          status: document.getElementById('statusEdicaoInput').value,
          fornecedor: document.getElementById('fornecedorEdicaoInput').value
        };

        console.log('📤 Dados para atualização:', dadosEdicao);

        const response = await fetch(`/api/pedidos/${idPedido}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(dadosEdicao)
        });

        const result = await response.json();

        if (result.success) {
          mostrarToast('✅ Pedido atualizado com sucesso!', 'success');
          fecharModalEdicaoPedido();

          // Atualizar lista
          setTimeout(() => {
            aplicarFiltrosCombinados();
          }, 1000);
        } else {
          throw new Error(result.error || 'Erro ao atualizar pedido');
        }
      } catch (error) {
        console.error('❌ Erro ao salvar edição:', error);
        mostrarToast('❌ Erro ao salvar: ' + error.message, 'error');
      }
    }

    // Excluir pedido
    async function excluirPedido(id) {
      if (confirm(`🗑️ Confirma a exclusão do Pedido #${id}?\n\n⚠️ Esta ação não pode ser desfeita!`)) {
        try {
          console.log(`🗑️ Excluindo pedido #${id}...`);

          const response = await fetch(`/api/pedidos/${id}`, {
            method: 'DELETE'
          });

          const result = await response.json();

          if (result.success) {
            mostrarToast('🗑️ Pedido excluído com sucesso!', 'warning');

            // Remover o pedido da lista local
            pedidosOriginais = pedidosOriginais.filter(p => p.id_pedido != id);

            // Atualizar lista imediatamente
            aplicarFiltrosCombinados();
          } else {
            throw new Error(result.error || 'Erro ao excluir pedido');
          }
        } catch (error) {
          console.error('❌ Erro ao excluir pedido:', error);
          mostrarToast('❌ Erro ao excluir: ' + error.message, 'error');
        }
      }
    }

    function abrirFiltroAvancadoPedidos() {
      alert('🔍 Filtros avançados para pedidos\n\nModal com filtros por fornecedor, status, prioridade, etc.');
    }

    // ===== FUNÇÃO TOAST =====
    function mostrarToast(mensagem, tipo = 'info') {
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: ${tipo === 'success' ? '#16a34a' : tipo === 'error' ? '#dc2626' : '#3b82f6'};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        font-weight: 600;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        max-width: 400px;
        word-wrap: break-word;
      `;
      toast.textContent = mensagem;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 4000);
    }

    // ===== INICIALIZAÇÃO =====
    // Aplicar filtro padrão quando a página carregar
    document.addEventListener('DOMContentLoaded', function() {
      console.log('🔄 Inicializando sistema de pedidos...');
      console.log('📊 Dados originais:', pedidosOriginais);
      console.log('📊 Quantidade de pedidos:', pedidosOriginais ? pedidosOriginais.length : 'undefined');

      // Configurar opções específicas para pedidos
      inicializarFiltros({
        status: [
          { value: 'pendente', label: '⏳ Pendente' },
          { value: 'aprovado', label: '✅ Aprovado' },
          { value: 'cancelado', label: '❌ Cancelado' },
          { value: 'processando', label: '⚙️ Processando' },
          { value: 'entregue', label: '📦 Entregue' }
        ],
        categorias: [
          { value: 'urgente', label: 'Urgente' },
          { value: 'normal', label: 'Normal' },
          { value: 'baixa', label: 'Baixa Prioridade' }
        ]
      });

      // Carregar fornecedores para o filtro
      carregarFornecedores();

      // Aguardar um pouco para garantir que tudo foi carregado
      setTimeout(() => {
        console.log('🎯 Aplicando filtros padrão...');

        // Garantir que o botão "Todos" esteja ativo
        document.querySelectorAll('[id^="filtro"][id*="Pedidos"]').forEach(btn => {
          btn.className = 'btn btn-secondary';
        });
        const botaoTodos = document.getElementById('filtroTodosPedidos');
        if (botaoTodos) {
          botaoTodos.className = 'btn btn-primary';
        }

        aplicarFiltrosCombinados();
      }, 100);
    });

    // Função para aplicar filtros (chamada pelo componente unificado)
    function aplicarFiltros() {
      console.log('🔍 Aplicando filtros unificados:', filtrosAplicados);

      let pedidosFiltrados = [...pedidosOriginais];

      // Aplicar filtro de data
      if (filtrosAplicados.data) {
        const dataInicio = new Date(filtrosAplicados.data.inicio);
        const dataFim = new Date(filtrosAplicados.data.fim);

        pedidosFiltrados = pedidosFiltrados.filter(pedido => {
          const dataPedido = new Date(pedido.data_pedido);
          return dataPedido >= dataInicio && dataPedido <= dataFim;
        });
      }

      // Aplicar filtro de status
      if (filtrosAplicados.status.length > 0) {
        pedidosFiltrados = pedidosFiltrados.filter(pedido => {
          const status = (pedido.status || 'pendente').toLowerCase();
          return filtrosAplicados.status.includes(status);
        });
      }

      // Aplicar filtro de valor
      if (filtrosAplicados.valor.min !== null || filtrosAplicados.valor.max !== null) {
        pedidosFiltrados = pedidosFiltrados.filter(pedido => {
          const valor = parseFloat(pedido.valor_total || 0);
          const min = filtrosAplicados.valor.min;
          const max = filtrosAplicados.valor.max;

          if (min !== null && valor < min) return false;
          if (max !== null && valor > max) return false;
          return true;
        });
      }

      // Aplicar filtro de categoria (prioridade)
      if (filtrosAplicados.categoria.length > 0) {
        pedidosFiltrados = pedidosFiltrados.filter(pedido => {
          const prioridade = (pedido.prioridade || 'normal').toLowerCase();
          return filtrosAplicados.categoria.includes(prioridade);
        });
      }

      console.log(`📋 Pedidos filtrados: ${pedidosFiltrados.length} de ${pedidosOriginais.length}`);

      // Atualizar a exibição
      atualizarListaPedidos(pedidosFiltrados);
      atualizarGraficoPedidos(pedidosFiltrados);
    }

    console.log('📋 Sistema de pedidos carregado com funcionalidades completas');

    // ===== FUNÇÃO PARA CRIAR PEDIDOS DE TESTE COM DATAS VARIADAS =====
    async function criarPedidosTeste() {
      if (!confirm('🧪 Criar pedidos de teste com datas variadas?\n\nIsso criará 10 pedidos com diferentes datas para testar os filtros.')) {
        return;
      }

      const hoje = new Date();
      const pedidosTeste = [
        // Hoje
        { dias: 0, produto: 1, quantidade: 5, fornecedor: 'Fornecedor A', prioridade: 'alta' },
        { dias: 0, produto: 2, quantidade: 3, fornecedor: 'Fornecedor B', prioridade: 'media' },

        // Esta semana
        { dias: -2, produto: 3, quantidade: 8, fornecedor: 'Fornecedor C', prioridade: 'baixa' },
        { dias: -5, produto: 1, quantidade: 12, fornecedor: 'Fornecedor A', prioridade: 'alta' },

        // Este mês
        { dias: -15, produto: 2, quantidade: 6, fornecedor: 'Fornecedor B', prioridade: 'media' },
        { dias: -20, produto: 4, quantidade: 4, fornecedor: 'Fornecedor D', prioridade: 'urgente' },

        // Últimos 6 meses
        { dias: -60, produto: 1, quantidade: 15, fornecedor: 'Fornecedor A', prioridade: 'media' },
        { dias: -120, produto: 3, quantidade: 10, fornecedor: 'Fornecedor C', prioridade: 'baixa' },

        // Este ano
        { dias: -200, produto: 2, quantidade: 7, fornecedor: 'Fornecedor B', prioridade: 'alta' },
        { dias: -300, produto: 4, quantidade: 9, fornecedor: 'Fornecedor D', prioridade: 'media' }
      ];

      const precos = { 1: 89.90, 2: 75.50, 3: 120.00, 4: 95.00 };
      const statusOptions = ['PENDENTE', 'APROVADO', 'CANCELADO'];

      for (let i = 0; i < pedidosTeste.length; i++) {
        const teste = pedidosTeste[i];
        const dataPedido = new Date(hoje.getTime() + teste.dias * 24 * 60 * 60 * 1000);
        const status = statusOptions[Math.floor(Math.random() * statusOptions.length)];

        const formData = {
          id_produto: teste.produto,
          quantidade: teste.quantidade,
          fornecedor: teste.fornecedor,
          prioridade: teste.prioridade,
          data_entrega: new Date(dataPedido.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          observacoes: `Pedido de teste ${i + 1} - ${teste.dias === 0 ? 'Hoje' : teste.dias > -7 ? 'Esta semana' : teste.dias > -30 ? 'Este mês' : teste.dias > -180 ? 'Últimos 6 meses' : 'Este ano'}`,
          id_plataforma: 1,
          status: status,
          data_pedido: dataPedido.toISOString().split('T')[0],
          valor_total: precos[teste.produto] * teste.quantidade
        };

        try {
          const response = await fetch('/api/pedidos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
          });

          const result = await response.json();
          if (result.success) {
            console.log(`✅ Pedido teste ${i + 1} criado:`, formData.data_pedido);
          } else {
            console.error(`❌ Erro no pedido teste ${i + 1}:`, result.error);
          }
        } catch (error) {
          console.error(`❌ Erro de conexão no pedido teste ${i + 1}:`, error);
        }

        // Pequena pausa entre criações
        await new Promise(resolve => setTimeout(resolve, 200));
      }

      alert('✅ Pedidos de teste criados!\n\nRecarregando a página para mostrar os novos dados...');
      setTimeout(() => window.location.reload(), 1000);
    }

    // ===== IMPORTAÇÃO EXCEL PARA PEDIDOS =====
    function baixarTemplatePedidos() {
      console.log('📄 Criando template Excel para pedidos...');

      // Criar dados do template
      const templateData = [
        ['produto_nome', 'quantidade', 'valor_unitario', 'fornecedor', 'prioridade', 'observacoes'],
        ['Kit PCR COVID-19', '50', '45.00', 'BioTech Suprimentos', 'alta', 'Pedido urgente para reposição'],
        ['Teste Rápido Antígeno', '100', '12.00', 'MedSupply Ltda', 'media', 'Estoque de segurança'],
        ['Swab Nasofaríngeo', '200', '2.50', 'Supplies Medical', 'baixa', 'Reposição mensal'],
        ['Reagente PCR', '25', '75.00', 'BioTech Suprimentos', 'alta', 'Para laboratório principal']
      ];

      // Converter para CSV
      const csvContent = templateData.map(row =>
        row.map(cell => `"${cell}"`).join(',')
      ).join('\n');

      // Criar e baixar arquivo
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'template_pedidos.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      // Feedback visual
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed; top: 100px; right: 20px; background: #3b82f6; color: white;
        padding: 15px 20px; border-radius: 8px; z-index: 1000; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      `;
      toast.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 5px;">📄 Template baixado!</div>
        <div style="font-size: 14px;">Arquivo CSV com exemplos de pedidos criado</div>
      `;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 4000);
    }

    function importarPedidosExcel() {
      const modal = document.createElement('div');
      modal.id = 'modalImportarPedidos';
      modal.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0,0,0,0.5); display: flex; align-items: center;
        justify-content: center; z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">📥 Importar Pedidos via Excel/CSV</h2>
            <button onclick="fecharModalImportarPedidos()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <div style="margin-bottom: 20px; padding: 15px; background: #e3f2fd; border-radius: 8px; border-left: 4px solid #2196f3;">
            <div style="font-weight: bold; color: #1976d2; margin-bottom: 8px;">📋 Instruções:</div>
            <ul style="margin: 0; padding-left: 20px; color: #1976d2; font-size: 14px;">
              <li>Baixe o template CSV clicando em "📄 Template Excel"</li>
              <li>Preencha as colunas: <strong>produto_nome, quantidade, valor_unitario, fornecedor, prioridade, observacoes</strong></li>
              <li>Prioridade: alta, media, baixa</li>
              <li>Salve como arquivo CSV (separado por vírgulas)</li>
              <li>Selecione o arquivo abaixo para importar</li>
            </ul>
          </div>

          <div style="margin-bottom: 20px;">
            <label style="display: block; margin-bottom: 10px; font-weight: 600; color: #333;">📁 Selecionar Arquivo CSV:</label>
            <input type="file" id="arquivoPedidos" accept=".csv,.xlsx,.xls" style="width: 100%; padding: 12px; border: 2px dashed #ddd; border-radius: 8px; background: #f9f9f9;">
          </div>

          <div id="previewPedidos" style="display: none; margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
            <div style="font-weight: bold; margin-bottom: 10px;">👀 Preview dos Dados:</div>
            <div id="dadosPreviewPedidos" style="max-height: 200px; overflow-y: auto; font-family: monospace; font-size: 12px;"></div>
          </div>

          <div style="display: flex; gap: 15px;">
            <button type="button" onclick="fecharModalImportarPedidos()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
              Cancelar
            </button>
            <button type="button" onclick="processarImportacaoPedidos()" style="flex: 1; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
              📥 Importar Pedidos
            </button>
          </div>

          <div id="progressoPedidos" style="display: none; margin-top: 20px;">
            <div style="background: #f0f0f0; border-radius: 8px; overflow: hidden;">
              <div id="barraProgressoPedidos" style="height: 10px; background: #3b82f6; width: 0%; transition: width 0.3s ease;"></div>
            </div>
            <div id="statusImportacaoPedidos" style="text-align: center; margin-top: 10px; font-weight: 600; color: #333;"></div>
          </div>
        </div>
      `;

      document.body.appendChild(modal);

      // Adicionar listener para preview
      document.getElementById('arquivoPedidos').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          lerArquivoCSVPedidos(file);
        }
      });
    }

    function fecharModalImportarPedidos() {
      const modal = document.getElementById('modalImportarPedidos');
      if (modal) modal.remove();
    }

    function lerArquivoCSVPedidos(file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const csv = e.target.result;
        const linhas = csv.split('\n').filter(linha => linha.trim());

        if (linhas.length < 2) {
          alert('❌ Arquivo deve ter pelo menos 2 linhas (cabeçalho + dados)');
          return;
        }

        // Processar dados
        const cabecalho = linhas[0].split(',').map(col => col.replace(/"/g, '').trim());
        const dados = linhas.slice(1).map(linha => {
          const valores = linha.split(',').map(val => val.replace(/"/g, '').trim());
          const pedido = {};
          cabecalho.forEach((col, index) => {
            pedido[col] = valores[index] || '';
          });
          return pedido;
        });

        // Mostrar preview
        mostrarPreviewPedidos(dados);

        // Armazenar dados para importação
        window.dadosImportacaoPedidos = dados;
      };
      reader.readAsText(file);
    }

    function mostrarPreviewPedidos(dados) {
      const preview = document.getElementById('previewPedidos');
      const dadosDiv = document.getElementById('dadosPreviewPedidos');

      if (dados.length === 0) {
        dadosDiv.innerHTML = '<div style="color: #dc3545;">Nenhum dado encontrado</div>';
        preview.style.display = 'block';
        return;
      }

      const html = `
        <div style="font-weight: bold; margin-bottom: 10px; color: #3b82f6;">
          ✅ ${dados.length} pedidos encontrados
        </div>
        <table style="width: 100%; border-collapse: collapse; font-size: 11px;">
          <thead>
            <tr style="background: #f1f1f1;">
              <th style="border: 1px solid #ddd; padding: 4px;">Produto</th>
              <th style="border: 1px solid #ddd; padding: 4px;">Qtd</th>
              <th style="border: 1px solid #ddd; padding: 4px;">Valor Unit.</th>
              <th style="border: 1px solid #ddd; padding: 4px;">Fornecedor</th>
              <th style="border: 1px solid #ddd; padding: 4px;">Prioridade</th>
            </tr>
          </thead>
          <tbody>
            ${dados.slice(0, 5).map(pedido => `
              <tr>
                <td style="border: 1px solid #ddd; padding: 4px;">${pedido.produto_nome || '-'}</td>
                <td style="border: 1px solid #ddd; padding: 4px;">${pedido.quantidade || '0'}</td>
                <td style="border: 1px solid #ddd; padding: 4px;">R$ ${pedido.valor_unitario || '0'}</td>
                <td style="border: 1px solid #ddd; padding: 4px;">${pedido.fornecedor || '-'}</td>
                <td style="border: 1px solid #ddd; padding: 4px;">${pedido.prioridade || 'media'}</td>
              </tr>
            `).join('')}
            ${dados.length > 5 ? `<tr><td colspan="5" style="text-align: center; padding: 8px; color: #666;">... e mais ${dados.length - 5} pedidos</td></tr>` : ''}
          </tbody>
        </table>
      `;

      dadosDiv.innerHTML = html;
      preview.style.display = 'block';
    }

    async function processarImportacaoPedidos() {
      if (!window.dadosImportacaoPedidos || window.dadosImportacaoPedidos.length === 0) {
        alert('❌ Nenhum dado para importar. Selecione um arquivo primeiro.');
        return;
      }

      const dados = window.dadosImportacaoPedidos;
      const progressoDiv = document.getElementById('progressoPedidos');
      const barraProgresso = document.getElementById('barraProgressoPedidos');
      const statusImportacao = document.getElementById('statusImportacaoPedidos');

      let sucessos = 0;
      let erros = 0;
      const errosDetalhados = [];

      try {
        progressoDiv.style.display = 'block';
        statusImportacao.textContent = 'Iniciando importação...';

        // Processar cada pedido
        for (let i = 0; i < dados.length; i++) {
          const pedido = dados[i];

          // Atualizar progresso
          const progresso = ((i + 1) / dados.length) * 100;
          barraProgresso.style.width = progresso + '%';
          statusImportacao.textContent = `Importando pedido ${i + 1} de ${dados.length}...`;

          try {
            // Validar dados obrigatórios
            if (!pedido.produto_nome || !pedido.quantidade || !pedido.valor_unitario) {
              erros++;
              errosDetalhados.push(`Linha ${i + 2}: Campos obrigatórios faltando (produto_nome, quantidade, valor_unitario)`);
              continue;
            }

            // Buscar ID do produto pelo nome (simulado - usar produto padrão)
            // Em produção, seria necessário buscar na API de produtos
            const id_produto = 1; // Produto padrão para importação

            const pedidoData = {
              id_produto: id_produto,
              id_plataforma: 1, // Plataforma padrão
              quantidade: parseInt(pedido.quantidade) || 1,
              valor_total: (parseInt(pedido.quantidade) || 1) * (parseFloat(pedido.valor_unitario) || 0),
              fornecedor: pedido.fornecedor || 'PCR Labor',
              prioridade: pedido.prioridade || 'media',
              observacoes: pedido.observacoes || '',
              status: 'PENDENTE',
              data_pedido: new Date().toISOString().split('T')[0]
            };

            const response = await fetch('/api/pedidos', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(pedidoData)
            });

            const result = await response.json();

            if (result.success) {
              sucessos++;
            } else {
              erros++;
              errosDetalhados.push(`Linha ${i + 2}: ${result.error || 'Erro desconhecido'}`);
            }
          } catch (error) {
            erros++;
            errosDetalhados.push(`Linha ${i + 2}: Erro de conexão - ${error.message}`);
          }

          // Pequena pausa para não sobrecarregar
          await new Promise(resolve => setTimeout(resolve, 50));
        }

        // Mostrar resultado
        mostrarResultadoImportacaoPedidos(sucessos, erros, errosDetalhados);

      } catch (error) {
        console.error('❌ Erro na importação:', error);
        statusImportacao.textContent = '❌ Erro na importação';
        barraProgresso.style.background = '#dc3545';
        alert('❌ Erro na importação: ' + error.message);
      }
    }

    function mostrarResultadoImportacaoPedidos(sucessos, erros, errosDetalhados) {
      const resultadoModal = document.createElement('div');
      resultadoModal.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0,0,0,0.5); display: flex; align-items: center;
        justify-content: center; z-index: 1001;
      `;

      resultadoModal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 80vh; overflow-y: auto;">
          <h2 style="margin: 0 0 20px 0; color: #333;">📊 Resultado da Importação de Pedidos</h2>

          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
            <div style="text-align: center; padding: 20px; background: #dbeafe; border-radius: 8px;">
              <div style="font-size: 32px; font-weight: bold; color: #3b82f6;">${sucessos}</div>
              <div style="color: #1e40af;">Pedidos importados</div>
            </div>
            <div style="text-align: center; padding: 20px; background: #fee2e2; border-radius: 8px;">
              <div style="font-size: 32px; font-weight: bold; color: #dc2626;">${erros}</div>
              <div style="color: #991b1b;">Erros encontrados</div>
            </div>
          </div>

          ${erros > 0 ? `
            <div style="margin-bottom: 20px;">
              <h4 style="color: #dc2626; margin-bottom: 10px;">❌ Detalhes dos Erros:</h4>
              <div style="background: #f8f9fa; border-radius: 8px; padding: 15px; max-height: 200px; overflow-y: auto;">
                ${errosDetalhados.map(erro => `<div style="margin-bottom: 5px; font-size: 14px;">${erro}</div>`).join('')}
              </div>
            </div>
          ` : ''}

          <div style="text-align: center;">
            <button onclick="this.parentElement.parentElement.parentElement.remove(); fecharModalImportarPedidos(); location.reload();" style="padding: 12px 30px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
              ✅ Concluir
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(resultadoModal);
    }

    // Adicionar botão de teste (apenas em desenvolvimento)
    if (window.location.hostname === 'localhost') {
      const botaoTeste = document.createElement('button');
      botaoTeste.textContent = '🧪 Criar Pedidos Teste';
      botaoTeste.className = 'btn btn-secondary';
      botaoTeste.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 1000;';
      botaoTeste.onclick = criarPedidosTeste;
      document.body.appendChild(botaoTeste);
    }
  </script>
</body>
</html>
