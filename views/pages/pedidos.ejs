<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <link rel="stylesheet" href="/css/estilos.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <!-- Header horizontal (Topo) com logo e menu -->
  <%- include('../components/cabecalho') %>

  <!-- Layout principal -->
  <div class="main-layout">
    <!-- √Årea central para o conte√∫do principal -->
    <main class="content-area">
      <!-- 6Ô∏è‚É£ Tela de Pedidos -->
      <h1 class="page-title">Pedidos</h1>

      <!-- Cards de m√©tricas r√°pidas - DIN√ÇMICOS -->
      <div id="cardsMetricasPedidos" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
        <div class="summary-card">
          <div class="card-icon" style="background: #3b82f6;">üìã</div>
          <div class="card-title">Total de Pedidos</div>
          <div class="card-value" id="totalPedidosCard"><%= pedidos ? pedidos.length : 0 %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #f59e0b;">‚è≥</div>
          <div class="card-title">Pendentes</div>
          <div class="card-value" id="pedidosPendentesCard"><%= pedidos ? pedidos.filter(p => p.status === 'PENDENTE').length : 0 %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #16a34a;">‚úÖ</div>
          <div class="card-title">Aprovados</div>
          <div class="card-value" id="pedidosAprovadosCard"><%= pedidos ? pedidos.filter(p => p.status === 'APROVADO').length : 0 %></div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #8b5cf6;">üí∞</div>
          <div class="card-title">Valor Total</div>
          <div class="card-value" id="valorTotalCard">R$ <%= pedidos ? pedidos.reduce((total, p) => total + parseFloat(p.valor_total || 0), 0).toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".") : '0' %></div>
        </div>
      </div>



      <!-- Proje√ß√£o de compra: Gr√°fico de linha -->
      <div class="content-section">
        <div class="section-header">
          <h3 class="section-title">üìà Proje√ß√£o de Compra</h3>
        </div>
        <div class="section-content">
          <div class="chart-container">
            <canvas id="projecaoChart"></canvas>
          </div>
        </div>
      </div>

      <!-- Filtros entre gr√°fico e lista -->
      <div style="
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
      ">
        <div style="
          display: flex;
          justify-content: space-between;
          align-items: center;
          flex-wrap: wrap;
          gap: 15px;
        ">
          <div style="
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
          ">
            <!-- Filtros de Per√≠odo (ordem decrescente) -->
            <div style="display: flex; gap: 8px;">
              <button id="filtroAnoPedidos" class="btn btn-secondary" onclick="filtrarPeriodo('ano')">Este ano</button>
              <button id="filtro6MesesPedidos" class="btn btn-secondary" onclick="filtrarPeriodo('6meses')">√öltimos 6 meses</button>
              <button id="filtroMesPedidos" class="btn btn-primary" onclick="filtrarPeriodo('mes')">Este m√™s</button>
              <button id="filtroSemanaPedidos" class="btn btn-secondary" onclick="filtrarPeriodo('semana')">√öltimos 7 dias</button>
              <button id="filtroHojePedidos" class="btn btn-secondary" onclick="filtrarPeriodo('hoje')">Hoje</button>
              <button id="filtroTodosPedidos" class="btn btn-secondary" onclick="filtrarPeriodo('todos')">Todos</button>
            </div>

            <!-- Separador -->
            <div style="
              border-left: 2px solid #e0e0e0;
              height: 40px;
            "></div>

            <!-- Filtros de Status -->
            <div style="display: flex; gap: 8px;">
              <button id="filtroTodosStatus" class="btn btn-primary" onclick="filtrarStatus('todos')">üìã Todos</button>
              <button id="filtroPendentes" class="btn btn-secondary" onclick="filtrarStatus('pendente')">‚è≥ Pendentes</button>
              <button id="filtroAprovados" class="btn btn-secondary" onclick="filtrarStatus('aprovado')">‚úÖ Aprovados</button>
              <button id="filtroCancelados" class="btn btn-secondary" onclick="filtrarStatus('cancelado')">‚ùå Cancelados</button>
            </div>

            <!-- Separador -->
            <div style="
              border-left: 2px solid #e0e0e0;
              height: 40px;
            "></div>

            <!-- Filtro de Fornecedores -->
            <div style="position: relative;">
              <button id="filtroFornecedores" class="btn btn-secondary" onclick="toggleFiltroFornecedores()" style="display: flex; align-items: center; gap: 8px;">
                üè≠ Fornecedores
                <span style="font-size: 12px;">‚ñº</span>
              </button>
              <div id="dropdownFornecedores" style="
                display: none;
                position: absolute;
                top: 100%;
                left: 0;
                background: white;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                z-index: 1000;
                min-width: 200px;
                margin-top: 5px;
              ">
                <div style="padding: 10px; border-bottom: 1px solid #e0e0e0; font-weight: 600; color: #333;">
                  Filtrar por Fornecedor
                </div>
                <div id="listaFornecedoresFiltro" style="max-height: 200px; overflow-y: auto;">
                  <!-- Lista ser√° carregada dinamicamente -->
                </div>
              </div>
            </div>
          </div>

          <!-- A√ß√µes -->
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-secondary" onclick="abrirFiltroAvancadoPedidos()">üîç Filtros</button>
            <button class="btn btn-secondary" onclick="atualizarPedidos()">üîÑ Atualizar</button>
          </div>
        </div>
      </div>

      <!-- Lista de Pedidos com Design Melhorado -->
      <div class="content-section">
        <div class="section-header">
          <h3 class="section-title">üìã Lista de Pedidos</h3>
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-secondary" onclick="exportarPedidos()">üìÑ Exportar</button>
            <button class="btn btn-primary" onclick="novoPedido()">+ Novo Pedido</button>
          </div>
        </div>
        <div class="section-content">
          <% if (pedidos && pedidos.length > 0) { %>
            <div style="display: grid; gap: 15px;">
              <% pedidos.forEach((pedido, index) => { %>
                <div style="background: #f8f9fa; border: 1px solid #e0e0e0; border-radius: 12px; padding: 20px; transition: all 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.1)'">
                  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <div style="display: flex; align-items: center; gap: 15px;">
                      <div style="width: 50px; height: 50px; border-radius: 12px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); display: flex; align-items: center; justify-content: center; color: white; font-size: 16px; font-weight: bold;">
                        #<%= index + 1 %>
                      </div>
                      <div>
                        <h4 style="margin: 0; color: #333; font-size: 16px;"><%= pedido.produto_nome || 'Produto N/A' %></h4>
                        <p style="margin: 0; color: #666; font-size: 14px;">
                          <%= new Date(pedido.data_pedido).toLocaleDateString('pt-BR') %> ‚Ä¢
                          <%= pedido.fornecedor || 'PCR Labor' %>
                        </p>
                      </div>
                    </div>
                    <div style="text-align: right;">
                      <div style="font-size: 20px; font-weight: bold; color: #3b82f6; margin-bottom: 5px;">
                        R$ <%= parseFloat(pedido.valor_total || 0).toFixed(2) %>
                      </div>
                      <div style="display: flex; align-items: center; gap: 10px;">
                        <% if (pedido.status === 'PENDENTE') { %>
                          <span style="background: #fef3c7; color: #d97706; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                            ‚è≥ Pendente
                          </span>
                        <% } else if (pedido.status === 'APROVADO') { %>
                          <span style="background: #dcfce7; color: #16a34a; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                            ‚úÖ Aprovado
                          </span>
                        <% } else { %>
                          <span style="background: #fee2e2; color: #dc2626; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                            ‚ùå Cancelado
                          </span>
                        <% } %>
                        <button class="btn btn-secondary" onclick="verDetalhesPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 6px 12px; font-size: 12px;">
                          üëÅÔ∏è Ver
                        </button>
                      </div>
                    </div>
                  </div>

                  <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; padding-top: 15px; border-top: 1px solid #e0e0e0;">
                    <div>
                      <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Quantidade</label>
                      <div style="font-size: 16px; font-weight: bold; color: #333;"><%= pedido.quantidade %> unidades</div>
                    </div>
                    <div>
                      <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Valor Unit√°rio</label>
                      <div style="font-size: 16px; font-weight: bold; color: #333;">R$ <%= (parseFloat(pedido.valor_total || 0) / pedido.quantidade).toFixed(2) %></div>
                    </div>
                    <div>
                      <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Prioridade</label>
                      <div style="font-size: 16px; font-weight: bold; color: <%= pedido.prioridade === 'alta' || pedido.prioridade === 'urgente' ? '#ef4444' : pedido.prioridade === 'media' ? '#f59e0b' : '#16a34a' %>;">
                        <%= pedido.prioridade ? pedido.prioridade.toUpperCase() : 'M√âDIA' %>
                      </div>
                    </div>
                    <div>
                      <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">A√ß√µes</label>
                      <div style="display: flex; gap: 5px;">
                        <% if (pedido.status === 'PENDENTE') { %>
                          <button class="btn btn-primary" onclick="aprovarPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px;">‚úÖ Aprovar</button>
                          <button class="btn btn-secondary" onclick="cancelarPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px;">‚ùå Cancelar</button>
                        <% } else { %>
                          <button class="btn btn-secondary" onclick="editarPedido(<%= pedido.id_pedido || index + 1 %>)" style="padding: 4px 8px; font-size: 11px;">‚úèÔ∏è Editar</button>
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>

            <!-- Pagina√ß√£o -->
            <div style="display: flex; justify-content: center; align-items: center; gap: 15px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
              <button class="btn btn-secondary" onclick="paginaAnteriorPedidos()" style="padding: 8px 16px;">
                ‚Üê Anterior
              </button>
              <span style="color: #666; font-size: 14px;">
                P√°gina 1 de 1 ‚Ä¢ <%= pedidos.length %> pedidos
              </span>
              <button class="btn btn-secondary" onclick="proximaPaginaPedidos()" style="padding: 8px 16px;">
                Pr√≥xima ‚Üí
              </button>
            </div>
          <% } else { %>
            <div style="text-align: center; color: #666; padding: 60px 20px;">
              <div style="font-size: 64px; margin-bottom: 20px;">üìã</div>
              <h3 style="margin: 0 0 10px; color: #333;">Nenhum pedido encontrado</h3>
              <p style="margin: 0 0 30px;">Seus pedidos aparecer√£o aqui quando criados</p>
              <button class="btn btn-primary" onclick="novoPedido()">
                + Criar Primeiro Pedido
              </button>
            </div>
          <% } %>
        </div>
      </div>

    </main>

    <!-- Lateral direita com Tarefas, Calend√°rio e Pergunte para IA -->
    <%- include('../components/barraLateral') %>
  </div>

  <script>
    // ===== CONFIGURA√á√ÉO DO GR√ÅFICO DE PROJE√á√ÉO =====

    /**
     * Gr√°fico de proje√ß√£o de compras - Linha temporal
     * Mostra estimativas de compras futuras baseadas em dados hist√≥ricos
     */
    const projecaoCtx = document.getElementById('projecaoChart').getContext('2d');

    // Armazenar refer√™ncia global do gr√°fico para atualiza√ß√µes din√¢micas
    window.projecaoChart = new Chart(projecaoCtx, {
      type: 'line',
      data: {
        labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul'],
        datasets: [{
          label: 'Proje√ß√£o de Compras (R$)',
          data: [8000, 12000, 6000, 15000, 18000, 14000, 20000],
          borderColor: '#3b82f6',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          borderWidth: 3,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: '#f0f0f0'
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });

    // ===== FUNCIONALIDADES DE PEDIDOS =====

    // ===== FILTROS FUNCIONAIS COMPLETOS =====
    let filtroAtualPedidos = 'mes';
    let statusAtualPedidos = 'todos';
    let fornecedorAtualPedidos = 'todos';
    let pedidosOriginais = <%- JSON.stringify(pedidos) %>;
    let fornecedoresDisponiveis = [];

    function filtrarPeriodo(periodo) {
      filtroAtualPedidos = periodo;

      // Atualizar bot√µes visuais
      document.querySelectorAll('[id^="filtro"][id*="Pedidos"]').forEach(btn => {
        btn.className = 'btn btn-secondary';
      });

      const botaoMap = {
        'mes': 'filtroMesPedidos',
        'semana': 'filtroSemanaPedidos',
        'hoje': 'filtroHojePedidos',
        'todos': 'filtroTodosPedidos',
        'ano': 'filtroAnoPedidos',
        '6meses': 'filtro6MesesPedidos'
      };

      if (botaoMap[periodo]) {
        document.getElementById(botaoMap[periodo]).className = 'btn btn-primary';
      }

      // Aplicar filtros combinados
      aplicarFiltrosCombinados();

      // Feedback visual
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #3b82f6;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
      `;
      toast.textContent = `‚úÖ ${pedidosFiltrados.length} pedidos encontrados - ${periodo === 'mes' ? 'Este m√™s' : periodo === 'semana' ? '√öltimos 7 dias' : periodo === 'hoje' ? 'Hoje' : 'Todos'}`;
      document.body.appendChild(toast);

      setTimeout(() => toast.remove(), 3000);
    }

    function filtrarStatus(status) {
      statusAtualPedidos = status;

      // Atualizar bot√µes visuais de status
      document.querySelectorAll('[id^="filtro"][id*="Status"], [id^="filtroPendentes"], [id^="filtroAprovados"], [id^="filtroCancelados"]').forEach(btn => {
        btn.className = 'btn btn-secondary';
      });

      const botaoMapStatus = {
        'todos': 'filtroTodosStatus',
        'pendente': 'filtroPendentes',
        'aprovado': 'filtroAprovados',
        'cancelado': 'filtroCancelados'
      };

      if (botaoMapStatus[status]) {
        document.getElementById(botaoMapStatus[status]).className = 'btn btn-primary';
      }

      // Aplicar filtros combinados (per√≠odo + status)
      aplicarFiltrosCombinados();

      // Feedback visual ap√≥s aplicar filtros
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #3b82f6;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
      `;

      const statusTexto = {
        'todos': 'Todos os status',
        'pendente': 'Pendentes',
        'aprovado': 'Aprovados',
        'cancelado': 'Cancelados'
      };

      // Usar a contagem dos pedidos filtrados
      const quantidade = window.pedidosFiltrados ? window.pedidosFiltrados.length : 0;
      toast.textContent = `üìã ${quantidade} pedidos encontrados - ${statusTexto[status]}`;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    // ===== FILTRO DE FORNECEDORES =====
    async function carregarFornecedores() {
      try {
        const response = await fetch('/api/fornecedores');
        const result = await response.json();

        if (result.success) {
          fornecedoresDisponiveis = result.data;
          atualizarDropdownFornecedores();
        }
      } catch (error) {
        console.error('‚ùå Erro ao carregar fornecedores:', error);
      }
    }

    function atualizarDropdownFornecedores() {
      const lista = document.getElementById('listaFornecedoresFiltro');
      if (!lista) return;

      let html = `
        <div style="padding: 8px 12px; cursor: pointer; border-bottom: 1px solid #f0f0f0;" onclick="filtrarFornecedor('todos')">
          <div style="display: flex; align-items: center; gap: 8px;">
            <span style="color: #3b82f6;">üìã</span>
            <span style="font-weight: 600;">Todos os Fornecedores</span>
          </div>
        </div>
      `;

      fornecedoresDisponiveis.forEach(fornecedor => {
        html += `
          <div style="padding: 8px 12px; cursor: pointer; border-bottom: 1px solid #f0f0f0;" onclick="filtrarFornecedor('${fornecedor.id_fornecedor}', '${fornecedor.nome}')" onmouseover="this.style.background='#f8f9fa'" onmouseout="this.style.background='white'">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span style="color: #16a34a;">üè≠</span>
              <div>
                <div style="font-weight: 600; color: #333;">${fornecedor.nome}</div>
                <div style="font-size: 12px; color: #666;">${fornecedor.total_pedidos || 0} pedidos</div>
              </div>
            </div>
          </div>
        `;
      });

      lista.innerHTML = html;
    }

    function toggleFiltroFornecedores() {
      const dropdown = document.getElementById('dropdownFornecedores');
      const isVisible = dropdown.style.display === 'block';

      // Fechar outros dropdowns se houver
      document.querySelectorAll('[id*="dropdown"]').forEach(d => {
        if (d !== dropdown) d.style.display = 'none';
      });

      dropdown.style.display = isVisible ? 'none' : 'block';

      if (!isVisible && fornecedoresDisponiveis.length === 0) {
        carregarFornecedores();
      }
    }

    function filtrarFornecedor(id, nome = 'Todos') {
      fornecedorAtualPedidos = id;

      // Atualizar texto do bot√£o
      const botao = document.getElementById('filtroFornecedores');
      if (id === 'todos') {
        botao.innerHTML = `üè≠ Fornecedores <span style="font-size: 12px;">‚ñº</span>`;
        botao.className = 'btn btn-secondary';
      } else {
        botao.innerHTML = `üè≠ ${nome} <span style="font-size: 12px;">‚ñº</span>`;
        botao.className = 'btn btn-primary';
      }

      // Fechar dropdown
      document.getElementById('dropdownFornecedores').style.display = 'none';

      // Aplicar filtros combinados
      aplicarFiltrosCombinados();

      // Feedback visual
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #3b82f6;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
      `;

      const quantidade = window.pedidosFiltrados ? window.pedidosFiltrados.length : 0;
      toast.textContent = `üè≠ ${quantidade} pedidos encontrados - ${nome}`;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    // Fechar dropdown ao clicar fora
    document.addEventListener('click', function(event) {
      const dropdown = document.getElementById('dropdownFornecedores');
      const botao = document.getElementById('filtroFornecedores');

      if (dropdown && botao && !dropdown.contains(event.target) && !botao.contains(event.target)) {
        dropdown.style.display = 'none';
      }
    });

    function aplicarFiltrosCombinados() {
      let pedidosFiltrados = [...pedidosOriginais];

      // Aplicar filtro de per√≠odo
      const agora = new Date();
      switch(filtroAtualPedidos) {
        case 'hoje':
          const hoje = agora.toISOString().split('T')[0];
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido).toISOString().split('T')[0];
            return dataPedido === hoje;
          });
          break;

        case 'semana':
          const semanaAtras = new Date(agora.getTime() - 7 * 24 * 60 * 60 * 1000);
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido);
            return dataPedido >= semanaAtras;
          });
          break;

        case 'mes':
          const inicioMes = new Date(agora.getFullYear(), agora.getMonth(), 1);
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido);
            return dataPedido >= inicioMes;
          });
          break;

        case '6meses':
          const seiseMesesAtras = new Date(agora.getTime() - 6 * 30 * 24 * 60 * 60 * 1000);
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido);
            return dataPedido >= seiseMesesAtras;
          });
          break;

        case 'ano':
          const inicioAno = new Date(agora.getFullYear(), 0, 1);
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const dataPedido = new Date(pedido.data_pedido);
            return dataPedido >= inicioAno;
          });
          break;

        case 'todos':
        default:
          // Manter todos os pedidos
          break;
      }

      // Aplicar filtro de status
      if (statusAtualPedidos !== 'todos') {
        console.log(`üîç Aplicando filtro de status: ${statusAtualPedidos}`);
        console.log(`üìã Pedidos antes do filtro de status: ${pedidosFiltrados.length}`);

        // Log dos status dos pedidos antes do filtro
        pedidosFiltrados.forEach((pedido, index) => {
          console.log(`  Pedido ${index + 1}: status = "${pedido.status}" (tipo: ${typeof pedido.status})`);
        });

        const statusMap = {
          'pendente': 'PENDENTE',
          'aprovado': 'APROVADO',
          'cancelado': 'CANCELADO'
        };

        const statusFiltro = statusMap[statusAtualPedidos];
        console.log(`üéØ Status procurado: "${statusFiltro}"`);

        if (statusFiltro) {
          pedidosFiltrados = pedidosFiltrados.filter(pedido => {
            const status = pedido.status ? pedido.status.toUpperCase().trim() : 'PENDENTE';
            const match = status === statusFiltro;
            console.log(`  Comparando "${status}" === "${statusFiltro}" = ${match}`);
            return match;
          });
        }

        console.log(`üìä Pedidos ap√≥s filtro de status: ${pedidosFiltrados.length}`);
      }

      // Aplicar filtro de fornecedor
      if (fornecedorAtualPedidos !== 'todos') {
        console.log(`üè≠ Aplicando filtro de fornecedor: ${fornecedorAtualPedidos}`);
        console.log(`üìã Pedidos antes do filtro de fornecedor: ${pedidosFiltrados.length}`);

        pedidosFiltrados = pedidosFiltrados.filter(pedido => {
          // Verificar se o pedido tem o fornecedor especificado
          const fornecedorPedido = pedido.id_fornecedor || pedido.fornecedor;
          const match = fornecedorPedido == fornecedorAtualPedidos;
          console.log(`  Comparando fornecedor "${fornecedorPedido}" === "${fornecedorAtualPedidos}" = ${match}`);
          return match;
        });

        console.log(`üìä Pedidos ap√≥s filtro de fornecedor: ${pedidosFiltrados.length}`);
      }

      console.log(`üîç Filtros aplicados - Per√≠odo: ${filtroAtualPedidos}, Status: ${statusAtualPedidos}, Fornecedor: ${fornecedorAtualPedidos}`);
      console.log(`üìã Pedidos encontrados: ${pedidosFiltrados.length}`);

      // Atualizar a exibi√ß√£o
      atualizarListaPedidos(pedidosFiltrados);
      atualizarGraficoPedidos(pedidosFiltrados);
      atualizarCards(pedidosFiltrados);

      // Armazenar resultado para uso em toasts
      window.pedidosFiltrados = pedidosFiltrados;
    }

    function atualizarListaPedidos(pedidosFiltrados) {
      // Selecionar especificamente o container da se√ß√£o de pedidos
      const containers = document.querySelectorAll('.section-content');
      const container = containers[1]; // Segunda se√ß√£o √© a de pedidos (primeira √© proje√ß√£o)
      if (!container) return;

      if (pedidosFiltrados.length === 0) {
        container.innerHTML = `
          <div style="text-align: center; color: #666; padding: 60px 20px;">
            <div style="font-size: 64px; margin-bottom: 20px;">üìã</div>
            <h3 style="margin: 0 0 10px; color: #333;">Nenhum pedido encontrado</h3>
            <p style="margin: 0 0 30px;">Nenhum pedido corresponde aos filtros aplicados</p>
            <button class="btn btn-primary" onclick="novoPedido()">
              + Criar Novo Pedido
            </button>
          </div>
        `;
        return;
      }

      let html = '<div style="display: grid; gap: 15px;">';

      pedidosFiltrados.forEach((pedido, index) => {
        const statusClass = pedido.status === 'PENDENTE' ? 'background: #fef3c7; color: #d97706;' :
                           pedido.status === 'APROVADO' ? 'background: #dcfce7; color: #16a34a;' :
                           'background: #fee2e2; color: #dc2626;';

        const statusText = pedido.status === 'PENDENTE' ? '‚è≥ Pendente' :
                          pedido.status === 'APROVADO' ? '‚úÖ Aprovado' :
                          '‚ùå Cancelado';

        html += `
          <div style="background: #f8f9fa; border: 1px solid #e0e0e0; border-radius: 12px; padding: 20px; transition: all 0.2s ease;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
              <div style="display: flex; align-items: center; gap: 15px;">
                <div style="width: 50px; height: 50px; border-radius: 12px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); display: flex; align-items: center; justify-content: center; color: white; font-size: 16px; font-weight: bold;">
                  #${index + 1}
                </div>
                <div>
                  <h4 style="margin: 0; color: #333; font-size: 16px;">${pedido.produto_nome || 'Produto N/A'}</h4>
                  <p style="margin: 0; color: #666; font-size: 14px;">
                    ${new Date(pedido.data_pedido).toLocaleDateString('pt-BR')} ‚Ä¢
                    Qtd: ${pedido.quantidade}
                  </p>
                </div>
              </div>
              <div style="text-align: right;">
                <div style="font-size: 18px; font-weight: bold; color: #3b82f6; margin-bottom: 5px;">
                  R$ ${parseFloat(pedido.valor_total || 0).toFixed(2)}
                </div>
                <div style="display: flex; align-items: center; gap: 10px;">
                  <span style="${statusClass} padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;">
                    ${statusText}
                  </span>
                  <button class="btn btn-secondary" onclick="verDetalhesPedido(${index + 1})" style="padding: 6px 12px; font-size: 12px;">
                    üëÅÔ∏è Ver
                  </button>
                </div>
              </div>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; padding-top: 15px; border-top: 1px solid #e0e0e0;">
              <div>
                <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Fornecedor</label>
                <div style="font-size: 14px; font-weight: bold; color: #333;">${pedido.fornecedor || 'PCR Labor'}</div>
              </div>
              <div>
                <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Prazo</label>
                <div style="font-size: 14px; font-weight: bold; color: #333;">5-7 dias √∫teis</div>
              </div>
              <div>
                <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">Prioridade</label>
                <div style="font-size: 14px; font-weight: bold; color: #f59e0b;">M√âDIA</div>
              </div>
              <div>
                <label style="font-size: 12px; color: #666; text-transform: uppercase; font-weight: 600;">A√ß√µes</label>
                <div style="display: flex; gap: 5px;">
                  <button class="btn btn-primary" onclick="aprovarPedido(${index + 1})" style="padding: 4px 8px; font-size: 11px;">‚úÖ Aprovar</button>
                  <button class="btn btn-secondary" onclick="cancelarPedido(${index + 1})" style="padding: 4px 8px; font-size: 11px;">‚ùå Cancelar</button>
                </div>
              </div>
            </div>
          </div>
        `;
      });

      html += '</div>';
      container.innerHTML = html;

      console.log(`‚úÖ Lista de pedidos atualizada: ${pedidosFiltrados.length} pedidos`);
    }

    function atualizarCards(pedidosFiltrados) {
      // Atualizar cards de m√©tricas
      const totalPedidos = pedidosFiltrados.length;
      const pendentes = pedidosFiltrados.filter(p => p.status === 'PENDENTE').length;
      const aprovados = pedidosFiltrados.filter(p => p.status === 'APROVADO').length;
      const valorTotal = pedidosFiltrados.reduce((total, p) => total + parseFloat(p.valor_total || 0), 0);

      // Atualizar valores nos cards
      const totalCard = document.getElementById('totalPedidosCard');
      const pendentesCard = document.getElementById('pedidosPendentesCard');
      const aprovadosCard = document.getElementById('pedidosAprovadosCard');
      const valorCard = document.getElementById('valorTotalCard');

      if (totalCard) totalCard.textContent = totalPedidos;
      if (pendentesCard) pendentesCard.textContent = pendentes;
      if (aprovadosCard) aprovadosCard.textContent = aprovados;
      if (valorCard) valorCard.textContent = `R$ ${valorTotal.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".")}`;

      console.log(`üìä Cards atualizados: ${totalPedidos} total, ${pendentes} pendentes, ${aprovados} aprovados`);
    }

    function atualizarGraficoPedidos(pedidosFiltrados) {
      // Calcular dados para o gr√°fico baseado nos pedidos filtrados
      const dadosGrafico = calcularDadosProjecao(pedidosFiltrados);

      // Atualizar o gr√°fico existente
      if (window.projecaoChart) {
        window.projecaoChart.data.datasets[0].data = dadosGrafico;
        window.projecaoChart.update();
      }
    }

    function calcularDadosProjecao(pedidos) {
      // Simular c√°lculo de proje√ß√£o baseado nos pedidos filtrados
      const baseValues = [8000, 12000, 6000, 15000, 18000, 14000, 20000];
      const fatorAjuste = pedidos.length / Math.max(pedidosOriginais.length, 1);

      return baseValues.map(valor => Math.round(valor * fatorAjuste));
    }

    // Novo pedido
    function novoPedido() {
      console.log('üîÑ Abrindo modal de novo pedido...');

      // Remover modal existente se houver
      const modalExistente = document.getElementById('modalNovoPedido');
      if (modalExistente) {
        modalExistente.remove();
      }

      const modal = document.createElement('div');
      modal.id = 'modalNovoPedido';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">üìã Novo Pedido</h2>
            <button onclick="fecharModalNovoPedido()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formNovoPedido" onsubmit="criarNovoPedido(event)">
            <div style="display: grid; gap: 20px;">

              <!-- Produto -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üì¶ Produto</label>
                <select id="produtoPedidoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
                  <option value="">Carregando produtos...</option>
                </select>
              </div>

              <!-- Quantidade -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìä Quantidade</label>
                <input type="number" id="quantidadePedidoInput" min="1" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: 50">
              </div>

              <!-- Fornecedor -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üè≠ Fornecedor</label>
                <select id="fornecedorPedidoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
                  <option value="">Carregando fornecedores...</option>
                </select>
                <div style="margin-top: 8px;">
                  <button type="button" onclick="abrirModalNovoFornecedor()" style="background: #3b82f6; color: white; border: none; padding: 6px 12px; border-radius: 6px; font-size: 12px; cursor: pointer;">
                    + Novo Fornecedor
                  </button>
                </div>
              </div>

              <!-- Prioridade -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">‚ö° Prioridade</label>
                <select id="prioridadePedidoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
                  <option value="baixa">üü¢ Baixa</option>
                  <option value="media" selected>üü° M√©dia</option>
                  <option value="alta">üî¥ Alta</option>
                  <option value="urgente">üö® Urgente</option>
                </select>
              </div>

              <!-- Data de entrega -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìÖ Data de Entrega Desejada</label>
                <input type="date" id="dataEntregaPedidoInput" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;">
              </div>

              <!-- Observa√ß√µes -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üí¨ Observa√ß√µes</label>
                <textarea id="observacoesPedidoInput" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px; min-height: 80px;" placeholder="Observa√ß√µes adicionais sobre o pedido..."></textarea>
              </div>

              <!-- Preview do valor -->
              <div id="previewValorPedido" style="background: #f0fff4; padding: 15px; border-radius: 8px; border: 2px solid #16a34a; display: none;">
                <div style="font-weight: 600; color: #333; margin-bottom: 5px;">üí∞ Valor Total Estimado:</div>
                <div style="color: #16a34a; font-size: 18px; font-weight: bold;">R$ 0,00</div>
              </div>

            </div>

            <div style="display: flex; gap: 15px; margin-top: 30px;">
              <button type="button" onclick="fecharModalNovoPedido()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                Cancelar
              </button>
              <button type="submit" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                üìã Criar Pedido
              </button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);
      console.log('‚úÖ Modal adicionado ao DOM');

      // Carregar produtos e fornecedores reais da empresa
      carregarProdutosPedido();
      carregarFornecedoresPedido();

      // Event listeners para calcular valor
      const produtoSelect = document.getElementById('produtoPedidoInput');
      const quantidadeInput = document.getElementById('quantidadePedidoInput');
      const dataInput = document.getElementById('dataEntregaPedidoInput');

      if (produtoSelect) {
        produtoSelect.addEventListener('change', calcularValorPedido);
        console.log('‚úÖ Event listener do produto adicionado');
      }

      if (quantidadeInput) {
        quantidadeInput.addEventListener('input', calcularValorPedido);
        console.log('‚úÖ Event listener da quantidade adicionado');
      }

      // Definir data m√≠nima como hoje
      if (dataInput) {
        const hoje = new Date().toISOString().split('T')[0];
        dataInput.min = hoje;
        console.log('‚úÖ Data m√≠nima definida:', hoje);
      }

      // Adicionar event listener para fechar modal clicando fora
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          fecharModalNovoPedido();
        }
      });

      console.log('‚úÖ Modal de novo pedido configurado completamente');
    }

    async function carregarProdutosPedido() {
      try {
        console.log('üîÑ Carregando produtos da empresa...');

        const response = await fetch('/api/produtos');
        const result = await response.json();

        if (result.success && result.data) {
          const produtoSelect = document.getElementById('produtoPedidoInput');
          if (produtoSelect) {
            produtoSelect.innerHTML = '<option value="">Selecione um produto</option>';

            result.data.forEach(produto => {
              const option = document.createElement('option');
              option.value = produto.id_produto;
              option.textContent = `${produto.nome} - R$ ${parseFloat(produto.preco).toFixed(2)} (Estoque: ${produto.estoque_atual})`;
              option.dataset.preco = produto.preco;
              produtoSelect.appendChild(option);
            });

            console.log(`‚úÖ ${result.data.length} produtos carregados no select`);
          }
        } else {
          console.error('‚ùå Erro ao carregar produtos:', result.error);
          const produtoSelect = document.getElementById('produtoPedidoInput');
          if (produtoSelect) {
            produtoSelect.innerHTML = '<option value="">Erro ao carregar produtos</option>';
          }
        }
      } catch (error) {
        console.error('‚ùå Erro ao carregar produtos:', error);
        const produtoSelect = document.getElementById('produtoPedidoInput');
        if (produtoSelect) {
          produtoSelect.innerHTML = '<option value="">Erro ao carregar produtos</option>';
        }
      }
    }

    async function carregarFornecedoresPedido() {
      try {
        console.log('üîÑ Carregando fornecedores da empresa...');

        const response = await fetch('/api/fornecedores');
        const result = await response.json();

        if (result.success && result.data) {
          const fornecedorSelect = document.getElementById('fornecedorPedidoInput');
          if (fornecedorSelect) {
            fornecedorSelect.innerHTML = '<option value="">Selecione um fornecedor</option>';

            result.data.forEach(fornecedor => {
              const option = document.createElement('option');
              option.value = fornecedor.id_fornecedor;
              option.textContent = `${fornecedor.nome} ${fornecedor.cnpj ? '(' + fornecedor.cnpj + ')' : ''}`;
              fornecedorSelect.appendChild(option);
            });

            console.log(`‚úÖ ${result.data.length} fornecedores carregados no select`);
          }
        } else {
          console.error('‚ùå Erro ao carregar fornecedores:', result.error);
          const fornecedorSelect = document.getElementById('fornecedorPedidoInput');
          if (fornecedorSelect) {
            fornecedorSelect.innerHTML = '<option value="">Erro ao carregar fornecedores</option>';
          }
        }
      } catch (error) {
        console.error('‚ùå Erro ao carregar fornecedores:', error);
        const fornecedorSelect = document.getElementById('fornecedorPedidoInput');
        if (fornecedorSelect) {
          fornecedorSelect.innerHTML = '<option value="">Erro ao carregar fornecedores</option>';
        }
      }
    }

    function fecharModalNovoPedido() {
      const modal = document.getElementById('modalNovoPedido');
      if (modal) modal.remove();
    }

    function calcularValorPedido() {
      const produtoSelect = document.getElementById('produtoPedidoInput');
      const quantidade = parseInt(document.getElementById('quantidadePedidoInput').value) || 0;

      if (produtoSelect && produtoSelect.value && quantidade > 0) {
        const selectedOption = produtoSelect.options[produtoSelect.selectedIndex];
        const preco = parseFloat(selectedOption.dataset.preco || 0);

        if (preco > 0) {
          const valorTotal = preco * quantidade;
          const preview = document.getElementById('previewValorPedido');
          preview.style.display = 'block';
          preview.querySelector('div:last-child').textContent = `R$ ${valorTotal.toFixed(2).replace('.', ',')}`;
        } else {
          document.getElementById('previewValorPedido').style.display = 'none';
        }
      } else {
        document.getElementById('previewValorPedido').style.display = 'none';
      }
    }

    async function criarNovoPedido(event) {
      event.preventDefault();
      console.log('üöÄ Iniciando cria√ß√£o de pedido...');

      // Capturar elementos do formul√°rio
      const produtoInput = document.getElementById('produtoPedidoInput');
      const quantidadeInput = document.getElementById('quantidadePedidoInput');
      const fornecedorInput = document.getElementById('fornecedorPedidoInput');
      const prioridadeInput = document.getElementById('prioridadePedidoInput');
      const dataEntregaInput = document.getElementById('dataEntregaPedidoInput');
      const observacoesInput = document.getElementById('observacoesPedidoInput');

      // Validar se os elementos existem
      if (!produtoInput || !quantidadeInput || !fornecedorInput) {
        console.error('‚ùå Elementos do formul√°rio n√£o encontrados');
        mostrarToast('‚ùå Erro no formul√°rio. Tente novamente.', '#ef4444');
        return;
      }

      // Capturar valores
      const produto = produtoInput.value;
      const quantidade = quantidadeInput.value;
      const fornecedor = fornecedorInput.value;
      const prioridade = prioridadeInput ? prioridadeInput.value : 'media';
      const dataEntrega = dataEntregaInput ? dataEntregaInput.value : '';
      const observacoes = observacoesInput ? observacoesInput.value : '';

      console.log('üìã Dados capturados:', { produto, quantidade, fornecedor, prioridade, dataEntrega });

      // Validar campos obrigat√≥rios
      if (!produto || !quantidade || !fornecedor) {
        mostrarToast('‚ùå Por favor, preencha todos os campos obrigat√≥rios.', '#ef4444');
        return;
      }

      // Preparar dados para envio
      const formData = {
        id_produto: parseInt(produto),
        quantidade: parseInt(quantidade),
        fornecedor: fornecedor,
        prioridade: prioridade,
        data_entrega: dataEntrega,
        observacoes: observacoes,
        id_plataforma: 1,
        status: 'PENDENTE',
        data_pedido: new Date().toISOString().split('T')[0]
      };

      // Calcular valor total usando pre√ßo real do produto
      const produtoSelect = document.getElementById('produtoPedidoInput');
      const selectedOption = produtoSelect.options[produtoSelect.selectedIndex];
      const preco = parseFloat(selectedOption.dataset.preco || 0);
      formData.valor_total = preco * formData.quantidade;

      console.log('üì§ Dados para envio:', formData);

      // Mostrar loading no bot√£o
      const submitBtn = document.querySelector('#formNovoPedido button[type="submit"]');
      let originalText = 'üìã Criar Pedido';
      if (submitBtn) {
        originalText = submitBtn.textContent;
        submitBtn.textContent = '‚è≥ Criando...';
        submitBtn.disabled = true;
      }

      try {
        console.log('üåê Enviando requisi√ß√£o para API...');

        const response = await fetch('/api/pedidos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        console.log('üì° Status da resposta:', response.status);

        if (!response.ok) {
          throw new Error(`Erro HTTP: ${response.status}`);
        }

        const result = await response.json();
        console.log('üì• Resposta da API:', result);

        if (result.success) {
          console.log('‚úÖ Pedido criado com sucesso!');

          // Fechar modal
          fecharModalNovoPedido();

          // Mostrar toast de sucesso
          mostrarToast('‚úÖ Pedido criado com sucesso!', '#16a34a');

          // Obter nome do produto
          const produtoOption = document.querySelector(`#produtoPedidoInput option[value="${formData.id_produto}"]`);
          const produtoNome = produtoOption ? produtoOption.textContent.split(' - ')[0] : 'Produto';

          // Criar objeto do novo pedido
          const novoPedido = {
            id_pedido: result.data?.id_pedido || Date.now(),
            produto_nome: produtoNome,
            quantidade: formData.quantidade,
            status: formData.status,
            data_pedido: formData.data_pedido,
            valor_total: formData.valor_total,
            fornecedor: formData.fornecedor,
            prioridade: formData.prioridade,
            data_entrega: formData.data_entrega,
            observacoes: formData.observacoes
          };

          console.log('üìã Novo pedido criado:', novoPedido);

          // Adicionar aos dados originais
          pedidosOriginais.unshift(novoPedido);
          console.log('üìä Total de pedidos ap√≥s adi√ß√£o:', pedidosOriginais.length);

          // Recarregar a p√°gina para mostrar o novo pedido
          setTimeout(() => {
            window.location.reload();
          }, 1500);

        } else {
          throw new Error(result.error || 'Erro desconhecido na API');
        }

      } catch (error) {
        console.error('‚ùå Erro ao criar pedido:', error);
        mostrarToast(`‚ùå Erro ao criar pedido: ${error.message}`, '#ef4444');

        // Restaurar bot√£o
        if (submitBtn) {
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
        }
      }
    }

    function mostrarToast(mensagem, cor) {
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: ${cor};
        color: white;
        padding: 15px 25px;
        border-radius: 8px;
        z-index: 1001;
        font-size: 14px;
        font-weight: 500;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
      `;
      toast.textContent = mensagem;
      document.body.appendChild(toast);

      setTimeout(() => {
        toast.remove();
      }, 3000);
    }

    // Ver detalhes do pedido
    function verDetalhesPedido(id) {
      const modal = document.createElement('div');
      modal.id = 'modalDetalhesPedido';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 700px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">üëÅÔ∏è Detalhes do Pedido #${id}</h2>
            <button onclick="fecharModalDetalhesPedido()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <div style="display: grid; gap: 20px;">

            <!-- Status atual -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <div style="display: flex; justify-content: space-between; align-items: center;">
                <h3 style="margin: 0; color: #333;">üìã Status do Pedido</h3>
                <span style="background: #fef3c7; color: #d97706; padding: 8px 16px; border-radius: 12px; font-size: 14px; font-weight: 600;">
                  ‚è≥ Pendente
                </span>
              </div>
            </div>

            <!-- Informa√ß√µes do produto -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px; color: #333;">üì¶ Produto Solicitado</h3>
              <div style="display: grid; gap: 10px;">
                <div><strong>Nome:</strong> Kit PCR COVID-19</div>
                <div><strong>Quantidade:</strong> 50 unidades</div>
                <div><strong>Valor Unit√°rio:</strong> R$ 89,90</div>
                <div><strong>Valor Total:</strong> R$ 4.495,00</div>
              </div>
            </div>

            <!-- Informa√ß√µes do fornecedor -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px; color: #333;">üè≠ Fornecedor</h3>
              <div style="display: grid; gap: 10px;">
                <div><strong>Nome:</strong> Biotech LTDA</div>
                <div><strong>Prazo de Entrega:</strong> 5-7 dias √∫teis</div>
                <div><strong>Prioridade:</strong> üü° M√©dia</div>
                <div><strong>Data Solicitada:</strong> 25/12/2024</div>
              </div>
            </div>

            <!-- Timeline do pedido -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px; color: #333;">üìÖ Timeline</h3>
              <div style="display: grid; gap: 15px;">

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: white; border-radius: 8px;">
                  <div style="width: 12px; height: 12px; background: #3b82f6; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #333;">Pedido Criado</div>
                    <div style="color: #666; font-size: 14px;">15/12/2024 14:30 por Jo√£o Silva</div>
                  </div>
                </div>

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: white; border-radius: 8px;">
                  <div style="width: 12px; height: 12px; background: #f59e0b; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #333;">Aguardando Aprova√ß√£o</div>
                    <div style="color: #666; font-size: 14px;">15/12/2024 14:35 - Status atual</div>
                  </div>
                </div>

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; opacity: 0.5;">
                  <div style="width: 12px; height: 12px; background: #e5e7eb; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #666;">Aprova√ß√£o</div>
                    <div style="color: #666; font-size: 14px;">Pendente</div>
                  </div>
                </div>

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; opacity: 0.5;">
                  <div style="width: 12px; height: 12px; background: #e5e7eb; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #666;">Enviado ao Fornecedor</div>
                    <div style="color: #666; font-size: 14px;">Pendente</div>
                  </div>
                </div>

                <div style="display: flex; align-items: center; gap: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; opacity: 0.5;">
                  <div style="width: 12px; height: 12px; background: #e5e7eb; border-radius: 50%; flex-shrink: 0;"></div>
                  <div>
                    <div style="font-weight: 600; color: #666;">Entregue</div>
                    <div style="color: #666; font-size: 14px;">Pendente</div>
                  </div>
                </div>

              </div>
            </div>

            <!-- Observa√ß√µes -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px; color: #333;">üí¨ Observa√ß√µes</h3>
              <div style="color: #666; font-style: italic;">Pedido urgente para reposi√ß√£o de estoque. Produto com alta rotatividade.</div>
            </div>

          </div>

          <div style="display: flex; gap: 15px; margin-top: 30px;">
            <button onclick="fecharModalDetalhesPedido()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; cursor: pointer;">
              Fechar
            </button>
            <button onclick="editarPedido(${id})" style="flex: 1; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer;">
              ‚úèÔ∏è Editar
            </button>
            <button onclick="aprovarPedido(${id})" style="flex: 1; padding: 12px; background: #16a34a; color: white; border: none; border-radius: 8px; cursor: pointer;">
              ‚úÖ Aprovar
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    function fecharModalDetalhesPedido() {
      const modal = document.getElementById('modalDetalhesPedido');
      if (modal) modal.remove();
    }

    // Aprovar pedido
    function aprovarPedido(id) {
      if (confirm(`‚úÖ Confirma a aprova√ß√£o do Pedido #${id}?\n\nO pedido ser√° enviado ao fornecedor.`)) {
        console.log(`‚úÖ Aprovando pedido #${id}`);
        alert('‚úÖ Pedido aprovado com sucesso!\n\nO fornecedor foi notificado.');
        location.reload();
      }
    }

    // Cancelar pedido
    function cancelarPedido(id) {
      if (confirm(`‚ùå Confirma o cancelamento do Pedido #${id}?\n\nEsta a√ß√£o n√£o pode ser desfeita.`)) {
        console.log(`‚ùå Cancelando pedido #${id}`);
        alert('‚ùå Pedido cancelado com sucesso!');
        location.reload();
      }
    }

    // Editar pedido
    function editarPedido(id) {
      alert(`‚úèÔ∏è Editar Pedido #${id}\n\nModal de edi√ß√£o ser√° implementado aqui.`);
    }

    // Outras fun√ß√µes
    function exportarPedidos() {
      alert('üìÑ Exportando relat√≥rio de pedidos...\n\nArquivo Excel ser√° gerado com todos os pedidos.');
    }

    function atualizarPedidos() {
      alert('üîÑ Atualizando dados dos pedidos...\n\nSincronizando com fornecedores.');
      setTimeout(() => {
        alert('‚úÖ Pedidos atualizados com sucesso!');
        location.reload();
      }, 2000);
    }

    function abrirFiltroAvancadoPedidos() {
      alert('üîç Filtros avan√ßados para pedidos\n\nModal com filtros por fornecedor, status, prioridade, etc.');
    }

    // ===== INICIALIZA√á√ÉO =====
    // Aplicar filtro padr√£o quando a p√°gina carregar
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üîÑ Inicializando sistema de pedidos...');
      console.log('üìä Dados originais:', pedidosOriginais);

      // Carregar fornecedores para o filtro
      carregarFornecedores();

      // Aguardar um pouco para garantir que tudo foi carregado
      setTimeout(() => {
        console.log('üéØ Aplicando filtros padr√£o...');
        aplicarFiltrosCombinados();
      }, 100);
    });

    console.log('üìã Sistema de pedidos carregado com funcionalidades completas');

    // ===== FUN√á√ÉO PARA CRIAR PEDIDOS DE TESTE COM DATAS VARIADAS =====
    async function criarPedidosTeste() {
      if (!confirm('üß™ Criar pedidos de teste com datas variadas?\n\nIsso criar√° 10 pedidos com diferentes datas para testar os filtros.')) {
        return;
      }

      const hoje = new Date();
      const pedidosTeste = [
        // Hoje
        { dias: 0, produto: 1, quantidade: 5, fornecedor: 'Fornecedor A', prioridade: 'alta' },
        { dias: 0, produto: 2, quantidade: 3, fornecedor: 'Fornecedor B', prioridade: 'media' },

        // Esta semana
        { dias: -2, produto: 3, quantidade: 8, fornecedor: 'Fornecedor C', prioridade: 'baixa' },
        { dias: -5, produto: 1, quantidade: 12, fornecedor: 'Fornecedor A', prioridade: 'alta' },

        // Este m√™s
        { dias: -15, produto: 2, quantidade: 6, fornecedor: 'Fornecedor B', prioridade: 'media' },
        { dias: -20, produto: 4, quantidade: 4, fornecedor: 'Fornecedor D', prioridade: 'urgente' },

        // √öltimos 6 meses
        { dias: -60, produto: 1, quantidade: 15, fornecedor: 'Fornecedor A', prioridade: 'media' },
        { dias: -120, produto: 3, quantidade: 10, fornecedor: 'Fornecedor C', prioridade: 'baixa' },

        // Este ano
        { dias: -200, produto: 2, quantidade: 7, fornecedor: 'Fornecedor B', prioridade: 'alta' },
        { dias: -300, produto: 4, quantidade: 9, fornecedor: 'Fornecedor D', prioridade: 'media' }
      ];

      const precos = { 1: 89.90, 2: 75.50, 3: 120.00, 4: 95.00 };
      const statusOptions = ['PENDENTE', 'APROVADO', 'CANCELADO'];

      for (let i = 0; i < pedidosTeste.length; i++) {
        const teste = pedidosTeste[i];
        const dataPedido = new Date(hoje.getTime() + teste.dias * 24 * 60 * 60 * 1000);
        const status = statusOptions[Math.floor(Math.random() * statusOptions.length)];

        const formData = {
          id_produto: teste.produto,
          quantidade: teste.quantidade,
          fornecedor: teste.fornecedor,
          prioridade: teste.prioridade,
          data_entrega: new Date(dataPedido.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          observacoes: `Pedido de teste ${i + 1} - ${teste.dias === 0 ? 'Hoje' : teste.dias > -7 ? 'Esta semana' : teste.dias > -30 ? 'Este m√™s' : teste.dias > -180 ? '√öltimos 6 meses' : 'Este ano'}`,
          id_plataforma: 1,
          status: status,
          data_pedido: dataPedido.toISOString().split('T')[0],
          valor_total: precos[teste.produto] * teste.quantidade
        };

        try {
          const response = await fetch('/api/pedidos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
          });

          const result = await response.json();
          if (result.success) {
            console.log(`‚úÖ Pedido teste ${i + 1} criado:`, formData.data_pedido);
          } else {
            console.error(`‚ùå Erro no pedido teste ${i + 1}:`, result.error);
          }
        } catch (error) {
          console.error(`‚ùå Erro de conex√£o no pedido teste ${i + 1}:`, error);
        }

        // Pequena pausa entre cria√ß√µes
        await new Promise(resolve => setTimeout(resolve, 200));
      }

      alert('‚úÖ Pedidos de teste criados!\n\nRecarregando a p√°gina para mostrar os novos dados...');
      setTimeout(() => window.location.reload(), 1000);
    }

    // Adicionar bot√£o de teste (apenas em desenvolvimento)
    if (window.location.hostname === 'localhost') {
      const botaoTeste = document.createElement('button');
      botaoTeste.textContent = 'üß™ Criar Pedidos Teste';
      botaoTeste.className = 'btn btn-secondary';
      botaoTeste.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 1000;';
      botaoTeste.onclick = criarPedidosTeste;
      document.body.appendChild(botaoTeste);
    }
  </script>
</body>
</html>
