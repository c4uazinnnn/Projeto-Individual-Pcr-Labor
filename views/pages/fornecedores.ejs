<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <link rel="stylesheet" href="/css/estilos.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <!-- Header horizontal (Topo) com logo e menu -->
  <%- include('../components/cabecalho') %>

  <!-- Layout principal -->
  <div class="main-layout">
    <!-- √Årea central para o conte√∫do principal -->
    <main class="content-area">
      <!-- üè≠ Tela de Fornecedores -->
      <h1 class="page-title">Fornecedores</h1>

      <!-- Cards de m√©tricas r√°pidas - DIN√ÇMICOS -->
      <div id="cardsMetricas" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
        <div class="summary-card">
          <div class="card-icon">üè≠</div>
          <div class="card-title">Total de Fornecedores</div>
          <div class="card-value" id="totalFornecedores">0</div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #16a34a;">‚úÖ</div>
          <div class="card-title">Fornecedores Ativos</div>
          <div class="card-value" id="fornecedoresAtivos">0</div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #f59e0b;">üì¶</div>
          <div class="card-title">Pedidos Este M√™s</div>
          <div class="card-value" id="pedidosMes">0</div>
        </div>

        <div class="summary-card">
          <div class="card-icon" style="background: #8b5cf6;">üí∞</div>
          <div class="card-title">Valor Total</div>
          <div class="card-value" id="valorTotal">R$ 0</div>
        </div>
      </div>

      <!-- Gr√°ficos dos Fornecedores -->
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 30px;">
        <!-- Gr√°fico de Fornecedores por Status -->
        <div class="content-section">
          <div class="section-header">
            <h3 class="section-title">üìä Status dos Fornecedores</h3>
          </div>
          <div class="section-content">
            <div style="height: 200px;">
              <canvas id="statusFornecedoresChart"></canvas>
            </div>
          </div>
        </div>

        <!-- Gr√°fico de Pedidos por Fornecedor -->
        <div class="content-section">
          <div class="section-header">
            <h3 class="section-title">üìà Top Fornecedores</h3>
          </div>
          <div class="section-content">
            <div style="height: 200px;">
              <canvas id="topFornecedoresChart"></canvas>
            </div>
          </div>
        </div>
      </div>

      <!-- Filtros entre gr√°ficos e lista de fornecedores -->
      <div style="
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
      ">
        <div style="
          display: flex;
          justify-content: space-between;
          align-items: center;
          flex-wrap: wrap;
          gap: 15px;
        ">
          <div style="
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
          ">
            <!-- Filtros Unificados -->
            <%- include('../components/filtroUnificado') %>
          </div>

          <!-- A√ß√µes -->
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-secondary" onclick="importarFornecedores()">Importar</button>
            <button class="btn btn-secondary" onclick="exportarFornecedores()">Exportar</button>
            <button class="btn btn-primary" onclick="adicionarFornecedor()">+ Novo Fornecedor</button>
          </div>
        </div>
      </div>

      <!-- Lista de Fornecedores -->
      <div class="content-section">
        <div class="section-header">
          <h3 class="section-title">üìã Lista de Fornecedores</h3>
        </div>
        <div class="section-content">
          <div id="fornecedoresContainer">
            <!-- Fornecedores ser√£o carregados via JavaScript -->
            <div style="text-align: center; padding: 40px; color: #666;">
              <div style="font-size: 48px; margin-bottom: 15px;">‚è≥</div>
              <div style="font-size: 16px; margin-bottom: 10px;">Carregando fornecedores...</div>
              <div style="font-size: 14px; color: #999;">Aguarde um momento</div>
            </div>
          </div>
        </div>
      </div>

    </main>

    <!-- Lateral direita com Tarefas, Calend√°rio e Pergunte para IA -->
    <%- include('../components/barraLateral') %>
  </div>

  <script>
    // ===== DADOS GLOBAIS =====
    let fornecedoresOriginais = [];
    let filtroAtual = 'todos';

    // ===== INICIALIZA√á√ÉO =====
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üè≠ P√°gina de fornecedores carregada');

      // Configurar op√ß√µes espec√≠ficas para fornecedores
      inicializarFiltros({
        status: [
          { value: 'ativo', label: 'Ativo' },
          { value: 'inativo', label: 'Inativo' },
          { value: 'pendente', label: 'Pendente' },
          { value: 'bloqueado', label: 'Bloqueado' }
        ],
        categorias: [
          { value: 'nacional', label: 'Nacional' },
          { value: 'internacional', label: 'Internacional' },
          { value: 'local', label: 'Local' },
          { value: 'premium', label: 'Premium' },
          { value: 'basico', label: 'B√°sico' }
        ]
      });

      carregarFornecedores();
      inicializarGraficos();
    });

    // Fun√ß√£o para aplicar filtros (chamada pelo componente unificado)
    function aplicarFiltros() {
      console.log('üîç Aplicando filtros unificados:', filtrosAplicados);

      let fornecedoresFiltrados = [...fornecedoresOriginais];

      // Aplicar filtro de status
      if (filtrosAplicados.status.length > 0) {
        fornecedoresFiltrados = fornecedoresFiltrados.filter(fornecedor => {
          const status = (fornecedor.status || 'ativo').toLowerCase();
          return filtrosAplicados.status.includes(status);
        });
      }

      // Aplicar filtro de categoria
      if (filtrosAplicados.categoria.length > 0) {
        fornecedoresFiltrados = fornecedoresFiltrados.filter(fornecedor => {
          const categoria = (fornecedor.categoria || 'nacional').toLowerCase();
          return filtrosAplicados.categoria.includes(categoria);
        });
      }

      console.log(`üè≠ Fornecedores filtrados: ${fornecedoresFiltrados.length} de ${fornecedoresOriginais.length}`);

      // Atualizar a exibi√ß√£o
      atualizarListaFornecedores(fornecedoresFiltrados);
    }

    // ===== CARREGAR FORNECEDORES =====
    async function carregarFornecedores() {
      try {
        console.log('üîÑ Carregando fornecedores do banco...');

        const response = await fetch('/api/fornecedores');
        const result = await response.json();

        if (result.success && result.data) {
          fornecedoresOriginais = result.data;
          console.log(`‚úÖ ${fornecedoresOriginais.length} fornecedores carregados do banco`);

          atualizarMetricas();
          atualizarListaFornecedores(fornecedoresOriginais);
          atualizarGraficos();
        } else {
          console.error('‚ùå Erro na resposta da API:', result.error);
          throw new Error(result.error || 'Erro ao carregar fornecedores');
        }

      } catch (error) {
        console.error('‚ùå Erro ao carregar fornecedores:', error);

        // Fallback para dados simulados apenas em caso de erro
        fornecedoresOriginais = [
          {
            id_fornecedor: 1,
            nome: 'BioTech Suprimentos',
            cnpj: '12.345.678/0001-90',
            telefone: '(11) 99999-9999',
            email: 'contato@biotech.com',
            endereco: 'S√£o Paulo, SP',
            total_pedidos: 15,
            valor_total_pedidos: 25000,
            created_at: new Date().toISOString()
          }
        ];

        console.log(`‚ö†Ô∏è Usando dados de fallback: ${fornecedoresOriginais.length} fornecedores`);
        atualizarMetricas();
        atualizarListaFornecedores(fornecedoresOriginais);
        atualizarGraficos();
      }
    }

    // ===== ATUALIZAR M√âTRICAS =====
    function atualizarMetricas() {
      const total = fornecedoresOriginais.length;
      const ativos = fornecedoresOriginais.filter(f => f.total_pedidos > 0).length;
      const pedidosMes = fornecedoresOriginais.reduce((total, f) => total + (f.total_pedidos || 0), 0);
      const valorTotal = fornecedoresOriginais.reduce((total, f) => total + (f.valor_total_pedidos || 0), 0);

      document.getElementById('totalFornecedores').textContent = total;
      document.getElementById('fornecedoresAtivos').textContent = ativos;
      document.getElementById('pedidosMes').textContent = pedidosMes;
      document.getElementById('valorTotal').textContent = `R$ ${valorTotal.toLocaleString('pt-BR')}`;
    }

    // ===== INICIALIZAR GR√ÅFICOS =====
    function inicializarGraficos() {
      // Gr√°fico de Status dos Fornecedores
      const statusCtx = document.getElementById('statusFornecedoresChart').getContext('2d');
      window.statusFornecedoresChart = new Chart(statusCtx, {
        type: 'doughnut',
        data: {
          labels: ['Ativos', 'Inativos'],
          datasets: [{
            data: [5, 2],
            backgroundColor: ['#16a34a', '#ef4444'],
            borderWidth: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });

      // Gr√°fico de Top Fornecedores
      const topCtx = document.getElementById('topFornecedoresChart').getContext('2d');
      window.topFornecedoresChart = new Chart(topCtx, {
        type: 'bar',
        data: {
          labels: ['BioTech', 'MedLab', 'LabCorp'],
          datasets: [{
            label: 'Pedidos',
            data: [15, 8, 5],
            backgroundColor: '#3b82f6',
            borderRadius: 4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              display: false
            },
            x: {
              display: false
            }
          }
        }
      });
    }

    // ===== ATUALIZAR LISTA DE FORNECEDORES =====
    function atualizarListaFornecedores(fornecedores) {
      const container = document.getElementById('fornecedoresContainer');

      if (fornecedores.length === 0) {
        container.innerHTML = `
          <div style="text-align: center; padding: 40px; color: #666;">
            <div style="font-size: 48px; margin-bottom: 15px;">üîç</div>
            <div style="font-size: 16px; margin-bottom: 10px;">Nenhum fornecedor encontrado</div>
            <div style="font-size: 14px; color: #999;">Tente ajustar os filtros ou adicione um novo fornecedor</div>
          </div>
        `;
        return;
      }

      container.innerHTML = `
        <div style="display: grid; gap: 15px;">
          ${fornecedores.map(fornecedor => `
            <div style="background: #f8f9fa; border: 1px solid #e0e0e0; border-radius: 12px; padding: 20px; transition: all 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.1)'">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <div style="display: flex; align-items: center; gap: 15px;">
                  <div style="width: 50px; height: 50px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); border-radius: 12px; display: flex; align-items: center; justify-content: center; color: white; font-size: 20px; font-weight: bold;">
                    üè≠
                  </div>
                  <div>
                    <div style="font-size: 18px; font-weight: bold; color: #333; margin-bottom: 5px;">${fornecedor.nome}</div>
                    <div style="color: #666; font-size: 14px;">CNPJ: ${fornecedor.cnpj}</div>
                  </div>
                </div>
                <div style="text-align: right;">
                  <div style="font-size: 20px; font-weight: bold; color: #018820; margin-bottom: 5px;">
                    R$ ${(fornecedor.valor_total_pedidos || 0).toLocaleString('pt-BR')}
                  </div>
                  <div style="color: #666; font-size: 14px;">${fornecedor.total_pedidos || 0} pedidos</div>
                </div>
              </div>

              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 15px;">
                <div>
                  <div style="color: #666; font-size: 12px; text-transform: uppercase; font-weight: 600; margin-bottom: 5px;">üìß Email</div>
                  <div style="color: #333; font-size: 14px;">${fornecedor.email || 'N√£o informado'}</div>
                </div>
                <div>
                  <div style="color: #666; font-size: 12px; text-transform: uppercase; font-weight: 600; margin-bottom: 5px;">üìû Telefone</div>
                  <div style="color: #333; font-size: 14px;">${fornecedor.telefone || 'N√£o informado'}</div>
                </div>
                <div>
                  <div style="color: #666; font-size: 12px; text-transform: uppercase; font-weight: 600; margin-bottom: 5px;">üìç Endere√ßo</div>
                  <div style="color: #333; font-size: 14px;">${fornecedor.endereco || 'N√£o informado'}</div>
                </div>
                <div>
                  <div style="color: #666; font-size: 12px; text-transform: uppercase; font-weight: 600; margin-bottom: 5px;">üìÖ Cadastro</div>
                  <div style="color: #333; font-size: 14px;">${new Date(fornecedor.created_at).toLocaleDateString('pt-BR')}</div>
                </div>
              </div>

              <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; gap: 10px;">
                  <span style="background: ${(fornecedor.total_pedidos || 0) > 0 ? '#dcfce7' : '#fee2e2'}; color: ${(fornecedor.total_pedidos || 0) > 0 ? '#16a34a' : '#dc2626'}; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold;">
                    ${(fornecedor.total_pedidos || 0) > 0 ? '‚úÖ Ativo' : '‚ùå Inativo'}
                  </span>
                  <span style="background: #e0f2fe; color: #0277bd; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold;">
                    üì¶ ${fornecedor.pedidos_mes || 0} pedidos/m√™s
                  </span>
                  <span style="background: #f3e8ff; color: #7c3aed; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold;">
                    üí∞ R$ ${parseFloat(fornecedor.valor_total_pedidos || 0).toFixed(2)}
                  </span>
                </div>
                <div style="display: flex; gap: 8px;">
                  <button class="btn btn-primary" onclick="editarFornecedor(${fornecedor.id_fornecedor})" style="padding: 8px 16px; font-size: 12px;">
                    Editar
                  </button>
                  <button class="btn btn-secondary" onclick="verDetalhesFornecedor(${fornecedor.id_fornecedor})" style="padding: 8px 16px; font-size: 12px;">
                    Ver
                  </button>
                  <button class="btn btn-secondary" onclick="novoPedidoFornecedor(${fornecedor.id_fornecedor})" style="padding: 8px 16px; font-size: 12px;">
                    Pedido
                  </button>
                  <button class="btn btn-danger" onclick="excluirFornecedor(${fornecedor.id_fornecedor})" style="padding: 8px 16px; font-size: 12px; background: #dc3545;">
                    Excluir
                  </button>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    }

    // ===== FILTROS =====
    function filtrarFornecedores(tipo) {
      // Atualizar bot√µes visuais
      document.querySelectorAll('[id*="Fornecedores"], #filtroRecentes').forEach(btn => {
        btn.className = 'btn btn-secondary';
      });

      if (tipo === 'todos') {
        document.getElementById('filtroTodosFornecedores').className = 'btn btn-primary';
      } else if (tipo === 'ativos') {
        document.getElementById('filtroAtivosFornecedores').className = 'btn btn-primary';
      } else if (tipo === 'inativos') {
        document.getElementById('filtroInativosFornecedores').className = 'btn btn-primary';
      } else if (tipo === 'recentes') {
        document.getElementById('filtroRecentes').className = 'btn btn-primary';
      }

      // Aplicar filtro
      let fornecedoresFiltrados = [];
      const agora = new Date();
      const umMesAtras = new Date(agora.getFullYear(), agora.getMonth() - 1, agora.getDate());

      switch(tipo) {
        case 'ativos':
          fornecedoresFiltrados = fornecedoresOriginais.filter(f => (f.total_pedidos || 0) > 0);
          break;
        case 'inativos':
          fornecedoresFiltrados = fornecedoresOriginais.filter(f => (f.total_pedidos || 0) === 0);
          break;
        case 'recentes':
          fornecedoresFiltrados = fornecedoresOriginais.filter(f => new Date(f.created_at) >= umMesAtras);
          break;
        case 'todos':
        default:
          fornecedoresFiltrados = [...fornecedoresOriginais];
          break;
      }

      filtroAtual = tipo;
      console.log(`üîç Filtro aplicado: ${tipo} - ${fornecedoresFiltrados.length} fornecedores`);

      atualizarListaFornecedores(fornecedoresFiltrados);

      // Feedback visual
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #018820;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
      `;
      toast.textContent = `‚úÖ ${fornecedoresFiltrados.length} fornecedores encontrados`;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    // ===== ATUALIZAR GR√ÅFICOS =====
    function atualizarGraficos() {
      const ativos = fornecedoresOriginais.filter(f => (f.total_pedidos || 0) > 0).length;
      const inativos = fornecedoresOriginais.length - ativos;

      // Atualizar gr√°fico de status
      if (window.statusFornecedoresChart) {
        window.statusFornecedoresChart.data.datasets[0].data = [ativos, inativos];
        window.statusFornecedoresChart.update();
      }

      // Atualizar gr√°fico de top fornecedores
      if (window.topFornecedoresChart) {
        const topFornecedores = fornecedoresOriginais
          .sort((a, b) => (b.total_pedidos || 0) - (a.total_pedidos || 0))
          .slice(0, 3);

        window.topFornecedoresChart.data.labels = topFornecedores.map(f => f.nome.split(' ')[0]);
        window.topFornecedoresChart.data.datasets[0].data = topFornecedores.map(f => f.total_pedidos || 0);
        window.topFornecedoresChart.update();
      }
    }

    // ===== A√á√ïES DOS FORNECEDORES =====
    function adicionarFornecedor() {
      try {
        console.log('üè≠ Fun√ß√£o adicionarFornecedor() chamada');

        // Remover modal existente se houver
        const modalExistente = document.getElementById('modalNovoFornecedor');
        if (modalExistente) {
          modalExistente.remove();
        }

        const modal = document.createElement('div');
        modal.id = 'modalNovoFornecedor';
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">üè≠ Novo Fornecedor</h2>
            <button onclick="fecharModalNovoFornecedor()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formNovoFornecedor" onsubmit="salvarFornecedorSimples(event)">
            <div style="display: grid; gap: 20px;">

              <!-- Nome -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üè¢ Nome da Empresa *</label>
                <input type="text" id="nomeFornecedorSimples" required maxlength="200" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: BioTech Suprimentos Ltda">
                <small style="color: #666; font-size: 12px;">M√°ximo 200 caracteres</small>
              </div>

              <!-- CNPJ -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìÑ CNPJ *</label>
                <input type="text" id="cnpjFornecedorSimples" required maxlength="18" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: 12.345.678/0001-90">
                <small style="color: #666; font-size: 12px;">M√°ximo 18 caracteres (formato: 12.345.678/0001-90)</small>
              </div>

              <!-- Email -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìß Email *</label>
                <input type="email" id="emailFornecedorSimples" required maxlength="100" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: contato@empresa.com">
                <small style="color: #666; font-size: 12px;">M√°ximo 100 caracteres</small>
              </div>

              <!-- Telefone -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìû Telefone *</label>
                <input type="tel" id="telefoneFornecedorSimples" required maxlength="20" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: (11) 99999-9999">
                <small style="color: #666; font-size: 12px;">M√°ximo 20 caracteres</small>
              </div>

              <!-- Endere√ßo -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìç Endere√ßo</label>
                <input type="text" id="enderecoFornecedorSimples" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: S√£o Paulo, SP">
              </div>

            </div>

            <div style="display: flex; gap: 15px; margin-top: 30px;">
              <button type="button" onclick="fecharModalNovoFornecedor()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                Cancelar
              </button>
              <button type="submit" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                üè≠ Criar Fornecedor
              </button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);
      console.log('‚úÖ Modal adicionado ao DOM');

    } catch (error) {
      console.error('‚ùå Erro ao abrir modal:', error);
      alert('‚ùå Erro ao abrir modal: ' + error.message);
    }
  }

    function fecharModalNovoFornecedor() {
      const modal = document.getElementById('modalNovoFornecedor');
      if (modal) modal.remove();
    }

    async function salvarFornecedorSimples(event) {
      event.preventDefault();

      try {
        console.log('üè≠ Salvando fornecedor simples...');

        const formData = {
          nome: document.getElementById('nomeFornecedorSimples').value.trim(),
          cnpj: document.getElementById('cnpjFornecedorSimples').value.trim(),
          email: document.getElementById('emailFornecedorSimples').value.trim(),
          telefone: document.getElementById('telefoneFornecedorSimples').value.trim(),
          endereco: document.getElementById('enderecoFornecedorSimples').value.trim() || ''
        };

        // Valida√ß√µes no frontend
        if (formData.nome.length > 200) {
          alert('‚ùå Nome da empresa muito longo! M√°ximo 200 caracteres.');
          return;
        }

        if (formData.cnpj.length > 18) {
          alert('‚ùå CNPJ muito longo! M√°ximo 18 caracteres.\nFormato correto: 12.345.678/0001-90');
          return;
        }

        if (formData.email.length > 100) {
          alert('‚ùå Email muito longo! M√°ximo 100 caracteres.');
          return;
        }

        if (formData.telefone.length > 20) {
          alert('‚ùå Telefone muito longo! M√°ximo 20 caracteres.');
          return;
        }

        console.log('üìã Dados do fornecedor:', formData);

        const response = await fetch('/api/fornecedores', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        const result = await response.json();
        console.log('üì° Resposta da API:', result);

        if (result.success) {
          alert('‚úÖ Fornecedor criado com sucesso!\n\n' +
                `Nome: ${formData.nome}\n` +
                `CNPJ: ${formData.cnpj}\n` +
                `Email: ${formData.email}`);

          fecharModalNovoFornecedor();
          carregarFornecedores(); // Recarregar lista
        } else {
          let errorMsg = result.error || 'Erro desconhecido';

          // Melhorar mensagens de erro espec√≠ficas
          if (errorMsg.includes('value too long')) {
            errorMsg = 'Um dos campos est√° muito longo. Verifique os limites:\n' +
                      '‚Ä¢ Nome: m√°ximo 200 caracteres\n' +
                      '‚Ä¢ CNPJ: m√°ximo 18 caracteres\n' +
                      '‚Ä¢ Email: m√°ximo 100 caracteres\n' +
                      '‚Ä¢ Telefone: m√°ximo 20 caracteres';
          }

          alert('‚ùå Erro ao criar fornecedor:\n\n' + errorMsg);
        }

      } catch (error) {
        console.error('‚ùå Erro ao salvar fornecedor:', error);
        alert('‚ùå Erro ao salvar fornecedor. Verifique sua conex√£o e tente novamente.');
      }
    }



    function editarFornecedor(id) {
      const fornecedor = fornecedoresOriginais.find(f => f.id_fornecedor === id);
      if (fornecedor) {
        abrirModalEditarFornecedor(fornecedor);
      } else {
        alert('‚ùå Fornecedor n√£o encontrado!');
      }
    }

    function verDetalhesFornecedor(id) {
      const fornecedor = fornecedoresOriginais.find(f => f.id_fornecedor === id);
      if (!fornecedor) {
        alert('‚ùå Fornecedor n√£o encontrado!');
        return;
      }

      const modal = document.createElement('div');
      modal.id = 'modalDetalhesFornecedor';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 700px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">üëÅÔ∏è Detalhes do Fornecedor #${fornecedor.id_fornecedor}</h2>
            <button onclick="fecharModalDetalhesFornecedor()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <div style="display: grid; gap: 20px;">

            <!-- Informa√ß√µes B√°sicas -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px 0; color: #333;">üè¢ Informa√ß√µes da Empresa</h3>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <div>
                  <strong>Nome:</strong><br>
                  <span style="color: #666;">${fornecedor.nome}</span>
                </div>
                <div>
                  <strong>CNPJ:</strong><br>
                  <span style="color: #666;">${fornecedor.cnpj || 'N√£o informado'}</span>
                </div>
              </div>
            </div>

            <!-- Contato -->
            <div style="background: #f0f9ff; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px 0; color: #333;">üìû Informa√ß√µes de Contato</h3>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <div>
                  <strong>Email:</strong><br>
                  <span style="color: #666;">${fornecedor.email}</span>
                </div>
                <div>
                  <strong>Telefone:</strong><br>
                  <span style="color: #666;">${fornecedor.telefone}</span>
                </div>
              </div>
              <div style="margin-top: 15px;">
                <strong>Endere√ßo:</strong><br>
                <span style="color: #666;">${fornecedor.endereco || 'N√£o informado'}</span>
              </div>
            </div>

            <!-- Estat√≠sticas -->
            <div style="background: #f0fdf4; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px 0; color: #333;">üìä Estat√≠sticas</h3>
              <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px;">
                <div style="text-align: center; padding: 15px; background: white; border-radius: 8px;">
                  <div style="font-size: 24px; font-weight: bold; color: #16a34a;">${fornecedor.total_pedidos || 0}</div>
                  <div style="font-size: 12px; color: #666;">Total de Pedidos</div>
                </div>
                <div style="text-align: center; padding: 15px; background: white; border-radius: 8px;">
                  <div style="font-size: 24px; font-weight: bold; color: #2563eb;">R$ ${parseFloat(fornecedor.valor_total_pedidos || 0).toFixed(2)}</div>
                  <div style="font-size: 12px; color: #666;">Valor Total</div>
                </div>
                <div style="text-align: center; padding: 15px; background: white; border-radius: 8px;">
                  <div style="font-size: 24px; font-weight: bold; color: #7c3aed;">${fornecedor.pedidos_mes || 0}</div>
                  <div style="font-size: 12px; color: #666;">Pedidos/M√™s</div>
                </div>
              </div>
            </div>

            <!-- Observa√ß√µes -->
            ${fornecedor.observacoes ? `
            <div style="background: #fef3c7; padding: 20px; border-radius: 8px;">
              <h3 style="margin: 0 0 15px 0; color: #333;">üìù Observa√ß√µes</h3>
              <p style="margin: 0; color: #666;">${fornecedor.observacoes}</p>
            </div>
            ` : ''}

          </div>

          <div style="display: flex; gap: 15px; margin-top: 30px;">
            <button onclick="fecharModalDetalhesFornecedor()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
              Fechar
            </button>
            <button onclick="fecharModalDetalhesFornecedor(); editarFornecedor(${fornecedor.id_fornecedor})" style="flex: 1; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
              ‚úèÔ∏è Editar
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    function fecharModalDetalhesFornecedor() {
      const modal = document.getElementById('modalDetalhesFornecedor');
      if (modal) modal.remove();
    }

    function novoPedidoFornecedor(id) {
      // Redirecionar para a tela de pedidos com o fornecedor pr√©-selecionado
      window.location.href = `/pedidos?fornecedor=${id}&acao=novo`;
    }

    // ===== MODAL ADICIONAR FORNECEDOR =====
    function abrirModalAdicionarFornecedor() {
      const modal = document.createElement('div');
      modal.id = 'modalAdicionarFornecedor';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">üè≠ Adicionar Novo Fornecedor</h2>
            <button onclick="fecharModalAdicionarFornecedor()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formAdicionarFornecedor" onsubmit="salvarNovoFornecedor(event)">
            <div style="display: grid; gap: 20px;">

              <!-- Nome -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üè¢ Nome da Empresa</label>
                <input type="text" id="nomeFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: BioTech Suprimentos Ltda">
              </div>

              <!-- CNPJ -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìÑ CNPJ</label>
                <input type="text" id="cnpjFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: 12.345.678/0001-90">
              </div>

              <!-- Email -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìß Email</label>
                <input type="email" id="emailFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: contato@empresa.com">
              </div>

              <!-- Telefone -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìû Telefone</label>
                <input type="tel" id="telefoneFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: (11) 99999-9999">
              </div>

              <!-- Endere√ßo -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìç Endere√ßo</label>
                <input type="text" id="enderecoFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" placeholder="Ex: S√£o Paulo, SP">
              </div>

            </div>

            <div style="display: flex; gap: 15px; margin-top: 30px;">
              <button type="button" onclick="fecharModalAdicionarFornecedor()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                Cancelar
              </button>
              <button type="submit" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                üè≠ Adicionar Fornecedor
              </button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);
    }

    function fecharModalAdicionarFornecedor() {
      const modal = document.getElementById('modalAdicionarFornecedor');
      if (modal) modal.remove();
    }

    async function salvarNovoFornecedor(event) {
      event.preventDefault();

      const formData = {
        nome: document.getElementById('nomeFornecedor').value,
        cnpj: document.getElementById('cnpjFornecedor').value,
        email: document.getElementById('emailFornecedor').value,
        telefone: document.getElementById('telefoneFornecedor').value,
        endereco: document.getElementById('enderecoFornecedor').value
      };

      try {
        console.log('üè≠ Adicionando fornecedor:', formData);

        const response = await fetch('/api/fornecedores', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Fornecedor adicionado com sucesso!\n\n' +
                `Nome: ${formData.nome}\n` +
                `CNPJ: ${formData.cnpj}\n` +
                `Email: ${formData.email}`);

          fecharModalAdicionarFornecedor();
          carregarFornecedores(); // Recarregar do banco
        } else {
          alert('‚ùå Erro ao adicionar fornecedor: ' + (result.error || 'Erro desconhecido'));
        }

      } catch (error) {
        console.error('‚ùå Erro ao adicionar fornecedor:', error);
        alert('‚ùå Erro ao adicionar fornecedor. Tente novamente.');
      }
    }

    // ===== MODAL EDITAR FORNECEDOR =====
    function abrirModalEditarFornecedor(fornecedor) {
      const modal = document.createElement('div');
      modal.id = 'modalEditarFornecedor';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">‚úèÔ∏è Editar Fornecedor #${fornecedor.id_fornecedor}</h2>
            <button onclick="fecharModalEditarFornecedor()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formEditarFornecedor" onsubmit="salvarEdicaoFornecedor(event, ${fornecedor.id_fornecedor})">
            <div style="display: grid; gap: 20px;">

              <!-- Nome -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üè¢ Nome da Empresa</label>
                <input type="text" id="nomeEditFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="${fornecedor.nome}">
              </div>

              <!-- CNPJ -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìÑ CNPJ</label>
                <input type="text" id="cnpjEditFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="${fornecedor.cnpj}">
              </div>

              <!-- Email -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìß Email</label>
                <input type="email" id="emailEditFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="${fornecedor.email}">
              </div>

              <!-- Telefone -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìû Telefone</label>
                <input type="tel" id="telefoneEditFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="${fornecedor.telefone}">
              </div>

              <!-- Endere√ßo -->
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìç Endere√ßo</label>
                <input type="text" id="enderecoEditFornecedor" required style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 16px;" value="${fornecedor.endereco}">
              </div>

            </div>

            <div style="display: flex; gap: 15px; margin-top: 30px;">
              <button type="button" onclick="fecharModalEditarFornecedor()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                Cancelar
              </button>
              <button type="submit" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
                ‚úÖ Salvar Altera√ß√µes
              </button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);
    }

    function fecharModalEditarFornecedor() {
      const modal = document.getElementById('modalEditarFornecedor');
      if (modal) modal.remove();
    }

    async function salvarEdicaoFornecedor(event, id) {
      event.preventDefault();

      const formData = {
        nome: document.getElementById('nomeEditFornecedor').value,
        cnpj: document.getElementById('cnpjEditFornecedor').value,
        email: document.getElementById('emailEditFornecedor').value,
        telefone: document.getElementById('telefoneEditFornecedor').value,
        endereco: document.getElementById('enderecoEditFornecedor').value
      };

      try {
        console.log('‚úèÔ∏è Editando fornecedor:', id, formData);

        const response = await fetch(`/api/fornecedores/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Fornecedor editado com sucesso!\n\n' +
                `ID: ${id}\n` +
                `Nome: ${formData.nome}\n` +
                `CNPJ: ${formData.cnpj}\n` +
                `Email: ${formData.email}`);

          fecharModalEditarFornecedor();
          carregarFornecedores(); // Recarregar do banco
        } else {
          alert('‚ùå Erro ao editar fornecedor: ' + (result.error || 'Erro desconhecido'));
        }

      } catch (error) {
        console.error('‚ùå Erro ao editar fornecedor:', error);
        alert('‚ùå Erro ao editar fornecedor. Tente novamente.');
      }
    }

    function verDetalhesFornecedor(id) {
      alert(`üëÅÔ∏è Detalhes do Fornecedor #${id}\n\nModal com informa√ß√µes completas ser√° aberto aqui.`);
    }

    function novoPedidoFornecedor(id) {
      alert(`üì¶ Novo Pedido para Fornecedor #${id}\n\nRedirecionando para p√°gina de pedidos...`);
      window.location.href = '/pedidos';
    }

    async function excluirFornecedor(id) {
      if (confirm('‚ùå Tem certeza que deseja excluir este fornecedor?\n\nEsta a√ß√£o n√£o pode ser desfeita.')) {
        try {
          const response = await fetch(`/api/fornecedores/${id}`, {
            method: 'DELETE'
          });

          const result = await response.json();

          if (result.success) {
            alert(`‚úÖ Fornecedor #${id} exclu√≠do com sucesso!`);
            carregarFornecedores(); // Recarregar do banco
          } else {
            alert('‚ùå Erro ao excluir fornecedor: ' + (result.error || 'Erro desconhecido'));
          }
        } catch (error) {
          console.error('‚ùå Erro ao excluir fornecedor:', error);
          alert('‚ùå Erro ao excluir fornecedor. Tente novamente.');
        }
      }
    }

    async function exportarFornecedores() {
      try {
        console.log('üìä Exportando fornecedores...');

        const response = await fetch('/api/fornecedores/exportar');
        const result = await response.json();

        if (result.success) {
          // Converter dados para CSV
          const dados = result.data;
          const headers = Object.keys(dados[0]);
          const csvContent = [
            headers.join(','),
            ...dados.map(row => headers.map(header => `"${row[header] || ''}"`).join(','))
          ].join('\n');

          // Download do arquivo
          const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
          const link = document.createElement('a');
          const url = URL.createObjectURL(blob);
          link.setAttribute('href', url);
          link.setAttribute('download', `fornecedores_${new Date().toISOString().split('T')[0]}.csv`);
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          // Toast de sucesso
          mostrarToast(`‚úÖ ${dados.length} fornecedores exportados com sucesso!`, 'success');
        } else {
          throw new Error(result.error || 'Erro ao exportar');
        }
      } catch (error) {
        console.error('‚ùå Erro ao exportar:', error);
        mostrarToast('‚ùå Erro ao exportar fornecedores: ' + error.message, 'error');
      }
    }

    function importarFornecedores() {
      // Criar input de arquivo
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.csv,.xlsx,.xls';
      input.style.display = 'none';

      input.onchange = async function(event) {
        const file = event.target.files[0];
        if (!file) return;

        try {
          console.log('üì• Importando arquivo:', file.name);
          mostrarToast('üì• Processando arquivo...', 'info');

          // Ler arquivo CSV
          const text = await file.text();
          const lines = text.split('\n').filter(line => line.trim());

          if (lines.length < 2) {
            throw new Error('Arquivo deve ter pelo menos uma linha de cabe√ßalho e uma linha de dados');
          }

          const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim());
          const fornecedores = [];

          for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split(',').map(v => v.replace(/"/g, '').trim());
            const fornecedor = { linha: i + 1 };

            headers.forEach((header, index) => {
              const value = values[index] || '';
              switch(header.toLowerCase()) {
                case 'nome':
                case 'nome da empresa':
                  fornecedor.nome = value;
                  break;
                case 'cnpj':
                  fornecedor.cnpj = value;
                  break;
                case 'email':
                  fornecedor.email = value;
                  break;
                case 'telefone':
                  fornecedor.telefone = value;
                  break;
                case 'endereco':
                case 'endere√ßo':
                  fornecedor.endereco = value;
                  break;
                case 'observacoes':
                case 'observa√ß√µes':
                  fornecedor.observacoes = value;
                  break;
              }
            });

            if (fornecedor.nome) {
              fornecedores.push(fornecedor);
            }
          }

          if (fornecedores.length === 0) {
            throw new Error('Nenhum fornecedor v√°lido encontrado no arquivo');
          }

          // Enviar para API
          const response = await fetch('/api/fornecedores/importar', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ fornecedores })
          });

          const result = await response.json();

          if (result.success) {
            const { sucesso, erros, detalhes } = result.data;

            let mensagem = `üìä IMPORTA√á√ÉO CONCLU√çDA:\n\n`;
            mensagem += `‚úÖ Sucessos: ${sucesso}\n`;
            mensagem += `‚ùå Erros: ${erros}\n\n`;

            if (erros > 0) {
              mensagem += `DETALHES DOS ERROS:\n`;
              detalhes.filter(d => d.erro).slice(0, 5).forEach(d => {
                mensagem += `‚Ä¢ Linha ${d.linha}: ${d.erro}\n`;
              });
              if (erros > 5) {
                mensagem += `... e mais ${erros - 5} erros\n`;
              }
            }

            alert(mensagem);

            if (sucesso > 0) {
              carregarFornecedores(); // Recarregar lista
              mostrarToast(`‚úÖ ${sucesso} fornecedores importados!`, 'success');
            }
          } else {
            throw new Error(result.error || 'Erro na importa√ß√£o');
          }

        } catch (error) {
          console.error('‚ùå Erro na importa√ß√£o:', error);
          alert('‚ùå Erro ao importar arquivo:\n\n' + error.message + '\n\nFormato esperado (CSV):\nnome,cnpj,email,telefone,endereco');
        }
      };

      document.body.appendChild(input);
      input.click();
      document.body.removeChild(input);
    }

    function fecharModalImportarFornecedores() {
      const modal = document.getElementById('modalImportarFornecedores');
      if (modal) modal.remove();
    }

    function baixarTemplateFornecedores() {
      // Criar template Excel para fornecedores
      const template = [
        ['Nome da Empresa', 'CNPJ', 'Pessoa de Contato', 'Telefone', 'Email', 'Site', 'Endere√ßo', 'Categoria', 'Status', 'Observa√ß√µes'],
        ['Laborat√≥rio ABC Ltda', '12.345.678/0001-90', 'Jo√£o Silva', '(11) 99999-9999', 'contato@abc.com', 'https://www.abc.com', 'Rua das Flores, 123, S√£o Paulo, SP', 'nacional', 'ativo', 'Fornecedor principal'],
        ['Distribuidora XYZ', '98.765.432/0001-10', 'Maria Santos', '(21) 88888-8888', 'vendas@xyz.com', '', 'Av. Central, 456, Rio de Janeiro, RJ', 'local', 'ativo', '']
      ];

      // Simular download
      alert('üìÑ Template Excel para fornecedores baixado!\n\nO arquivo cont√©m:\n‚Ä¢ Colunas obrigat√≥rias\n‚Ä¢ Exemplos de preenchimento\n‚Ä¢ Formatos corretos');

      console.log('üìÑ Template de fornecedores:', template);
    }

    async function processarImportacaoFornecedores(event) {
      event.preventDefault();

      const arquivo = document.getElementById('arquivoFornecedores').files[0];
      if (!arquivo) {
        alert('‚ùå Selecione um arquivo Excel');
        return;
      }

      const progressoDiv = document.getElementById('progressoImportacaoFornecedores');
      const barraProgresso = document.getElementById('barraProgressoFornecedores');
      const statusImportacao = document.getElementById('statusImportacaoFornecedores');

      try {
        progressoDiv.style.display = 'block';
        statusImportacao.textContent = 'üì§ Enviando arquivo...';
        barraProgresso.style.width = '30%';

        // Simular processamento
        await new Promise(resolve => setTimeout(resolve, 1500));

        barraProgresso.style.width = '70%';
        statusImportacao.textContent = '‚öôÔ∏è Processando dados...';

        await new Promise(resolve => setTimeout(resolve, 2000));

        barraProgresso.style.width = '100%';
        statusImportacao.textContent = '‚úÖ Importa√ß√£o conclu√≠da!';

        // Simular dados importados
        const fornecedoresImportados = [
          {
            id_fornecedor: Date.now() + 1,
            nome: 'Fornecedor Importado 1',
            contato: 'Contato 1',
            telefone: '(11) 11111-1111',
            email: 'contato1@importado.com',
            categoria: 'nacional',
            status: 'ativo',
            data_cadastro: new Date().toISOString()
          },
          {
            id_fornecedor: Date.now() + 2,
            nome: 'Fornecedor Importado 2',
            contato: 'Contato 2',
            telefone: '(22) 22222-2222',
            email: 'contato2@importado.com',
            categoria: 'local',
            status: 'ativo',
            data_cadastro: new Date().toISOString()
          }
        ];

        // Adicionar √† lista
        fornecedoresOriginais.push(...fornecedoresImportados);

        setTimeout(() => {
          alert(`‚úÖ Importa√ß√£o conclu√≠da com sucesso!\n\nüìä Resultados:\n‚Ä¢ ${fornecedoresImportados.length} fornecedores importados\n‚Ä¢ 0 erros encontrados\n\nA lista ser√° atualizada.`);
          fecharModalImportarFornecedores();
          atualizarListaFornecedores(fornecedoresOriginais);
        }, 1000);

      } catch (error) {
        console.error('‚ùå Erro na importa√ß√£o:', error);
        statusImportacao.textContent = '‚ùå Erro na importa√ß√£o';
        barraProgresso.style.background = '#dc3545';
        alert('‚ùå Erro na importa√ß√£o: ' + error.message);
      }
    }

    function abrirFiltroAvancado() {
      const modal = document.createElement('div');
      modal.id = 'modalFiltroAvancado';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
            <h2 style="margin: 0; color: #333;">üîç Filtros Avan√ßados</h2>
            <button onclick="fecharFiltroAvancado()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <div style="display: grid; gap: 20px;">
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üåç Regi√£o</label>
              <select id="filtroRegiao" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px;">
                <option value="">Todas as regi√µes</option>
                <option value="sudeste">Sudeste</option>
                <option value="sul">Sul</option>
                <option value="nordeste">Nordeste</option>
                <option value="norte">Norte</option>
                <option value="centro-oeste">Centro-Oeste</option>
              </select>
            </div>

            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üí∞ Valor Total de Pedidos</label>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                <input type="number" id="valorMin" placeholder="Valor m√≠nimo" style="padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px;">
                <input type="number" id="valorMax" placeholder="Valor m√°ximo" style="padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px;">
              </div>
            </div>

            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">üìÖ √öltimo Pedido</label>
              <select id="filtroUltimoPedido" style="width: 100%; padding: 12px; border: 2px solid #e0e0e0; border-radius: 8px;">
                <option value="">Qualquer per√≠odo</option>
                <option value="7">√öltimos 7 dias</option>
                <option value="30">√öltimos 30 dias</option>
                <option value="90">√öltimos 90 dias</option>
                <option value="365">√öltimo ano</option>
              </select>
            </div>
          </div>

          <div style="display: flex; gap: 15px; margin-top: 30px;">
            <button onclick="limparFiltrosAvancados()" style="flex: 1; padding: 12px; background: #6b7280; color: white; border: none; border-radius: 8px; cursor: pointer;">
              Limpar
            </button>
            <button onclick="aplicarFiltrosAvancados()" style="flex: 1; padding: 12px; background: #018820; color: white; border: none; border-radius: 8px; cursor: pointer;">
              üîç Aplicar Filtros
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    function fecharFiltroAvancado() {
      const modal = document.getElementById('modalFiltroAvancado');
      if (modal) modal.remove();
    }

    function limparFiltrosAvancados() {
      document.getElementById('filtroRegiao').value = '';
      document.getElementById('valorMin').value = '';
      document.getElementById('valorMax').value = '';
      document.getElementById('filtroUltimoPedido').value = '';
    }

    function aplicarFiltrosAvancados() {
      const filtros = {
        regiao: document.getElementById('filtroRegiao').value,
        valorMin: document.getElementById('valorMin').value,
        valorMax: document.getElementById('valorMax').value,
        ultimoPedido: document.getElementById('filtroUltimoPedido').value
      };

      console.log('üîç Aplicando filtros avan√ßados:', filtros);

      let fornecedoresFiltrados = [...fornecedoresOriginais];

      // Aplicar filtros (aqui voc√™ implementaria a l√≥gica real)
      // Por enquanto, apenas mostra uma mensagem
      mostrarToast(`üîç Filtros aplicados! ${fornecedoresFiltrados.length} fornecedores encontrados.`, 'success');

      fecharFiltroAvancado();
      atualizarListaFornecedores(fornecedoresFiltrados);
    }

    // ===== FUN√á√ÉO TOAST =====
    function mostrarToast(mensagem, tipo = 'info') {
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
        font-weight: 600;
        max-width: 400px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
      `;

      const cores = {
        success: 'background: #16a34a; color: white;',
        error: 'background: #dc2626; color: white;',
        warning: 'background: #f59e0b; color: white;',
        info: 'background: #3b82f6; color: white;'
      };

      toast.style.cssText += cores[tipo] || cores.info;
      toast.textContent = mensagem;

      document.body.appendChild(toast);

      setTimeout(() => {
        toast.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => toast.remove(), 300);
      }, 4000);
    }

    console.log('üè≠ Sistema de fornecedores inicializado');
  </script>

  <style>
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }

    @keyframes slideOut {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
  </style>
</body>
</html>
