<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <link rel="stylesheet" href="/css/wireframe-correct.css">
</head>
<body>
  <div class="app-container">
    <%- include('../components/cabecalho') %>

    <main class="main-content">
      <div class="page-header">
        <h1 class="page-title">Produtos</h1>
        <p class="page-subtitle">Gest√£o completa do cat√°logo de produtos</p>
      </div>

      <div class="content-area">
        <!-- Cards de M√©tricas -->
        <div class="metrics-grid">
          <div class="metric-card">
            <div class="card-header">
              <div class="card-icon">üß™</div>
              <h3 class="card-title">Total de Produtos</h3>
            </div>
            <div class="card-value"><%= produtos.length %></div>
            <div class="card-subtitle">produtos cadastrados</div>
          </div>

          <div class="metric-card">
            <div class="card-header">
              <div class="card-icon">‚ö†Ô∏è</div>
              <h3 class="card-title">Estoque Baixo</h3>
            </div>
            <div class="card-value"><%= produtos.filter(p => p.estoque_atual <= 10).length %></div>
            <div class="card-subtitle">produtos com estoque baixo</div>
          </div>

          <div class="metric-card">
            <div class="card-header">
              <div class="card-icon">üí∞</div>
              <h3 class="card-title">Valor Total</h3>
            </div>
            <div class="card-value">R$ <%= produtos.reduce((total, p) => total + (parseFloat(p.preco) * p.estoque_atual), 0).toFixed(2) %></div>
            <div class="card-subtitle">valor em estoque</div>
          </div>

          <div class="metric-card">
            <div class="card-header">
              <div class="card-icon">üìä</div>
              <h3 class="card-title">Pre√ßo M√©dio</h3>
            </div>
            <div class="card-value">R$ <%= produtos.length > 0 ? (produtos.reduce((total, p) => total + parseFloat(p.preco), 0) / produtos.length).toFixed(2) : '0.00' %></div>
            <div class="card-subtitle">pre√ßo m√©dio dos produtos</div>
          </div>
        </div>

        <!-- Filtros Unificados -->
        <div style="background: white; border: 1px solid #e0e0e0; border-radius: 12px; padding: 20px; margin-bottom: 20px;">
          <%- include('../components/filtroUnificado') %>

          <!-- A√ß√µes Espec√≠ficas -->
          <div style="display: flex; gap: 10px; margin-top: 15px; padding-top: 15px; border-top: 1px solid #e0e0e0; flex-wrap: wrap;">
            <button class="btn btn-secondary" onclick="baixarTemplateExcel()">üìÑ Template Excel</button>
            <button class="btn btn-secondary" onclick="importarProdutosExcel()">üì• Importar Excel</button>
            <button class="btn btn-secondary" onclick="exportarProdutos()">üì§ Exportar</button>
            <button class="btn btn-primary" onclick="novoProduto()">+ Novo Produto</button>
          </div>
        </div>

        <!-- Tabela de Produtos -->
        <div class="table-section">
          <div class="table-header">
            <h3 class="table-title">Lista de Produtos</h3>
          </div>
          <table class="data-table">
            <thead>
              <tr>
                <th>Nome</th>
                <th>SKU</th>
                <th>Pre√ßo Venda</th>
                <th>Pre√ßo Base</th>
                <th>Lucro</th>
                <th>Estoque</th>
                <th>Status</th>
                <th>A√ß√µes</th>
              </tr>
            </thead>
            <tbody>
              <% if (produtos && produtos.length > 0) { %>
                <% produtos.forEach(produto => {
                  const precoVenda = parseFloat(produto.preco || 0);
                  const precoBase = parseFloat(produto.preco_base || 0);
                  const custoFrete = parseFloat(produto.custo_frete || 0);
                  const lucroAbsoluto = precoVenda - precoBase - custoFrete;
                  const lucroPercentual = precoBase > 0 ? ((lucroAbsoluto / precoBase) * 100) : 0;
                %>
                  <tr>
                    <td><%= produto.nome %></td>
                    <td><%= produto.sku %></td>
                    <td>R$ <%= precoVenda.toFixed(2) %></td>
                    <td>R$ <%= precoBase.toFixed(2) %></td>
                    <td>
                      <div style="display: flex; flex-direction: column; align-items: center;">
                        <span style="font-weight: bold; color: <%= lucroAbsoluto >= 0 ? '#28a745' : '#dc3545' %>;">
                          R$ <%= lucroAbsoluto.toFixed(2) %>
                        </span>
                        <small style="color: #666; font-size: 11px;">
                          <%= lucroPercentual.toFixed(1) %>%
                        </small>
                      </div>
                    </td>
                    <td><%= produto.estoque_atual %></td>
                    <td>
                      <% if (produto.estoque_atual <= 10) { %>
                        <span style="color: #dc3545;">Estoque Baixo</span>
                      <% } else { %>
                        <span style="color: #28a745;">Normal</span>
                      <% } %>
                    </td>
                    <td>
                      <div style="display: flex; gap: 5px;">
                        <button class="btn btn-primary" onclick="editarProduto(<%= produto.id_produto %>)" style="padding: 6px 12px; font-size: 12px;">
                          Editar
                        </button>
                        <button class="btn btn-secondary" onclick="verDetalhesProduto(<%= produto.id_produto %>)" style="padding: 6px 12px; font-size: 12px;">
                          Ver
                        </button>
                        <button class="btn btn-danger" onclick="excluirProduto(<%= produto.id_produto %>)" style="padding: 6px 12px; font-size: 12px; background: #dc3545;">
                          Excluir
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }) %>
              <% } else { %>
                <tr>
                  <td colspan="8" style="text-align: center; color: #666; padding: 40px;">
                    Nenhum produto encontrado
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
    </main>
  </div>

  <script>
    // ===== FILTROS DE PRODUTOS FUNCIONAIS =====
    let produtosOriginais = <%- JSON.stringify(produtos) %>;

    function filtrarProdutos(tipo) {
      // Atualizar bot√µes visuais
      document.querySelectorAll('[id^="filtro"]').forEach(btn => {
        btn.className = 'btn btn-secondary';
      });

      if (tipo === 'todos') {
        document.getElementById('filtroTodos').className = 'btn btn-primary';
      } else if (tipo === 'estoque_baixo') {
        document.getElementById('filtroEstoqueBaixo').className = 'btn btn-primary';
      } else if (tipo === 'normal') {
        document.getElementById('filtroNormal').className = 'btn btn-primary';
      }

      // Aplicar filtro REAL
      let produtosFiltrados = [];

      switch(tipo) {
        case 'estoque_baixo':
          produtosFiltrados = produtosOriginais.filter(produto => produto.estoque_atual <= 10);
          break;
        case 'normal':
          produtosFiltrados = produtosOriginais.filter(produto => produto.estoque_atual > 10);
          break;
        case 'todos':
        default:
          produtosFiltrados = [...produtosOriginais];
          break;
      }

      console.log(`üîç Filtrando produtos por: ${tipo}`);
      console.log(`üì¶ Produtos encontrados: ${produtosFiltrados.length}`);

      // Atualizar a tabela
      atualizarTabelaProdutos(produtosFiltrados);

      // Atualizar m√©tricas
      atualizarMetricasProdutos(produtosFiltrados);

      // Feedback visual
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #018820;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
      `;
      toast.textContent = `‚úÖ ${produtosFiltrados.length} produtos encontrados - ${tipo === 'todos' ? 'Todos' : tipo === 'estoque_baixo' ? 'Estoque baixo' : 'Estoque normal'}`;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    function atualizarTabelaProdutos(produtos) {
      const tbody = document.querySelector('.data-table tbody');
      if (!tbody) return;

      if (produtos.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="6" style="text-align: center; color: #666; padding: 40px;">
              <div style="font-size: 48px; margin-bottom: 15px;">üîç</div>
              <div style="font-size: 16px; margin-bottom: 10px;">Nenhum produto encontrado</div>
              <div style="font-size: 14px; color: #999;">Tente ajustar os filtros</div>
            </td>
          </tr>
        `;
        return;
      }

      tbody.innerHTML = produtos.map(produto => `
        <tr>
          <td>${produto.nome}</td>
          <td>${produto.sku}</td>
          <td>R$ ${parseFloat(produto.preco).toFixed(2)}</td>
          <td>${produto.estoque_atual}</td>
          <td>
            ${produto.estoque_atual <= 10
              ? '<span style="color: #dc3545; font-weight: 600;">‚ö†Ô∏è Estoque Baixo</span>'
              : '<span style="color: #28a745; font-weight: 600;">‚úÖ Normal</span>'
            }
          </td>
          <td>
            <div style="display: flex; gap: 5px;">
              <button class="btn btn-primary" onclick="editarProduto(${produto.id_produto})" style="padding: 6px 12px; font-size: 12px;">
                ‚úèÔ∏è Editar
              </button>
              <button class="btn btn-secondary" onclick="verDetalhesProduto(${produto.id_produto})" style="padding: 6px 12px; font-size: 12px;">
                üëÅÔ∏è Ver
              </button>
              <button class="btn btn-danger" onclick="excluirProduto(${produto.id_produto})" style="padding: 6px 12px; font-size: 12px; background: #dc3545;">
                üóëÔ∏è
              </button>
            </div>
          </td>
        </tr>
      `).join('');
    }

    function atualizarMetricasProdutos(produtos) {
      // Atualizar cards de m√©tricas
      const totalProdutos = produtos.length;
      const estoqueBaixo = produtos.filter(p => p.estoque_atual <= 10).length;
      const valorTotal = produtos.reduce((total, p) => total + (parseFloat(p.preco) * p.estoque_atual), 0);
      const precoMedio = produtos.length > 0 ? produtos.reduce((total, p) => total + parseFloat(p.preco), 0) / produtos.length : 0;

      // Atualizar valores nos cards
      const cardValues = document.querySelectorAll('.card-value');
      if (cardValues[0]) cardValues[0].textContent = totalProdutos.toString();
      if (cardValues[1]) cardValues[1].textContent = estoqueBaixo.toString();
      if (cardValues[2]) cardValues[2].textContent = `R$ ${valorTotal.toFixed(2)}`;
      if (cardValues[3]) cardValues[3].textContent = `R$ ${precoMedio.toFixed(2)}`;
    }

    // ===== NOVO PRODUTO =====
    function novoProduto() {
      abrirModalNovoProduto();
    }

    function abrirModalNovoProduto() {
      const modal = document.createElement('div');
      modal.id = 'modalNovoProduto';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="padding: 20px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center;">
            <h3 style="margin: 0; color: #333;">üß™ Novo Produto</h3>
            <button onclick="fecharModalNovoProduto()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formNovoProduto" style="padding: 20px;">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Nome do Produto *</label>
                <input type="text" id="produtoNome" placeholder="Ex: Kit Lula Premium" required
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">SKU *</label>
                <input type="text" id="produtoSku" placeholder="Ex: KIT-LULA-001" required
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; margin-bottom: 15px;">
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Pre√ßo Base *</label>
                <input type="number" id="produtoPrecoBase" placeholder="0.00" step="0.01" required
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Custo Frete</label>
                <input type="number" id="produtoCustoFrete" placeholder="0.00" step="0.01"
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Pre√ßo Venda *</label>
                <input type="number" id="produtoPrecoVenda" placeholder="0.00" step="0.01" required
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Estoque Inicial</label>
                <input type="number" id="produtoEstoque" placeholder="0" min="0"
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Estoque M√≠nimo</label>
                <input type="number" id="produtoEstoqueMinimo" placeholder="10" min="0"
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
            </div>

            <div style="margin-bottom: 20px;">
              <label style="display: block; margin-bottom: 5px; font-weight: bold;">Descri√ß√£o</label>
              <textarea id="produtoDescricao" rows="3" placeholder="Descri√ß√£o detalhada do produto..."
                        style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px; resize: vertical;"></textarea>
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #333;">üí∞ C√°lculo de Lucro</h4>
              <div id="calculoLucro" style="font-size: 14px; color: #666;">
                Preencha os pre√ßos para ver o c√°lculo autom√°tico
              </div>
            </div>

            <div style="display: flex; gap: 10px; justify-content: flex-end;">
              <button type="button" onclick="fecharModalNovoProduto()"
                      style="padding: 10px 20px; background: #6c757d; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Cancelar
              </button>
              <button type="submit"
                      style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Criar Produto
              </button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);
      document.getElementById('produtoNome').focus();

      // Adicionar eventos para c√°lculo autom√°tico
      ['produtoPrecoBase', 'produtoCustoFrete', 'produtoPrecoVenda'].forEach(id => {
        document.getElementById(id).addEventListener('input', calcularLucroAutomatico);
      });

      // Adicionar evento de submit
      document.getElementById('formNovoProduto').addEventListener('submit', criarNovoProduto);
    }

    function fecharModalNovoProduto() {
      const modal = document.getElementById('modalNovoProduto');
      if (modal) modal.remove();
    }

    function calcularLucroAutomatico() {
      const precoBase = parseFloat(document.getElementById('produtoPrecoBase').value) || 0;
      const custoFrete = parseFloat(document.getElementById('produtoCustoFrete').value) || 0;
      const precoVenda = parseFloat(document.getElementById('produtoPrecoVenda').value) || 0;

      const lucroAbsoluto = precoVenda - precoBase - custoFrete;
      const lucroPercentual = precoBase > 0 ? ((lucroAbsoluto / precoBase) * 100) : 0;

      const calculoDiv = document.getElementById('calculoLucro');
      if (calculoDiv) {
        calculoDiv.innerHTML = `
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
            <div>
              <strong>Lucro Absoluto:</strong><br>
              <span style="color: ${lucroAbsoluto >= 0 ? '#28a745' : '#dc3545'}; font-weight: bold;">
                R$ ${lucroAbsoluto.toFixed(2)}
              </span>
            </div>
            <div>
              <strong>Lucro Percentual:</strong><br>
              <span style="color: ${lucroPercentual >= 0 ? '#28a745' : '#dc3545'}; font-weight: bold;">
                ${lucroPercentual.toFixed(1)}%
              </span>
            </div>
          </div>
        `;
      }
    }

    async function criarNovoProduto(event) {
      event.preventDefault();

      const produtoData = {
        nome: document.getElementById('produtoNome').value,
        sku: document.getElementById('produtoSku').value,
        preco_base: parseFloat(document.getElementById('produtoPrecoBase').value),
        custo_frete: parseFloat(document.getElementById('produtoCustoFrete').value) || 0,
        preco: parseFloat(document.getElementById('produtoPrecoVenda').value),
        estoque_atual: parseInt(document.getElementById('produtoEstoque').value) || 0,
        estoque_minimo: parseInt(document.getElementById('produtoEstoqueMinimo').value) || 10,
        descricao: document.getElementById('produtoDescricao').value
      };

      try {
        const response = await fetch('/api/produtos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(produtoData)
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Produto criado com sucesso!');
          fecharModalNovoProduto();
          location.reload(); // Recarregar p√°gina para mostrar novo produto
        } else {
          throw new Error(result.error || 'Erro ao criar produto');
        }
      } catch (error) {
        console.error('Erro ao criar produto:', error);
        alert('‚ùå Erro ao criar produto: ' + error.message);
      }
    }

    // ===== EDITAR PRODUTO =====
    async function editarProduto(id) {
      try {
        // Buscar dados do produto
        const response = await fetch(`/api/produtos/${id}`);
        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || 'Erro ao carregar produto');
        }

        const produto = result.data;
        abrirModalEditarProduto(produto);
      } catch (error) {
        console.error('Erro ao carregar produto:', error);
        alert('‚ùå Erro ao carregar produto: ' + error.message);
      }
    }

    function abrirModalEditarProduto(produto) {
      const modal = document.createElement('div');
      modal.id = 'modalEditarProduto';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div style="padding: 20px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center;">
            <h3 style="margin: 0; color: #333;">‚úèÔ∏è Editar Produto</h3>
            <button onclick="fecharModalEditarProduto()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <form id="formEditarProduto" style="padding: 20px;">
            <input type="hidden" id="editProdutoId" value="${produto.id_produto}">

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Nome do Produto *</label>
                <input type="text" id="editProdutoNome" value="${produto.nome}" required
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">SKU *</label>
                <input type="text" id="editProdutoSku" value="${produto.sku}" required
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; margin-bottom: 15px;">
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Pre√ßo Base *</label>
                <input type="number" id="editProdutoPrecoBase" value="${produto.preco_base || 0}" step="0.01" required
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Custo Frete</label>
                <input type="number" id="editProdutoCustoFrete" value="${produto.custo_frete || 0}" step="0.01"
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Pre√ßo Venda *</label>
                <input type="number" id="editProdutoPrecoVenda" value="${produto.preco}" step="0.01" required
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Estoque Atual</label>
                <input type="number" id="editProdutoEstoque" value="${produto.estoque_atual}" min="0"
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">Estoque M√≠nimo</label>
                <input type="number" id="editProdutoEstoqueMinimo" value="${produto.estoque_minimo || 10}" min="0"
                       style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px;">
              </div>
            </div>

            <div style="margin-bottom: 20px;">
              <label style="display: block; margin-bottom: 5px; font-weight: bold;">Descri√ß√£o</label>
              <textarea id="editProdutoDescricao" rows="3"
                        style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px; resize: vertical;">${produto.descricao || ''}</textarea>
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #333;">üí∞ C√°lculo de Lucro</h4>
              <div id="editCalculoLucro" style="font-size: 14px; color: #666;">
                Calculando...
              </div>
            </div>

            <div style="display: flex; gap: 10px; justify-content: flex-end;">
              <button type="button" onclick="fecharModalEditarProduto()"
                      style="padding: 10px 20px; background: #6c757d; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Cancelar
              </button>
              <button type="submit"
                      style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Salvar Altera√ß√µes
              </button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);

      // Calcular lucro inicial
      calcularLucroEditarAutomatico();

      // Adicionar eventos para c√°lculo autom√°tico
      ['editProdutoPrecoBase', 'editProdutoCustoFrete', 'editProdutoPrecoVenda'].forEach(id => {
        document.getElementById(id).addEventListener('input', calcularLucroEditarAutomatico);
      });

      // Adicionar evento de submit
      document.getElementById('formEditarProduto').addEventListener('submit', salvarEdicaoProduto);
    }

    function fecharModalEditarProduto() {
      const modal = document.getElementById('modalEditarProduto');
      if (modal) modal.remove();
    }

    function calcularLucroEditarAutomatico() {
      const precoBase = parseFloat(document.getElementById('editProdutoPrecoBase').value) || 0;
      const custoFrete = parseFloat(document.getElementById('editProdutoCustoFrete').value) || 0;
      const precoVenda = parseFloat(document.getElementById('editProdutoPrecoVenda').value) || 0;

      const lucroAbsoluto = precoVenda - precoBase - custoFrete;
      const lucroPercentual = precoBase > 0 ? ((lucroAbsoluto / precoBase) * 100) : 0;

      const calculoDiv = document.getElementById('editCalculoLucro');
      if (calculoDiv) {
        calculoDiv.innerHTML = `
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
            <div>
              <strong>Lucro Absoluto:</strong><br>
              <span style="color: ${lucroAbsoluto >= 0 ? '#28a745' : '#dc3545'}; font-weight: bold;">
                R$ ${lucroAbsoluto.toFixed(2)}
              </span>
            </div>
            <div>
              <strong>Lucro Percentual:</strong><br>
              <span style="color: ${lucroPercentual >= 0 ? '#28a745' : '#dc3545'}; font-weight: bold;">
                ${lucroPercentual.toFixed(1)}%
              </span>
            </div>
          </div>
        `;
      }
    }

    async function salvarEdicaoProduto(event) {
      event.preventDefault();

      const id = document.getElementById('editProdutoId').value;
      const produtoData = {
        nome: document.getElementById('editProdutoNome').value,
        sku: document.getElementById('editProdutoSku').value,
        preco_base: parseFloat(document.getElementById('editProdutoPrecoBase').value),
        custo_frete: parseFloat(document.getElementById('editProdutoCustoFrete').value) || 0,
        preco: parseFloat(document.getElementById('editProdutoPrecoVenda').value),
        estoque_atual: parseInt(document.getElementById('editProdutoEstoque').value),
        estoque_minimo: parseInt(document.getElementById('editProdutoEstoqueMinimo').value) || 10,
        descricao: document.getElementById('editProdutoDescricao').value
      };

      try {
        const response = await fetch(`/api/produtos/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(produtoData)
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Produto atualizado com sucesso!');
          fecharModalEditarProduto();
          location.reload(); // Recarregar p√°gina para mostrar altera√ß√µes
        } else {
          throw new Error(result.error || 'Erro ao atualizar produto');
        }
      } catch (error) {
        console.error('Erro ao atualizar produto:', error);
        alert('‚ùå Erro ao atualizar produto: ' + error.message);
      }
    }

    // ===== VER DETALHES =====
    async function verDetalhesProduto(id) {
      try {
        // Buscar dados do produto
        const response = await fetch(`/api/produtos/${id}`);
        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || 'Erro ao carregar produto');
        }

        const produto = result.data;
        abrirModalDetalhesProduto(produto);
      } catch (error) {
        console.error('Erro ao carregar produto:', error);
        alert('‚ùå Erro ao carregar produto: ' + error.message);
      }
    }

    function abrirModalDetalhesProduto(produto) {
      const precoVenda = parseFloat(produto.preco || 0);
      const precoBase = parseFloat(produto.preco_base || 0);
      const custoFrete = parseFloat(produto.custo_frete || 0);
      const lucroAbsoluto = precoVenda - precoBase - custoFrete;
      const lucroPercentual = precoBase > 0 ? ((lucroAbsoluto / precoBase) * 100) : 0;
      const valorEstoque = precoVenda * produto.estoque_atual;

      const modal = document.createElement('div');
      modal.id = 'modalDetalhesProduto';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      `;

      modal.innerHTML = `
        <div style="background: white; border-radius: 12px; width: 90%; max-width: 700px; max-height: 90vh; overflow-y: auto;">
          <div style="padding: 20px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center;">
            <h3 style="margin: 0; color: #333;">üëÅÔ∏è Detalhes do Produto</h3>
            <button onclick="fecharModalDetalhesProduto()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #666;">&times;</button>
          </div>

          <div style="padding: 20px;">
            <!-- Informa√ß√µes b√°sicas -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 15px 0; color: #333;">üìã Informa√ß√µes B√°sicas</h4>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <div>
                  <strong>Nome:</strong><br>
                  <span style="color: #666;">${produto.nome}</span>
                </div>
                <div>
                  <strong>SKU:</strong><br>
                  <span style="color: #666;">${produto.sku}</span>
                </div>
                <div>
                  <strong>ID:</strong><br>
                  <span style="color: #666;">#${produto.id_produto}</span>
                </div>
                <div>
                  <strong>Data Cadastro:</strong><br>
                  <span style="color: #666;">${new Date(produto.created_at).toLocaleDateString('pt-BR')}</span>
                </div>
              </div>
            </div>

            <!-- Pre√ßos e lucro -->
            <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 15px 0; color: #333;">üí∞ Pre√ßos e Lucro</h4>
              <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px;">
                <div>
                  <strong>Pre√ßo Base:</strong><br>
                  <span style="color: #666;">R$ ${precoBase.toFixed(2)}</span>
                </div>
                <div>
                  <strong>Custo Frete:</strong><br>
                  <span style="color: #666;">R$ ${custoFrete.toFixed(2)}</span>
                </div>
                <div>
                  <strong>Pre√ßo Venda:</strong><br>
                  <span style="color: #666;">R$ ${precoVenda.toFixed(2)}</span>
                </div>
                <div>
                  <strong>Lucro Absoluto:</strong><br>
                  <span style="color: ${lucroAbsoluto >= 0 ? '#28a745' : '#dc3545'}; font-weight: bold;">
                    R$ ${lucroAbsoluto.toFixed(2)}
                  </span>
                </div>
                <div>
                  <strong>Lucro %:</strong><br>
                  <span style="color: ${lucroPercentual >= 0 ? '#28a745' : '#dc3545'}; font-weight: bold;">
                    ${lucroPercentual.toFixed(1)}%
                  </span>
                </div>
                <div>
                  <strong>Margem:</strong><br>
                  <span style="color: #666;">${precoVenda > 0 ? ((lucroAbsoluto / precoVenda) * 100).toFixed(1) : 0}%</span>
                </div>
              </div>
            </div>

            <!-- Estoque -->
            <div style="background: #f3e5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 15px 0; color: #333;">üì¶ Estoque</h4>
              <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px;">
                <div>
                  <strong>Estoque Atual:</strong><br>
                  <span style="color: ${produto.estoque_atual <= (produto.estoque_minimo || 10) ? '#dc3545' : '#28a745'}; font-weight: bold;">
                    ${produto.estoque_atual} unidades
                  </span>
                </div>
                <div>
                  <strong>Estoque M√≠nimo:</strong><br>
                  <span style="color: #666;">${produto.estoque_minimo || 10} unidades</span>
                </div>
                <div>
                  <strong>Valor em Estoque:</strong><br>
                  <span style="color: #666; font-weight: bold;">R$ ${valorEstoque.toFixed(2)}</span>
                </div>
              </div>
            </div>

            <!-- Descri√ß√£o -->
            ${produto.descricao ? `
              <div style="background: #fff3cd; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h4 style="margin: 0 0 15px 0; color: #333;">üìù Descri√ß√£o</h4>
                <p style="margin: 0; color: #666; line-height: 1.6;">${produto.descricao}</p>
              </div>
            ` : ''}

            <!-- A√ß√µes -->
            <div style="display: flex; gap: 10px; justify-content: center;">
              <button onclick="editarProduto(${produto.id_produto}); fecharModalDetalhesProduto();"
                      style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer;">
                ‚úèÔ∏è Editar
              </button>
              <button onclick="fecharModalDetalhesProduto()"
                      style="padding: 10px 20px; background: #6c757d; color: white; border: none; border-radius: 6px; cursor: pointer;">
                Fechar
              </button>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    function fecharModalDetalhesProduto() {
      const modal = document.getElementById('modalDetalhesProduto');
      if (modal) modal.remove();
    }

    // ===== EXCLUIR PRODUTO =====
    async function excluirProduto(id) {
      if (!confirm('‚ùå Tem certeza que deseja excluir este produto?\n\nEsta a√ß√£o n√£o pode ser desfeita.')) {
        return;
      }

      try {
        const response = await fetch(`/api/produtos/${id}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Produto exclu√≠do com sucesso!');
          location.reload(); // Recarregar p√°gina
        } else {
          throw new Error(result.error || 'Erro ao excluir produto');
        }
      } catch (error) {
        console.error('‚ùå Erro ao excluir produto:', error);
        alert('‚ùå Erro ao excluir produto: ' + error.message);
      }
    }

    // ===== EXPORTAR =====
    async function exportarProdutos() {
      try {
        console.log('üìä Exportando produtos...');

        const response = await fetch('/api/produtos/exportar');
        const result = await response.json();

        if (result.success) {
          // Converter dados para CSV
          const dados = result.data;
          const headers = Object.keys(dados[0]);
          const csvContent = [
            headers.join(','),
            ...dados.map(row => headers.map(header => `"${row[header] || ''}"`).join(','))
          ].join('\n');

          // Download do arquivo
          const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
          const link = document.createElement('a');
          const url = URL.createObjectURL(blob);
          link.setAttribute('href', url);
          link.setAttribute('download', `produtos_${new Date().toISOString().split('T')[0]}.csv`);
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          alert(`‚úÖ ${dados.length} produtos exportados com sucesso!`);
        } else {
          throw new Error(result.error || 'Erro ao exportar');
        }
      } catch (error) {
        console.error('‚ùå Erro ao exportar:', error);
        alert('‚ùå Erro ao exportar produtos: ' + error.message);
      }
    }

    // ===== IMPORTAR =====
    function importarProdutosExcel() {
      // Criar input de arquivo
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.csv,.xlsx,.xls';
      input.style.display = 'none';

      input.onchange = async function(event) {
        const file = event.target.files[0];
        if (!file) return;

        try {
          console.log('üì• Importando arquivo:', file.name);
          alert('üì• Processando arquivo...');

          // Ler arquivo CSV
          const text = await file.text();
          const lines = text.split('\n').filter(line => line.trim());

          if (lines.length < 2) {
            throw new Error('Arquivo deve ter pelo menos uma linha de cabe√ßalho e uma linha de dados');
          }

          const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim());
          const produtos = [];

          for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split(',').map(v => v.replace(/"/g, '').trim());
            const produto = { linha: i + 1 };

            headers.forEach((header, index) => {
              const value = values[index] || '';
              switch(header.toLowerCase()) {
                case 'nome':
                  produto.nome = value;
                  break;
                case 'sku':
                  produto.sku = value;
                  break;
                case 'preco':
                case 'pre√ßo':
                case 'preco_venda':
                  produto.preco = parseFloat(value) || 0;
                  break;
                case 'preco_base':
                case 'pre√ßo_base':
                  produto.preco_base = parseFloat(value) || 0;
                  break;
                case 'custo_frete':
                  produto.custo_frete = parseFloat(value) || 0;
                  break;
                case 'estoque':
                case 'estoque_atual':
                  produto.estoque_atual = parseInt(value) || 0;
                  break;
                case 'estoque_minimo':
                  produto.estoque_minimo = parseInt(value) || 10;
                  break;
                case 'descricao':
                case 'descri√ß√£o':
                  produto.descricao = value;
                  break;
              }
            });

            if (produto.nome && produto.sku) {
              produtos.push(produto);
            }
          }

          if (produtos.length === 0) {
            throw new Error('Nenhum produto v√°lido encontrado no arquivo');
          }

          // Enviar para API
          const response = await fetch('/api/produtos/importar-csv', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ produtos })
          });

          const result = await response.json();

          if (result.success) {
            const { sucesso, erros, detalhes } = result.data;

            let mensagem = `üìä IMPORTA√á√ÉO CONCLU√çDA:\n\n`;
            mensagem += `‚úÖ Sucessos: ${sucesso}\n`;
            mensagem += `‚ùå Erros: ${erros}\n\n`;

            if (erros > 0) {
              mensagem += `DETALHES DOS ERROS:\n`;
              detalhes.filter(d => d.erro).slice(0, 5).forEach(d => {
                mensagem += `‚Ä¢ Linha ${d.linha}: ${d.erro}\n`;
              });
              if (erros > 5) {
                mensagem += `... e mais ${erros - 5} erros\n`;
              }
            }

            alert(mensagem);

            if (sucesso > 0) {
              location.reload(); // Recarregar p√°gina
            }
          } else {
            throw new Error(result.error || 'Erro na importa√ß√£o');
          }

        } catch (error) {
          console.error('‚ùå Erro na importa√ß√£o:', error);
          alert('‚ùå Erro ao importar arquivo:\n\n' + error.message + '\n\nFormato esperado (CSV):\nnome,sku,preco,preco_base,estoque_atual');
        }
      };

      document.body.appendChild(input);
      input.click();
      document.body.removeChild(input);
    }

    // ===== TEMPLATE =====
    function baixarTemplateExcel() {
      const templateData = [
        ['nome', 'sku', 'preco', 'preco_base', 'custo_frete', 'estoque_atual', 'estoque_minimo', 'descricao'],
        ['Kit Lula Premium', 'KIT-LULA-001', '89.90', '45.00', '8.50', '50', '10', 'Kit completo para pesca de lula'],
        ['Vara Telesc√≥pica 3m', 'VARA-TEL-3M', '129.90', '65.00', '12.00', '25', '5', 'Vara telesc√≥pica resistente 3 metros']
      ];

      const csvContent = templateData.map(row =>
        row.map(cell => `"${cell}"`).join(',')
      ).join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'template_produtos.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      alert('üìÑ Template baixado com sucesso!\n\nPreencha o arquivo CSV e importe novamente.');
    }
  </script>
</body>
</html>
